<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tony</title>
  
  
  <link href="https://tony-hurry.github.io/tony.github.io/atom.xml" rel="self"/>
  
  <link href="https://tony-hurry.github.io/tony.github.io/"/>
  <updated>2022-11-11T01:57:22.634Z</updated>
  <id>https://tony-hurry.github.io/tony.github.io/</id>
  
  <author>
    <name>Tony</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://tony-hurry.github.io/tony.github.io/2022/11/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
    <id>https://tony-hurry.github.io/tony.github.io/2022/11/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%88%B6%E4%BD%9C/</id>
    <published>2022-11-05T01:10:53.268Z</published>
    <updated>2022-11-11T01:57:22.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序的制作"><a href="#微信小程序的制作" class="headerlink" title="微信小程序的制作"></a>微信小程序的制作</h1><h3 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h3><h3 id="2、基本组件"><a href="#2、基本组件" class="headerlink" title="2、基本组件"></a>2、基本组件</h3><p>这里我们开始介绍在开发小程序使用到的一些基本组件，其实还是和前端有很大的相似，自是有点像是别人都封装好了的组件，然后微信小程序开发的时候就直接拿过来永久就行了，所以可以看到这里的滚动列表，轮播图之类的都是可以直接通过一个标签和他的属性就可以设置出来的，很方便也更简单，可以说是一个前端和vue结合起来运用的：</p><h4 id="1、view组件"><a href="#1、view组件" class="headerlink" title="1、view组件"></a>1、view组件</h4><p>这里的view组件其实就是开发小程序中最常见的组件，相当于HTML中的div，我们可以再里面添加想要的内容，具备div的很多属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;wrapper&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    选项1</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    选项2</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    选项3</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    选项4</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">//当然样式的使用也是和css中的类似</span><br><span class="line">.wrapper&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  </span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper view&#123;</span><br><span class="line">  height: 100rpx;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 100rpx;</span><br><span class="line">  color:wheat;</span><br><span class="line">  flex:1;</span><br><span class="line">  margin: 5rpx;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wxss具备大多数常用的css选择器，所以小伙伴们可以利用自己学过的前端知识放心的写就可以了；这里我们还是用了弹性布局；</p><p>2、scroll-view</p><p>这个是列表滚动的组件，也就是那种放在一个盒子里面可以滚动的效果：</p><p>3、swiper和swiper-item</p><p>这个就是轮播图效果了：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221111080812954.png" alt="image-20221111080812954"></p><p>我们需要在swiper里面存放swiper-item，而每一个swiper-item里面可以存放图片，其实就是滚动的一个个的swiper-item：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">&quot;swiper&quot;</span> <span class="attr">indicator-dots</span> </span></span><br><span class="line"><span class="tag"><span class="attr">indicator-color</span>=<span class="string">&quot;white&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">indicator-active-color</span>=<span class="string">&quot;yellow&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">autoplay</span> <span class="attr">interval</span>=<span class="string">&quot;3000&quot;</span> <span class="attr">circular</span></span></span><br><span class="line"><span class="tag"> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">      图片1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">      图片2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">      图片3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">//样式</span><br><span class="line">.swiper&#123;</span><br><span class="line">  border: 2rpx solid black;</span><br><span class="line">  width:500rpx;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  height:300rpx;</span><br><span class="line">  margin:30rpx auto;</span><br><span class="line">&#125;</span><br><span class="line">.swiper swiper-item view&#123;</span><br><span class="line">  height:300rpx;</span><br><span class="line">  width:500rpx;</span><br><span class="line">  line-height: 300rpx;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.swiper swiper-item:nth-child(1)&#123;</span><br><span class="line">  background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.swiper swiper-item:nth-child(2)&#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.swiper swiper-item:nth-child(3)&#123;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>基本的结构和结构有了，那么他们的滚动效果是怎么实现的呢？可以看到swiper标签的后面跟了一大串的属性，就是他们实现的这些样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">indicator-dots  //设置圆点</span><br><span class="line">indicator-color=&quot;white&quot; //设置圆点未激活的颜色</span><br><span class="line">indicator-active-color=&quot;yellow&quot; //设置圆点激活的颜色</span><br><span class="line">autoplay  //设置自动滚动</span><br><span class="line">interval=&quot;3000&quot; //设置滚动等待时间</span><br><span class="line">circular //设置循环滚动</span><br></pre></td></tr></table></figure><p>那么这就是轮播图组件，比起前端来说要方便的多；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微信小程序的制作&quot;&gt;&lt;a href=&quot;#微信小程序的制作&quot; class=&quot;headerlink&quot; title=&quot;微信小程序的制作&quot;&gt;&lt;/a&gt;微信小程序的制作&lt;/h1&gt;&lt;h3 id=&quot;1、环境搭建&quot;&gt;&lt;a href=&quot;#1、环境搭建&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://tony-hurry.github.io/tony.github.io/2022/10/15/vue%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://tony-hurry.github.io/tony.github.io/2022/10/15/vue%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-10-15T01:48:14.079Z</published>
    <updated>2022-10-15T01:57:56.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue程序设计"><a href="#vue程序设计" class="headerlink" title="vue程序设计"></a>vue程序设计</h1><h3 id="购物页面设计"><a href="#购物页面设计" class="headerlink" title="购物页面设计"></a>购物页面设计</h3><h4 id="1、创建项目和项目结构"><a href="#1、创建项目和项目结构" class="headerlink" title="1、创建项目和项目结构"></a>1、创建项目和项目结构</h4><p>在我们创建一个项目的时候很有必要了解一下项目的结构，我们可以使用下面的命令创建一个vue项目，注意创建项目需要有node环境和webpack工具的支持，所以在创建之前请保证电脑拥有这两个工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure><p>选择默认的vue2；我们的npm最好配置了国内的镜像，因为刚下过来的node环境默认是国外的资源；</p><p>一个vue项目安装完成之后会有以下的结构：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221015094919504.png" alt="image-20221015094919504"></p><p>我们一个一个来分析：</p><p>1、node_modules：存放着项目的依赖</p><p>2、public：存放着项目的静态资源，但是打包的时候不会当成模块，而是原封不动的打包到dist文件夹</p><p>3、src：程序员写代码的地方</p><p>4、.gitignore：git忽略一些操作的地方</p><p>5、babel.config.js：babel工具可以看成是一个翻译官，可以将es5转成es6等操作，用于解决一些兼容性的问题，这个文件是babel的相关配置</p><p>6、jsconfig.json：这是js的一些配置项，我们可以再这里配置取别名</p><p>7、package-lock.json：这是项目中使用到依赖记录的缓存文件，为什么我们删除一些依赖之后下次下回来很快，就是这个文件起作用</p><p>8、package.json：就是记录项目中所使用到的依赖</p><p>9、README.md：项目的说明文件</p><p>10、vue.config.js：vue组件的配置文件，我们在这里关闭我们的2elint的检测工具</p><p>我们可以先对项目做一个简单的配置，当项目运行时打开浏览器：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221015095733799.png" alt="image-20221015095733799"></p><p>在package.json中的serve后面加上–open;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue程序设计&quot;&gt;&lt;a href=&quot;#vue程序设计&quot; class=&quot;headerlink&quot; title=&quot;vue程序设计&quot;&gt;&lt;/a&gt;vue程序设计&lt;/h1&gt;&lt;h3 id=&quot;购物页面设计&quot;&gt;&lt;a href=&quot;#购物页面设计&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android high learning</title>
    <link href="https://tony-hurry.github.io/tony.github.io/2022/09/11/android/"/>
    <id>https://tony-hurry.github.io/tony.github.io/2022/09/11/android/</id>
    <published>2022-09-11T01:52:11.000Z</published>
    <updated>2022-11-17T06:01:17.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-的高级学习"><a href="#Android-的高级学习" class="headerlink" title="Android 的高级学习"></a>Android 的高级学习</h1><h3 id="1、sqlit轻量级数据库的学习"><a href="#1、sqlit轻量级数据库的学习" class="headerlink" title="1、sqlit轻量级数据库的学习"></a>1、sqlit轻量级数据库的学习</h3><h4 id="1、认识数据库"><a href="#1、认识数据库" class="headerlink" title="1、认识数据库"></a>1、认识数据库</h4><p>这是一个跨平台和弱类型的数据库，他的体积很小，只有几百kb，我们可以再Android的SDK文件夹下面找到他：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/sqiltepro.png" alt="image-20220928215916256"></p><p>在这个位置我们可以打开cmd，然后输入sqlite3,就可以执行一个命令行的数据库操作器，要注意的是他的一些命令是不一样的，跟其他的数据库比较起来，他创建或者打开数据库使用的是.open，在每一个关于数据库命令下面，都需要在前面加上一个点号，而在每一个sql命令下面都需要在后面加上一个分号；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.open StudentInfo</span><br></pre></td></tr></table></figure><p>还有很多的数据库命令，比如退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.exit</span><br><span class="line">.quit</span><br></pre></td></tr></table></figure><p>使用.table可以查看当前数据库下面的所有表；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma table_info(表名)</span><br></pre></td></tr></table></figure><p>这个可以查看数据表结构；</p><p>对于sql语句的话相信大家都多多少少接触过了，这里我就不过多赘述；</p><h4 id="2、初次使用数据库"><a href="#2、初次使用数据库" class="headerlink" title="2、初次使用数据库"></a>2、初次使用数据库</h4><p>我们可以在网上下载一个sqlite的可视化工具可以看到数据库里面的表：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/sqlitestudio.png" alt="image-20220928220745194"></p><p>sqlitestudio，安装好之后我们就只需要将我们创建的数据库拖动到这个程序里面他就会打开了：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/sqliteimg.png" alt="image-20220928220832653" style="zoom:50%;" /><h5 id="1、创建帮助类"><a href="#1、创建帮助类" class="headerlink" title="1、创建帮助类"></a>1、创建帮助类</h5><p>当然我们只用sqlitestudio是没有什么作用的，需要通过敲代码的方式实现数据的增删改查，Android提供了几个类来帮助我们实现这些操作：</p><p>我们主要就了解两个重要的类</p><p>1、SQLiteOpenHelper</p><p>这是一个帮助抽象类，没有实例，我们可以通过继承的方式来实例化一个子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.apptest01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqliteHelper</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String CREATE_TABLE_STUDENTINFI=<span class="string">&quot;CREATE TABLE Users(&quot;</span> +</span><br><span class="line">            <span class="string">&quot;userId integer primary key AutoIncrement, userName text,age integer,passWord text)&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqliteHelper</span><span class="params">(Context context)</span>&#123;</span><br><span class="line">        <span class="comment">//参数：上下文、数据库名、工厂类、版本</span></span><br><span class="line">        <span class="built_in">super</span>(context,<span class="string">&quot;StudentInfo.db&quot;</span>,<span class="literal">null</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase)</span> &#123;</span><br><span class="line">        sqLiteDatabase.execSQL(CREATE_TABLE_STUDENTINFI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, <span class="type">int</span> i, <span class="type">int</span> i1)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个子类需要创建数据库和继承父类的构造方法，首先需要写一个构造方法，将上下文传进去，super一下父类的构造方法，然后就是接口方法oncreate，在里面执行创建数据表的sql命令；</p><p>2、SQLiteDatabase</p><p>这是sql实现增删改查的工具类，可以通过这个类下面的方法来实现sql操作，但是这个类需要通过帮助类get到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sqliteHelper = <span class="keyword">new</span> <span class="title class_">SqliteHelper</span>(<span class="built_in">this</span>);</span><br><span class="line">       sqLiteDatabasewriter = sqliteHelper.getWritableDatabase();</span><br><span class="line">       sqLiteDatabaseReader = sqliteHelper.getReadableDatabase();</span><br><span class="line"><span class="comment">//条件删除</span></span><br><span class="line">sqLiteDatabasewriter.delete(<span class="string">&quot;Users&quot;</span>,<span class="string">&quot;userId=?&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;id+<span class="string">&quot;&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"> sqLiteDatabasewriter.update(<span class="string">&quot;Users&quot;</span>,contentValues,<span class="string">&quot;userId=?&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;cid&#125;);</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">sqLiteDatabasewriter.insert(<span class="string">&quot;Users&quot;</span>,<span class="literal">null</span>,contentValues);</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">sqLiteDatabasewriter.query(<span class="string">&quot;Users&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;userId=?&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;arrayList.get(i)+<span class="string">&quot;&quot;</span>&#125;,</span><br></pre></td></tr></table></figure><h5 id="2、查询"><a href="#2、查询" class="headerlink" title="2、查询"></a><strong>2、查询</strong></h5><p>那么我们知道了通过创建帮助类来创建执行类，然后使用执行类就可以实现数据的增删改查，这里我们先通过查询来讲解一下具体的实现过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cursor = sqLiteDatabasewriter.query(<span class="string">&quot;Users&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;userId=?&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;arrayList.get(i)+<span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">               <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">               <span class="keyword">if</span>(cursor.moveToNext())&#123;</span><br><span class="line">                   id = cursor.getInt(cursor.getColumnIndex(<span class="string">&quot;userId&quot;</span>));</span><br><span class="line">                   name = cursor.getString(cursor.getColumnIndex(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">                   pwd = cursor.getString(cursor.getColumnIndex(<span class="string">&quot;passWord&quot;</span>));</span><br><span class="line">                   age = cursor.getInt(cursor.getColumnIndex(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><p>我们获取操作类的方法有两个，一个是reader一个是writer，这里既然是查询数据我们用reader就可以，当然使用writer也是无伤大雅；</p><p>使用query方法进行数据的查询，他有一些参数，第一个是表名，第二个列名，还是看这个明白一点：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/sqlitedatabasewriter.png" alt="image-20220929155510340"></p><p>有分组，分页，排序，筛选，很多参数，但是一般我们就是用到选项selection和表名就可以了；</p><p>他的返回值是一个cursor游标对象，相当于一个指针，可以通过while遍历的方式来获取到查询到的结果集；</p><p><strong>关于cursor对象我们需要清楚他的两个方法，get类型() 和 getColumnIndex(“列名”)，前者的作用是通过后者的返回值实现查询到具体的数据，后者是通过列名查询到记录对应的索引，也就是说两者结合使用就可以实现查询到具体的数据，当然这个是需要咋while遍历里面实现的；</strong></p><h5 id="3、添加"><a href="#3、添加" class="headerlink" title="3、添加"></a>3、添加</h5><p>添加数据同样结合这操作类的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ContentValues</span> <span class="variable">contentValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();;</span><br><span class="line"></span><br><span class="line">contentValues.clear();</span><br><span class="line">        contentValues.put(<span class="string">&quot;userId&quot;</span>,et_id.getText().toString());</span><br><span class="line">        contentValues.put(<span class="string">&quot;userName&quot;</span>,et_name.getText().toString());</span><br><span class="line">        contentValues.put(<span class="string">&quot;passWord&quot;</span>,et_password.getText().toString());</span><br><span class="line">        contentValues.put(<span class="string">&quot;age&quot;</span>,et_age.getText().toString());</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> sqLiteDatabasewriter.insert(<span class="string">&quot;Users&quot;</span>,<span class="literal">null</span>,contentValues);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result == <span class="number">1</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>,<span class="string">&quot;记录完成&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>,<span class="string">&quot;记录失败&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        showData();</span><br><span class="line">        arrayAdapter.notifyDataSetChanged();</span><br></pre></td></tr></table></figure><p>这里又使用了一个新的对象，就是ContentValues 这个对象用于存放键值对，通过put方法，存放着与数据表中列名对应的数据，然后将其使用操作类的insert方法就可以将数据成功添加到数据表中了；</p><p>这里需要注意insert的三个参数，第一个是表名，第二个一般为null，第三个就是键值对数据了，这类统一使用contentvalues对象；</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/sqlitewriterinsert.png" alt="image-20220929160540652"></p><h5 id="4、删除"><a href="#4、删除" class="headerlink" title="4、删除"></a>4、删除</h5><p>删除操作也是结合这操作类使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqLiteDatabasewriter.delete(<span class="string">&quot;Users&quot;</span>,<span class="string">&quot;userId=?&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;id+<span class="string">&quot;&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/sqlitewirterdelete.png" alt="image-20220929160924560"></p><p>这里要注意如何使用选项的问题whereClause其实就是条件，在sql里面对应的就是where，可以使用占位符？的方式，然后后面new String[]{}传参，也可以一步到位；</p><h4 id="3、适配器复习"><a href="#3、适配器复习" class="headerlink" title="3、适配器复习"></a>3、适配器复习</h4><p>这里需要复习一下适配器，我们适配器是用来将数据显示到界面上的，那么当数据改变是我们如何刷新显示呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayAdapter.notifyDataSetChanged();</span><br></pre></td></tr></table></figure><p>只需要调用一下这个方法，<strong>记住存放数据的对象可是一个全局变量；</strong></p><h3 id="2、转战kotlin"><a href="#2、转战kotlin" class="headerlink" title="2、转战kotlin"></a>2、转战kotlin</h3><h4 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h4><p>kotlin是一门功能很全面代码有很简洁的语言，谷歌也有很大的倾向会淘汰java而使用kotlin，所以我们需要尽早的转向kotlin开发；</p><p>现在先创建一个kotlin的项目，只需要在创建项目的下面选择kotlin语言就可以了：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171400657.png" alt="image-20221010203056788" style="zoom:50%;" /><p>创建好项目我们可以发现和java的工程结构一模一样，只是文件变成了kt为后缀的kotlin类；</p><h4 id="2、创建结构"><a href="#2、创建结构" class="headerlink" title="2、创建结构"></a>2、创建结构</h4><p>kotlin偏向架构开发，也就是我们需要定义好对应功能的各个包结构：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171400437.png" alt="image-20221010203227202"></p><p>这里有很多个包，我们在里面实现了不同的功能，目的是为了后期的维护方便，adapter包里面实现的是适配器功能，dao包里面实现的是对数据的操作功能，entity是各种各样的实体类，ui里面就是我们的界面类，管理布局文件的；</p><h4 id="3、小项目"><a href="#3、小项目" class="headerlink" title="3、小项目"></a>3、小项目</h4><h5 id="1、我们通过制作一个商品展示的小项目来实现对kotlin的入门；"><a href="#1、我们通过制作一个商品展示的小项目来实现对kotlin的入门；" class="headerlink" title="1、我们通过制作一个商品展示的小项目来实现对kotlin的入门；"></a>1、我们通过制作一个商品展示的小项目来实现对kotlin的入门；</h5><p>我们创建好这样的项目和结构之后，在shoplist包下面创建一个datahelper类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shoplist</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据库和数据表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataHelper</span>(<span class="keyword">var</span> context: Context, <span class="keyword">var</span> dbname:String = <span class="string">&quot;account.db&quot;</span>) :</span><br><span class="line">    SQLiteOpenHelper(context,dbname,<span class="literal">null</span>,<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> create_table:String = <span class="string">&quot;create table account(_id integer primary key autoIncrement ,name text,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;balance integer);&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(p0: <span class="type">SQLiteDatabase</span>?)</span></span> &#123;</span><br><span class="line"><span class="comment">//        TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">        <span class="comment">//创建数据表</span></span><br><span class="line">        p0?.execSQL(create_table)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onUpgrade</span><span class="params">(p0: <span class="type">SQLiteDatabase</span>?, p1: <span class="type">Int</span>, p2: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">//TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对应的是帮助类，同样继承了sqliteopenhelper父类，kotlin可以直接在定义的时候实现构造方法，继承的父类可以直接在后面加上小括号来实现构造方法，帮助类的参数为上下文和数据库名称，和之前的一样，我就不过多赘述；</p><p>在接口方法里面我们需要定义一个常量用来创建一个数据表，这里我们定义了一个sql字符串，创建了一个account的表，在oncreate函数中可以通过p0的execsql方法执行语句<strong>，注意，这里的问号在kotlin很常见，用途是声明变量可以为空；</strong></p><h5 id="2、实体类"><a href="#2、实体类" class="headerlink" title="2、实体类"></a>2、实体类</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shoplist.entity</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类对象</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Account</span>(<span class="keyword">var</span> id:<span class="built_in">Long</span> = <span class="number">0</span>,<span class="keyword">var</span> name:String = <span class="string">&quot;&quot;</span>,<span class="keyword">var</span> balance:<span class="built_in">Int</span> = <span class="number">0</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类在kotlin当中常常用来存放数据，怎么来表明一个类是实体类呢？很简单，只需要在class前面加上data就可以了，然后不需要写任何代码；</p><h5 id="3、操作类"><a href="#3、操作类" class="headerlink" title="3、操作类"></a>3、操作类</h5><p>dao层下面的操作类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shoplist.dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.<span class="keyword">annotation</span>.SuppressLint</span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues</span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.DataHelper</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.entity.Account</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作类，增删改查</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountDao</span>(context: Context) &#123;</span><br><span class="line">    <span class="comment">//1.1 创建自己的帮助类</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> helper: DataHelper</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> accountlist:MutableList&lt;Account&gt;</span><br><span class="line">    <span class="comment">//这些变量我们只需要创建一次就可以了</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        helper = DataHelper(context)</span><br><span class="line">        accountlist = mutableListOf()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.2 插入数据函数</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(account:<span class="type">Account</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> db:SQLiteDatabase = helper.writableDatabase</span><br><span class="line">        <span class="comment">//创建存储键值对的对象</span></span><br><span class="line">        <span class="keyword">var</span> contentvalue:ContentValues = ContentValues()</span><br><span class="line">        contentvalue.put(<span class="string">&quot;name&quot;</span>,account.name)</span><br><span class="line">        contentvalue.put(<span class="string">&quot;balance&quot;</span>,account.balance)</span><br><span class="line">        <span class="keyword">var</span> id:<span class="built_in">Long</span> = db.insert(<span class="string">&quot;account&quot;</span>,<span class="literal">null</span>,contentvalue)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将id设置给account</span></span><br><span class="line">        account.id = id</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.3 获取所有商品信息</span></span><br><span class="line">    <span class="meta">@SuppressLint(<span class="string">&quot;Range&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllList</span><span class="params">()</span></span>:MutableList&lt;Account&gt;&#123;</span><br><span class="line">        <span class="keyword">var</span> db:SQLiteDatabase = helper.readableDatabase</span><br><span class="line">        <span class="keyword">var</span> cursor:Cursor = db.query(<span class="string">&quot;account&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        accountlist.clear()</span><br><span class="line">        <span class="keyword">var</span> account:Account</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext())&#123;</span><br><span class="line">            account = Account()</span><br><span class="line">            <span class="comment">//根据游标获取到数据表中的数据，添加到account对象列表中</span></span><br><span class="line">            <span class="keyword">var</span> id:<span class="built_in">Long</span> = cursor.getLong(cursor.getColumnIndex(<span class="string">&quot;_id&quot;</span>))</span><br><span class="line">            account.id = id</span><br><span class="line">            <span class="keyword">var</span> name:String = cursor.getString(cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">            account.name = name</span><br><span class="line">            <span class="keyword">var</span> balance:<span class="built_in">Int</span> = cursor.getInt(cursor.getColumnIndex(<span class="string">&quot;balance&quot;</span>))</span><br><span class="line">            account.balance = balance</span><br><span class="line">            accountlist.add(account)</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.close()</span><br><span class="line">        <span class="keyword">return</span> accountlist</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//1.4 对数据的更新</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(account: <span class="type">Account</span>)</span></span>: <span class="built_in">Int</span>&#123;</span><br><span class="line">        <span class="comment">//获取操作对象</span></span><br><span class="line">         <span class="keyword">var</span> db: SQLiteDatabase = helper.writableDatabase</span><br><span class="line">         <span class="keyword">var</span> contentvalue:ContentValues = ContentValues()</span><br><span class="line">        contentvalue.put(<span class="string">&quot;_id&quot;</span>,account.id)</span><br><span class="line">        contentvalue.put(<span class="string">&quot;name&quot;</span>,account.name)</span><br><span class="line">        contentvalue.put(<span class="string">&quot;balance&quot;</span>,account.balance)</span><br><span class="line">        <span class="keyword">var</span> result: <span class="built_in">Int</span> = db.update(<span class="string">&quot;account&quot;</span>,contentvalue,<span class="string">&quot;_id=?&quot;</span>, arrayOf(account.id.toString()))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.5 对数据的删除</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(account: <span class="type">Account</span>)</span></span>: <span class="built_in">Int</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> db: SQLiteDatabase = helper.writableDatabase</span><br><span class="line">        <span class="keyword">var</span> result:<span class="built_in">Int</span> = db.delete(<span class="string">&quot;account&quot;</span>,<span class="string">&quot;_id=?&quot;</span>, arrayOf(account.id.toString()))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的代码比较多，因为要实现数据的增删改查，使用操作类writableDatabase和readableDatabase来对数据查询或者修改</p><p>在插入数据的函数中，我们同样需要获取数据操作对象writableDatabase，然后通过ContentValues对象将我们获取的到值存储进入数据表，使用db.insert(“account”,null,contentvalue)将数据插入到数据表；</p><p>在kotlin当中，实体类的用处很大，我们存储数据都是通过实体类，传递数据也是实体类，获取数据还是实体类，相当于一个数据传递的桥梁的作用；</p><p>在获取所有数据的函数中（getAllList），同样的我们需要一个游标（cursor）通过db.query查询返回的结果是一个cursor，然后通过这个游标对象的遍历就可以获取到表中所有的数据，我们只需要创建好一个实体类对象，将查询到的数据一个一个存到实体类中，再将实体类add进入对象列表中就可以了，最后返回这个列表，因为后期需要将数据显示到适配器中；</p><h5 id="4、适配器"><a href="#4、适配器" class="headerlink" title="4、适配器"></a>4、适配器</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shoplist.adapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.<span class="keyword">annotation</span>.SuppressLint</span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.R</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.entity.Account</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountAdapter</span>(<span class="keyword">var</span> context: Context, <span class="keyword">var</span> accountlist: MutableList&lt;Account&gt;) : BaseAdapter() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用viewholder快速设置组件的值，提升listview的性能</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyViewHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">lateinit</span>  <span class="keyword">var</span> tv_listitem_id: TextView</span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span>  tv_listitem_name: TextView</span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span>  tv_listitem_banlance: TextView</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressLint(<span class="string">&quot;ViewHolder&quot;</span>)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getView</span><span class="params">(p0: <span class="type">Int</span>, p1: <span class="type">View</span>?, p2: <span class="type">ViewGroup</span>?)</span></span>: View &#123;</span><br><span class="line">        <span class="comment">//TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">        <span class="comment">//3.1 获取到布局文件的视图对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> viewHolder : MyViewHolder</span><br><span class="line">        <span class="keyword">var</span> view : View</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p1 == <span class="literal">null</span>)&#123;</span><br><span class="line">            viewHolder = MyViewHolder()</span><br><span class="line">            <span class="comment">//获取视图对象</span></span><br><span class="line">            view = LayoutInflater.from(context).inflate(R.layout.listview_item, <span class="literal">null</span>)</span><br><span class="line">            viewHolder.tv_listitem_id = view.findViewById(R.id.tv_listitem_id) <span class="keyword">as</span> TextView</span><br><span class="line">            viewHolder.tv_listitem_name = view.findViewById(R.id.tv_listitem_name) <span class="keyword">as</span> TextView</span><br><span class="line">            viewHolder.tv_listitem_banlance = view.findViewById(R.id.tv_listitem_banlance) <span class="keyword">as</span> TextView</span><br><span class="line">            view.tag = viewHolder</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            view = p1</span><br><span class="line">            viewHolder =view.tag <span class="keyword">as</span> MyViewHolder</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取到当前的account对象</span></span><br><span class="line">        <span class="keyword">var</span> account: Account = accountlist.<span class="keyword">get</span>(p0)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.3 赋值给组件</span></span><br><span class="line">        viewHolder.tv_listitem_id.text = account.id.toString()</span><br><span class="line">        viewHolder.tv_listitem_name.text = account.name</span><br><span class="line">        viewHolder.tv_listitem_banlance.text = account.balance.toString()</span><br><span class="line"></span><br><span class="line"> <span class="comment">//4.1 获取到对应的图片按钮添加单击事件</span></span><br><span class="line">        <span class="keyword">var</span> img_up:ImageView = view.findViewById(R.id.img_up)</span><br><span class="line">        <span class="keyword">var</span> img_down:ImageView = view.findViewById(R.id.img_down)</span><br><span class="line">        <span class="keyword">var</span> img_delete:ImageView = view.findViewById(R.id.img_delete)</span><br><span class="line"></span><br><span class="line">        img_up.setOnClickListener &#123;</span><br><span class="line">            <span class="comment">//需要处理的事件</span></span><br><span class="line">            account.balance++</span><br><span class="line">            dao.update(account)</span><br><span class="line">            notifyDataSetChanged()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img_down.setOnClickListener &#123;</span><br><span class="line">            account.balance--</span><br><span class="line">            dao.update(account)</span><br><span class="line">            notifyDataSetChanged()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img_delete.setOnClickListener &#123;</span><br><span class="line">            <span class="comment">//4.3 删除数据的时候我们需要弹出对话框</span></span><br><span class="line">            <span class="keyword">var</span> builder: AlertDialog.Builder = AlertDialog.Builder(context)</span><br><span class="line">            builder.setTitle(<span class="string">&quot;警告&quot;</span>)</span><br><span class="line">            builder.setIcon(R.mipmap.icon)</span><br><span class="line">            builder.setMessage(<span class="string">&quot;你真的要删除吗？&quot;</span>)</span><br><span class="line">            builder.setPositiveButton(<span class="string">&quot;确定&quot;</span>)&#123;dialogInterface, i -&gt;</span><br><span class="line">                <span class="comment">//用户确认后我们将数据库和对象数列中的数据移除</span></span><br><span class="line">                <span class="keyword">var</span> result: <span class="built_in">Int</span> = dao.delete(account)</span><br><span class="line">                accountlist.remove(account)</span><br><span class="line">                notifyDataSetChanged()</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    Toast.makeText(context,<span class="string">&quot;删除成功&quot;</span>,Toast.LENGTH_LONG).show()</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Toast.makeText(context,<span class="string">&quot;删除失败&quot;</span>,Toast.LENGTH_LONG).show()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>)&#123;</span><br><span class="line">                dialogInterface, i -&gt;  </span><br><span class="line">            &#125;</span><br><span class="line">            builder.show()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* p1 = LayoutInflater.from(context).inflate(R.layout.listview_item, p2, false)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //3.2 获取到视图中的组件对象</span></span><br><span class="line"><span class="comment">        var tv_listitem_id: TextView = p1.findViewById(R.id.tv_listitem_id)</span></span><br><span class="line"><span class="comment">        var tv_listitem_name: TextView = p1.findViewById(R.id.tv_listitem_name)</span></span><br><span class="line"><span class="comment">        var tv_listitem_banlance: TextView = p1.findViewById(R.id.tv_listitem_banlance)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //获取到当前的account对象</span></span><br><span class="line"><span class="comment">        var account: Account = accountlist.get(p0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //3.3 赋值给组件</span></span><br><span class="line"><span class="comment">        tv_listitem_id.setText(account.id.toString())</span></span><br><span class="line"><span class="comment">        tv_listitem_name.setText(account.name)</span></span><br><span class="line"><span class="comment">        tv_listitem_banlance.setText(account.balance.toString())</span></span><br><span class="line"><span class="comment">        //返回设置好的视图对象</span></span><br><span class="line"><span class="comment">        return p1*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(p0: <span class="type">Int</span>)</span></span>: Any &#123;</span><br><span class="line">        <span class="comment">//TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> accountlist.<span class="keyword">get</span>(p0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemId</span><span class="params">(p0: <span class="type">Int</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="comment">//TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> p0.toLong()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="comment">//TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> accountlist.size</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin中的实体类获取view对象的方法还是和java有点区别：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(p1 == <span class="literal">null</span>)&#123;</span><br><span class="line">            viewHolder = MyViewHolder()</span><br><span class="line">            <span class="comment">//获取视图对象</span></span><br><span class="line">            view = LayoutInflater.from(context).inflate(R.layout.listview_item, <span class="literal">null</span>)</span><br><span class="line">            viewHolder.tv_listitem_id = view.findViewById(R.id.tv_listitem_id) <span class="keyword">as</span> TextView</span><br><span class="line">            viewHolder.tv_listitem_name = view.findViewById(R.id.tv_listitem_name) <span class="keyword">as</span> TextView</span><br><span class="line">            viewHolder.tv_listitem_banlance = view.findViewById(R.id.tv_listitem_banlance) <span class="keyword">as</span> TextView</span><br><span class="line">            view.tag = viewHolder</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            view = p1</span><br><span class="line">            viewHolder =view.tag <span class="keyword">as</span> MyViewHolder</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">          <span class="comment">//使用viewholder快速设置组件的值，提升listview的性能</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyViewHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">lateinit</span>  <span class="keyword">var</span> tv_listitem_id: TextView</span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span>  tv_listitem_name: TextView</span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span>  tv_listitem_banlance: TextView</span><br><span class="line"></span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><p>主要就是要理解这一部分，我们使用了viewholder对象，这个对象在自定义适配器中非常常用，他的作用就是快速设置组件的值，然后提高程序的运行效率，这里定义这个对象的方式也很简单，就是class里面写几个属性就可以了，但是要注意这个属性是个布局文件的组件一一对应的，然后在getview函数里面就可以通过视图对象将布局文件的组件对象设置到viewholder中，在将数据列表中的数据传递到viewholder中，总的来说和实体类的作用类似；</p><h5 id="5、main布局界面"><a href="#5、main布局界面" class="headerlink" title="5、main布局界面"></a>5、main布局界面</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shoplist.ui</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.R</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.adapter.AccountAdapter</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.dao.AccountDao</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.entity.Account</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.1 获取到页面组件等变量</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> et_name:EditText</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> et_balance:EditText</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> shop_list:ListView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> dao:AccountDao</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> adapter: AccountAdapter</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> accountlist:MutableList&lt;Account&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="comment">//调用函数</span></span><br><span class="line">        <span class="keyword">init</span>()</span><br><span class="line">        shop_list.adapter = adapter</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.3 数据的初始化函数</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        et_name = findViewById(R.id.et_name)</span><br><span class="line">        et_balance = findViewById(R.id.et_balance)</span><br><span class="line">        shop_list = findViewById(R.id.shop_list)</span><br><span class="line">        dao = AccountDao(<span class="keyword">this</span>)</span><br><span class="line">        accountlist = dao.getAllList()</span><br><span class="line">        adapter = AccountAdapter(<span class="keyword">this</span>,accountlist)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.2 添加数据监听</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(view: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> name:String = et_name.text.toString()</span><br><span class="line">        <span class="keyword">var</span> balance:<span class="built_in">Int</span> = et_balance.text.toString().toInt()</span><br><span class="line">        <span class="keyword">var</span> account: Account = Account()</span><br><span class="line">        account.name = name</span><br><span class="line">        account.balance = balance</span><br><span class="line">        <span class="comment">//调用操作类的添加函数</span></span><br><span class="line">        dao.insert(account)</span><br><span class="line">        et_name.setText(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        et_balance.setText(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;添加数据成功&quot;</span>,Toast.LENGTH_LONG).show()</span><br><span class="line">        dao.getAllList()</span><br><span class="line">        adapter.notifyDataSetInvalidated()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ui界面程序实现的功能也很简单，无非就是按钮监听和组件数据传递的；</p><p>老生常谈的了，先设置组件等变量，然后初始化，在就是监听按钮的逻辑，设置调用函数设置适配器就可以了；这里出现了一个新的声明变量的东西<strong>lateinit var ，作用就是延迟赋值</strong></p><p>最后不要忘了适配器和数据的刷新，因为我们是要实时改变界面上的数据的；</p><h5 id="6、添加价格改变图标的单机事件"><a href="#6、添加价格改变图标的单机事件" class="headerlink" title="6、添加价格改变图标的单机事件"></a>6、添加价格改变图标的单机事件</h5><p>在我们每一个商品选项的后面有三个按钮，升价、降价和删除，我们都需要完善一下，补充对应的功能</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171400996.png" alt="image-20221012163359110"></p><p>因为实在布局文件上面的组件，我们需要在适配器上添加单机事件，另外操作数据的话就需要定义一个dao对象，在适配器类的全局属性下面：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//4.2 定义一个全局的dao操作变量</span></span><br><span class="line">    <span class="keyword">var</span> dao:AccountDao = AccountDao(context)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.1 获取到对应的图片按钮添加单击事件</span></span><br><span class="line">        <span class="keyword">var</span> img_up:ImageView = view.findViewById(R.id.img_up)</span><br><span class="line">        <span class="keyword">var</span> img_down:ImageView = view.findViewById(R.id.img_down)</span><br><span class="line">        <span class="keyword">var</span> img_delete:ImageView = view.findViewById(R.id.img_delete)</span><br><span class="line"></span><br><span class="line">        img_up.setOnClickListener &#123;</span><br><span class="line">            <span class="comment">//需要处理的事件</span></span><br><span class="line">            account.balance++</span><br><span class="line">            dao.update(account)</span><br><span class="line">            notifyDataSetChanged()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img_down.setOnClickListener &#123;</span><br><span class="line">            account.balance--</span><br><span class="line">            dao.update(account)</span><br><span class="line">            notifyDataSetChanged()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img_delete.setOnClickListener &#123;</span><br><span class="line">            <span class="comment">//4.3 删除数据的时候我们需要弹出对话框</span></span><br><span class="line">            <span class="keyword">var</span> builder: AlertDialog.Builder = AlertDialog.Builder(context)</span><br><span class="line">            builder.setTitle(<span class="string">&quot;警告&quot;</span>)</span><br><span class="line">            builder.setIcon(R.mipmap.icon)</span><br><span class="line">            builder.setMessage(<span class="string">&quot;你真的要删除吗？&quot;</span>)</span><br><span class="line">            builder.setPositiveButton(<span class="string">&quot;确定&quot;</span>)&#123;dialogInterface, i -&gt;</span><br><span class="line">                <span class="comment">//用户确认后我们将数据库和对象数列中的数据移除</span></span><br><span class="line">                <span class="keyword">var</span> result: <span class="built_in">Int</span> = dao.delete(account)</span><br><span class="line">                accountlist.remove(account)</span><br><span class="line">                notifyDataSetChanged()</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    Toast.makeText(context,<span class="string">&quot;删除成功&quot;</span>,Toast.LENGTH_LONG).show()</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Toast.makeText(context,<span class="string">&quot;删除失败&quot;</span>,Toast.LENGTH_LONG).show()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>)&#123;</span><br><span class="line">                dialogInterface, i -&gt;  </span><br><span class="line">            &#125;</span><br><span class="line">            builder.show()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7、给listview注册菜单组件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateContextMenu</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">       menu: <span class="type">ContextMenu</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">       v: <span class="type">View</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">       menuInfo: <span class="type">ContextMenu</span>.<span class="type">ContextMenuInfo</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">   )</span></span> &#123;</span><br><span class="line">       <span class="keyword">super</span>.onCreateContextMenu(menu, v, menuInfo)</span><br><span class="line">       menu?.setHeaderTitle(<span class="string">&quot;请选择&quot;</span>)</span><br><span class="line">       menu?.add(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="string">&quot;替换&quot;</span>)</span><br><span class="line">       menu?.add(<span class="number">0</span>, <span class="number">2</span>, <span class="number">200</span>, <span class="string">&quot;删除&quot;</span>)</span><br><span class="line">       menu?.add(<span class="number">0</span>, <span class="number">3</span>, <span class="number">300</span>, <span class="string">&quot;查找&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onContextItemSelected</span><span class="params">(item: <span class="type">MenuItem</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> info: AdapterView.AdapterContextMenuInfo =</span><br><span class="line">           item.menuInfo <span class="keyword">as</span> AdapterView.AdapterContextMenuInfo</span><br><span class="line">       <span class="keyword">var</span> id: <span class="built_in">Int</span> = info.id.toInt()</span><br><span class="line">       <span class="keyword">var</span> account: Account = accountlist.<span class="keyword">get</span>(id)</span><br><span class="line">       <span class="comment">//使用开关函数</span></span><br><span class="line">       <span class="keyword">when</span> (item.itemId) &#123;</span><br><span class="line">           <span class="number">1</span> -&gt; accountupdate(account)</span><br><span class="line">           <span class="number">2</span> -&gt; accountdelete(account)</span><br><span class="line">           <span class="number">3</span> -&gt; accountlook(account)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.onContextItemSelected(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.3 菜单点击函数实现对应操作</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">accountupdate</span><span class="params">(account: <span class="type">Account</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">accountdelete</span><span class="params">(account: <span class="type">Account</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">accountlook</span><span class="params">(account: <span class="type">Account</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们还有一个需要完善的功能，就是长按之后弹出一个菜单项，有三个步骤，第一个创建好一个菜单组件（onCreateContextMenu）：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu?.setHeaderTitle(<span class="string">&quot;请选择&quot;</span>)</span><br><span class="line">menu?.add(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="string">&quot;替换&quot;</span>)</span><br><span class="line">menu?.add(<span class="number">0</span>, <span class="number">2</span>, <span class="number">200</span>, <span class="string">&quot;删除&quot;</span>)</span><br><span class="line">menu?.add(<span class="number">0</span>, <span class="number">3</span>, <span class="number">300</span>, <span class="string">&quot;查找&quot;</span>)</span><br></pre></td></tr></table></figure><p>menu的add方法有四个参数，第一个是分组，第二个是id这个区分我们点击哪一个的标记一定不可以相同，第三个是排序，我们菜单按钮的显示顺序，第四个就是显示的信息了；然后在listview初始化了之后我们注册一下这个菜单组件就可以了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册事件,只需要在对象初始化之后</span></span><br><span class="line">registerForContextMenu(shop_list)</span><br></pre></td></tr></table></figure><p>然后就是监听菜单组件的单击事件了（onContextItemSelected），我们使用了kotlin中的开关函数when，根据菜单组件的id来进行相应功能的设定；</p><h5 id="7、长按菜单函数的完善"><a href="#7、长按菜单函数的完善" class="headerlink" title="7、长按菜单函数的完善"></a>7、长按菜单函数的完善</h5><p>因为我们长按菜单里面还有三个功能要实现，分别就是商品的替换、删除和查找：</p><p>1）、商品的删除</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.3 菜单点击函数实现对应操作</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">accountdelete</span><span class="params">(account: <span class="type">Account</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//Toast.makeText(this,&quot;亲，数据更新&quot;,Toast.LENGTH_LONG).show()</span></span><br><span class="line">    <span class="comment">//定义对话框确认是否删除</span></span><br><span class="line">    <span class="keyword">var</span> builder: AlertDialog.Builder = AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">    builder.setTitle(<span class="string">&quot;警告&quot;</span>)</span><br><span class="line">    builder.setMessage(<span class="string">&quot;您真的要删除吗?&quot;</span>)</span><br><span class="line">    builder.setIcon(R.mipmap.alert)</span><br><span class="line">    builder.setPositiveButton(<span class="string">&quot;确认&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line">        <span class="keyword">var</span> result: <span class="built_in">Int</span> = dao.delete(account)</span><br><span class="line">        accountlist = dao.getAllList()</span><br><span class="line">        adapter.notifyDataSetChanged()</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;删除成功&quot;</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    builder.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除还是比较好做的，毕竟之前也做过这个，而且没有布局，就是弹出一个对话框，然后两个选项按钮就可以了，没有啥可说的，就是我们都是根据的传过来的实体类account获取到对应的数据进行操作的；</p><p>2）、商品的替换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">accountupdate</span><span class="params">(account: <span class="type">Account</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//Toast.makeText(this,&quot;亲，功能还在开发&quot;,Toast.LENGTH_LONG).show()</span></span><br><span class="line">    <span class="keyword">var</span> builder: AlertDialog.Builder = AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">    builder.setTitle(<span class="string">&quot;更新&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> view: View = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.update_menu_view, <span class="literal">null</span>)</span><br><span class="line">    <span class="comment">//将长按商品的数据显示到编辑框</span></span><br><span class="line">    <span class="keyword">var</span> menu_update_name: EditText = view.findViewById(R.id.menu_update_name)</span><br><span class="line">    <span class="keyword">var</span> menu_update_balance: EditText = view.findViewById(R.id.menu_update_balance)</span><br><span class="line"></span><br><span class="line">    menu_update_balance.setText(account.balance.toString())</span><br><span class="line">    menu_update_name.setText(account.name)</span><br><span class="line">    builder.setView(view)</span><br><span class="line">    builder.setIcon(R.mipmap.alert)</span><br><span class="line">    builder.setPositiveButton(<span class="string">&quot;确认&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line">        account.name = menu_update_name.text.toString()</span><br><span class="line">        account.balance = menu_update_balance.text.toString().toInt()</span><br><span class="line">        <span class="keyword">var</span> result: <span class="built_in">Int</span> = dao.update(account)</span><br><span class="line"></span><br><span class="line">        adapter.notifyDataSetChanged()</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;已经修改&quot;</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    builder.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们根据传过来的account数据就可以实现对数据的替换操作了，这个时候使用到了dao里面的update函数，然后将适配器刷新一下就可以了，当然我们替换数据的时候需要两个输入框：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171400647.png" alt="image-20221021144459146" style="zoom:50%;" /><p>而且在点击之后还要显示我们长按的那个商品的信息，再对其进行修改，这里我们就是用布局文件来做这个界面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/menu_update_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;请输入名称&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/menu_update_balance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;请输入价格&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>布局也简单，一个线性两个编辑框就搞定；</p><p>3、商品的查找</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">accountlook</span><span class="params">(account: <span class="type">Account</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//Toast.makeText(this,&quot;亲，已显示全部信息&quot;,Toast.LENGTH_LONG).show()</span></span><br><span class="line">    <span class="keyword">var</span> builder: AlertDialog.Builder = AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">    builder.setTitle(<span class="string">&quot;查找&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> view: View = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.look_menu_view, <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">var</span> menu_find_name: EditText = view.findViewById(R.id.menu_find_name)</span><br><span class="line">    builder.setView(view)</span><br><span class="line">    builder.setIcon(R.mipmap.alert)</span><br><span class="line">    builder.setPositiveButton(<span class="string">&quot;确认&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line">        accountlist = dao.findbyname(menu_find_name.text.toString())</span><br><span class="line">        adapter.notifyDataSetChanged()</span><br><span class="line">        <span class="keyword">if</span> (accountlist != <span class="literal">null</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;亲，已显示全部信息&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;没有找到相关信息&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    builder.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然了，查找也就是通过用户输入商品的名称然后调用dao层中的查找方法，将查到的数据化填写到accountlist列表中，刷新一下适配器显示一下就可以了；既然是要输入名称，那么也需要用布局来实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/menu_find_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;请输入名称&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171400965.png" alt="image-20221021145441929" style="zoom:50%;" /><p>这里大家可能会有点不懂，为什么查询到的数据要放到accountlist中去，然后让页面显示，因为啊，我们accountlist只是一个中间容器，适配器中的数据全部是来自于这个容器的，我们搜索数据放到这里面去当然是为了让用户看到啊，毕竟我们设置适配器的数据源就是accountlist，<strong>而且它仅仅是一个中间容器，我们数据库中的列表可没有被替换掉哦，我们数据库中的数据还在数据空中，如果想要显示直接调用dao层中的getAllList方法，刷新一下数据库就可以重新将数据显示到页面上了；</strong></p><h5 id="8、三层架构和代码重构"><a href="#8、三层架构和代码重构" class="headerlink" title="8、三层架构和代码重构"></a>8、三层架构和代码重构</h5><p>kotlin制作项目的时候习惯性的使用三层架构，分别是表示层（ui）、业务逻辑层（service）、数据访问层（dao），之前我们制作项目的时候并没有使用到业务逻辑层，所以在ul中有很多重复和冗余的代码，没有像别人的项目那样的简洁工整，所以我们需要来对项目进行一次小小的重构：</p><p>在项目项目中创建如下结构：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401273.png" alt="image-20221024112105884"></p><p>只需要创建那个service和里面的一个类就可以了，然后将有关跟dao有交互的代码、与适配器使用有关的，accountlist有关的代码全部搬到这个来里面，然后在其他的类里面实例化这个类，使用里面的方法和属性就可以了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shoplist.service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AlertDialog</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.R</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.adapter.AccountAdapter</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.dao.AccountDao</span><br><span class="line"><span class="keyword">import</span> com.example.shoplist.entity.Account</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口回调</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountService</span>(<span class="keyword">var</span> context: Context) : AccountAdapter.IHanleAccount &#123;</span><br><span class="line">    <span class="comment">//接口方法</span></span><br><span class="line">    <span class="comment">//2.3 菜单点击函数实现对应操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">accountdelete</span><span class="params">(id: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">//Toast.makeText(this,&quot;亲，数据更新&quot;,Toast.LENGTH_LONG).show()</span></span><br><span class="line">        <span class="comment">//定义对话框确认是否删除</span></span><br><span class="line">        <span class="keyword">var</span> account: Account = accountlist.<span class="keyword">get</span>(id)</span><br><span class="line">        <span class="keyword">var</span> builder: AlertDialog.Builder = AlertDialog.Builder(context)</span><br><span class="line">        builder.setTitle(<span class="string">&quot;警告&quot;</span>)</span><br><span class="line">        builder.setMessage(<span class="string">&quot;您真的要删除吗?&quot;</span>)</span><br><span class="line">        builder.setIcon(R.mipmap.alert)</span><br><span class="line">        builder.setPositiveButton(<span class="string">&quot;确认&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line">            <span class="keyword">var</span> result: <span class="built_in">Int</span> = dao.delete(account)</span><br><span class="line">            accountlist = dao.getAllList()</span><br><span class="line">            adapter.notifyDataSetChanged()</span><br><span class="line">            <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">&quot;删除成功&quot;</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        builder.show()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">lowerBalance</span><span class="params">(id: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">//TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">        <span class="keyword">var</span> account: Account = accountlist.<span class="keyword">get</span>(id)</span><br><span class="line">        account.balance--</span><br><span class="line">        dao.update(account)</span><br><span class="line">        adapter.notifyDataSetChanged()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">ariceBalance</span><span class="params">(id: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">//TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">        <span class="keyword">var</span> account: Account = accountlist.<span class="keyword">get</span>(id)</span><br><span class="line">        account.balance++</span><br><span class="line">        dao.update(account)</span><br><span class="line">        adapter.notifyDataSetChanged()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> dao: AccountDao</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> accountlist: MutableList&lt;Account&gt;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> adapter: AccountAdapter</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化对象</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        dao = AccountDao(context)</span><br><span class="line">        accountlist = dao.getAllList()</span><br><span class="line">        adapter = AccountAdapter(context, accountlist, <span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.4 添加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addshop</span><span class="params">(account: <span class="type">Account</span>)</span></span> &#123;</span><br><span class="line">        dao.insert(account)</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;添加数据成功&quot;</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">        dao.getAllList()</span><br><span class="line">        adapter.notifyDataSetInvalidated()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载函数</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reload</span><span class="params">()</span></span> &#123;</span><br><span class="line">        accountlist = dao.getAllList()</span><br><span class="line">        adapter.notifyDataSetChanged()</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;已刷新&quot;</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">accountupdate</span><span class="params">(id: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> account: Account = accountlist.<span class="keyword">get</span>(id)</span><br><span class="line">        <span class="comment">//Toast.makeText(this,&quot;亲，功能还在开发&quot;,Toast.LENGTH_LONG).show()</span></span><br><span class="line">        <span class="keyword">var</span> builder: AlertDialog.Builder = AlertDialog.Builder(context)</span><br><span class="line">        builder.setTitle(<span class="string">&quot;更新&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> view: View = LayoutInflater.from(context).inflate(R.layout.update_menu_view, <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">var</span> menu_update_name: EditText = view.findViewById(R.id.menu_update_name)</span><br><span class="line">        <span class="keyword">var</span> menu_update_balance: EditText = view.findViewById(R.id.menu_update_balance)</span><br><span class="line"></span><br><span class="line">        menu_update_balance.setText(account.balance.toString())</span><br><span class="line">        menu_update_name.setText(account.name)</span><br><span class="line">        builder.setView(view)</span><br><span class="line">        builder.setIcon(R.mipmap.alert)</span><br><span class="line">        builder.setPositiveButton(<span class="string">&quot;确认&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line">            account.name = menu_update_name.text.toString()</span><br><span class="line">            account.balance = menu_update_balance.text.toString().toInt()</span><br><span class="line">            <span class="keyword">var</span> result: <span class="built_in">Int</span> = dao.update(account)</span><br><span class="line"></span><br><span class="line">            adapter.notifyDataSetChanged()</span><br><span class="line">            <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">&quot;已经修改&quot;</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        builder.show()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">accountlook</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//Toast.makeText(this,&quot;亲，已显示全部信息&quot;,Toast.LENGTH_LONG).show()</span></span><br><span class="line">        <span class="keyword">var</span> builder: AlertDialog.Builder = AlertDialog.Builder(context)</span><br><span class="line">        builder.setTitle(<span class="string">&quot;查找&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> view: View = LayoutInflater.from(context).inflate(R.layout.look_menu_view, <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">var</span> menu_find_name: EditText = view.findViewById(R.id.menu_find_name)</span><br><span class="line">        builder.setView(view)</span><br><span class="line">        builder.setIcon(R.mipmap.alert)</span><br><span class="line">        builder.setPositiveButton(<span class="string">&quot;确认&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line">            accountlist = dao.findbyname(menu_find_name.text.toString())</span><br><span class="line">            adapter.notifyDataSetChanged()</span><br><span class="line">            <span class="keyword">if</span> (accountlist != <span class="literal">null</span>) &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">&quot;亲，已显示全部信息&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">&quot;没有找到相关信息&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>) &#123; dialogInterface, i -&gt;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        builder.show()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个重要的知识点就是我们写代码出现<strong>了循环回调该怎么办？</strong></p><p>什么是循环回调，就是连个类之间相互调用的情况，想想看如果一个类初始化的时候有去调用那个初始化这个类的类，是不是程序就会陷入一个死循环，那么我们如何解决呢？</p><p><strong>使用接口回调，就是我</strong>们在一个类里面定义一个接口，接口里存放着我们需要调用的方法，然后在另一个类里面实现这个接口和接口方法，在实例化前面那个类的时候将实现了接口和接口方法的那个类当做一个参数传进入，然后我们前面一个类如果要使用里面的方法的话就直接去参数里的那个对象里的就可以了，就不用去实例化那个类了；</p><p>就比如这里的service就是实现接口的那个类，而adapter就是传递使用接口方法的那个类：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401968.png" alt="image-20221024112823264"></p><h3 id="3、安卓网络编程"><a href="#3、安卓网络编程" class="headerlink" title="3、安卓网络编程"></a>3、安卓网络编程</h3><p>安卓也是具有网络编程这一板块的，我们先从线程通讯说起，因为安卓自4.0之后就有一个特性，就是主线程不可以发送网络请求，而子线程不可以更新界面，所以我们想要学会网络编程，必须先掌握线程之间的通讯；</p><h4 id="1、handler"><a href="#1、handler" class="headerlink" title="1、handler:"></a>1、handler:</h4><p>这个是主线程和子线程通讯的媒介，之前我们在制作轮播图的时候用到过这个，可以用它来定时，定时的发送一条信息给主线程，然后主线程根据信息的类型来更新界面：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*hanlder= MyHanlder(WeakReference(this))*/</span></span><br><span class="line"><span class="comment">//1.3 非静态内部类:使用WeakReference防止内存泄漏</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyHanlder</span>(<span class="keyword">var</span> wk:WeakReference&lt;MainActivity&gt;):Handler(Looper.getMainLooper())&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg)</span><br><span class="line">        <span class="keyword">var</span> activity = wk.<span class="keyword">get</span>()</span><br><span class="line">       <span class="keyword">if</span>(activity!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(msg.what==<span class="number">0</span>)&#123;</span><br><span class="line">                activity.count++</span><br><span class="line">                activity.tv_count.setText(activity.count.toString())</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(msg.what==<span class="number">1</span>)&#123;</span><br><span class="line">                activity.isback=<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在kotlin中，我们可以这样创建一个自己的handler的内部类，因为直接使用handler虽然方便，但是有一个问题就是会导致内存泄漏，handler会默认隐式引用activity，在我们关闭了项目之后并不会被销毁，所以我们就是用了弱引用（WeakReference），只要是通过这个对象引用过得对象，在销毁了引用对象之后，也就是这里的mainactivity，就会被回收，所以不会导致内存泄露；注意这里的写法，我们<strong>通过get()可以拿到隐式引用的activity对象，就可以对里面的属性进行更新；但是要判断一下是否为null值</strong></p><h4 id="2、线程thread"><a href="#2、线程thread" class="headerlink" title="2、线程thread"></a>2、线程thread</h4><p>一般我们创建一个子线程可以这样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread()&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">               message.what=<span class="number">0</span></span><br><span class="line">               myHanlder.sendEmptyMessage(<span class="number">0</span>)</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;.start()</span><br></pre></td></tr></table></figure><p>当然也可以使用实现Runnable接口的方法；</p><h4 id="3、发送get请求"><a href="#3、发送get请求" class="headerlink" title="3、发送get请求"></a>3、发送get请求</h4><p>安卓提供了两种发送请求的方式：一个是HttpURLConnection对象，一个是HttpClient(但是这种已经被淘汰了)，我们就学习一下HttpURLConnection是如何发送请求的，之前我们说过，我们发送请求只能在子线程，所以我们要创建一个子线程，但是我们需要修改一些配置，因为默认andorid studio 是不允许发送请求的，我们需要在清单文件中添加上这两句：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401658.png" alt="image-20221031203328404"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.hanlderpractice&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//允许发送网络请求</span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        //<span class="attr">允许发送纯文本</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    </span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加上去之后我们在写我们的代码</p><p>1、创建URL：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpurl: String = <span class="string">&quot;http://10.0.2.2:5000/api/user/&quot;</span> + parame1</span><br><span class="line"><span class="keyword">var</span> url: URL = URL(httpurl)</span><br><span class="line"><span class="keyword">var</span> conn: HttpURLConnection = url.openConnection() <span class="keyword">as</span> HttpURLConnection</span><br></pre></td></tr></table></figure><p>我们创建一个字符串，这是我们的网址，然后使用URL封装成一个请求对象，调用他的函数openConnection并且将返回值强转为一个</p><p>HttpURLConnection对象，然后我们就可以将请求过来的数据存储下来：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> conn.requestMethod = <span class="string">&quot;GET&quot;</span></span><br><span class="line">conn.connectTimeout = <span class="number">5000</span></span><br><span class="line">conn.readTimeout = <span class="number">5000</span></span><br><span class="line"><span class="keyword">var</span> code: <span class="built_in">Int</span> = conn.responseCode</span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> inputStream: InputStream = conn.inputStream</span><br><span class="line">    <span class="keyword">var</span> byteArray: ByteArray = ByteArray(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">var</span> length: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">var</span> result: String = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    inputStream.use &#123;</span><br><span class="line">        length = it.read(byteArray)</span><br><span class="line">        result = String(byteArray)</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;<span class="variable">$result</span>: &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    inputStream.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后设置一下访问超时时间和阅读超时时间，返回码，我们使用这个返回的请求码判断是否为200，这是请求成功的代码，然后创建一个输入流对象，我们就使用这个输入流将请求下来的数据存储到二进制数组中，然后通过日志打印出来就可以了；最后不要忘了关闭这个流；</p><p>2、创建子线程，然后在单击事件里面启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">class HttpPractice : AppCompatActivity() &#123;</span><br><span class="line"></span><br><span class="line">    lateinit var thread: Thread</span><br><span class="line">    lateinit var parame1: String</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        private const val TAG = &quot;HttpPractice&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_http_practice)</span><br><span class="line">        //1.1 创建子线程用来发送请求</span><br><span class="line">        parame1 = &quot;tt@gmail.com&quot;</span><br><span class="line">        thread = Thread &#123;</span><br><span class="line">            var httpurl: String = &quot;http://10.0.2.2:5000/api/user/&quot; + parame1</span><br><span class="line">            var url: URL = URL(httpurl)</span><br><span class="line">            var conn: HttpURLConnection = url.openConnection() as HttpURLConnection</span><br><span class="line">            conn.requestMethod = &quot;GET&quot;</span><br><span class="line">            conn.connectTimeout = 5000</span><br><span class="line">            conn.readTimeout = 5000</span><br><span class="line">            var code: Int = conn.responseCode</span><br><span class="line">            if (code == 200) &#123;</span><br><span class="line">                var inputStream: InputStream = conn.inputStream</span><br><span class="line">                var byteArray: ByteArray = ByteArray(1024)</span><br><span class="line">                var length: Int</span><br><span class="line">                var result: String = &quot;&quot;</span><br><span class="line"></span><br><span class="line">                inputStream.use &#123;</span><br><span class="line">                    length = it.read(byteArray)</span><br><span class="line">                    result = String(byteArray)</span><br><span class="line">                    Log.d(TAG, &quot;$result: &quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                inputStream.close()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fun sendget(view: View) &#123;</span><br><span class="line">        //2.1 发送请求，启动线程</span><br><span class="line"></span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是要带参数的get也很容易，我们这里也是使用了，就是在后面拼接上一个变量，填上我们想要的传递的参数就是了；</p><h4 id="4、发送post请求"><a href="#4、发送post请求" class="headerlink" title="4、发送post请求"></a>4、发送post请求</h4><p>发送post请求的方式还是跟get有点差别，不过是多了传递表单的操作：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name:String=et_urlname.text.toString()</span><br><span class="line">       <span class="keyword">var</span> pwd:String=et_urlpwd.text.toString()</span><br><span class="line">       <span class="comment">//3.1 发送post请求</span></span><br><span class="line">       Thread&#123;</span><br><span class="line">           <span class="keyword">var</span> httpurl: String = <span class="string">&quot;http://10.0.2.2:5000/api/login&quot;</span></span><br><span class="line">           <span class="keyword">var</span> url: URL = URL(httpurl)</span><br><span class="line">           <span class="keyword">var</span> conn: HttpURLConnection = url.openConnection() <span class="keyword">as</span> HttpURLConnection</span><br><span class="line">           conn.requestMethod = <span class="string">&quot;POST&quot;</span></span><br><span class="line">           conn.connectTimeout = <span class="number">5000</span></span><br><span class="line">           conn.readTimeout = <span class="number">5000</span></span><br><span class="line">           conn.doOutput=<span class="literal">true</span></span><br><span class="line">           conn.doInput=<span class="literal">true</span></span><br><span class="line">           conn.useCaches=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> params:String=<span class="string">&quot;Email=&quot;</span>+URLEncoder.encode(name,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">           params = params+ <span class="string">&quot;&amp;Password=&quot;</span>+URLEncoder.encode(pwd,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">           <span class="keyword">var</span> byte:ByteArray=params.toByteArray()</span><br><span class="line"></span><br><span class="line">           conn.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">           conn.setRequestProperty(<span class="string">&quot;Connection&quot;</span>,<span class="string">&quot;Keep-Alive&quot;</span>)</span><br><span class="line">           conn.setRequestProperty(<span class="string">&quot;Content-Length&quot;</span>,byte.size.toString())</span><br><span class="line">           <span class="keyword">var</span> os:OutputStream=conn.outputStream</span><br><span class="line">           os.write(byte)</span><br><span class="line">           os.flush()</span><br><span class="line">           os.close()</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> code: <span class="built_in">Int</span> = conn.responseCode</span><br><span class="line">           <span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">               <span class="keyword">var</span> inputStream: InputStream = conn.inputStream</span><br><span class="line">               <span class="keyword">var</span> byteArray: ByteArray = ByteArray(<span class="number">1024</span>)</span><br><span class="line">               <span class="keyword">var</span> length: <span class="built_in">Int</span>=<span class="number">0</span></span><br><span class="line">               <span class="keyword">var</span> result: String = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">               inputStream.use &#123;</span><br><span class="line">                   length = it.read(byteArray)</span><br><span class="line">                   result = String(byteArray,<span class="number">0</span>,length)</span><br><span class="line">                   Log.d(TAG, <span class="string">&quot;<span class="variable">$result</span>: &quot;</span>)</span><br><span class="line">                   <span class="keyword">if</span>(result.equals(<span class="string">&quot;true&quot;</span>))&#123;</span><br><span class="line">                       myhanlder.sendEmptyMessage(<span class="number">1</span>)</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       myhanlder.sendEmptyMessage(<span class="number">0</span>)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               inputStream.close()</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;.start()</span><br></pre></td></tr></table></figure><p>跟get的主要区别就是这几个项：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">conn.requestMethod = <span class="string">&quot;POST&quot;</span></span><br><span class="line">           conn.connectTimeout = <span class="number">5000</span></span><br><span class="line">           conn.readTimeout = <span class="number">5000</span></span><br><span class="line">           conn.doOutput=<span class="literal">true</span></span><br><span class="line">           conn.doInput=<span class="literal">true</span></span><br><span class="line">           conn.useCaches=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> params:String=<span class="string">&quot;Email=&quot;</span>+URLEncoder.encode(name,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">           params = params+ <span class="string">&quot;&amp;Password=&quot;</span>+URLEncoder.encode(pwd,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">           <span class="keyword">var</span> byte:ByteArray=params.toByteArray()</span><br><span class="line"></span><br><span class="line">           conn.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">           conn.setRequestProperty(<span class="string">&quot;Connection&quot;</span>,<span class="string">&quot;Keep-Alive&quot;</span>)</span><br><span class="line">           conn.setRequestProperty(<span class="string">&quot;Content-Length&quot;</span>,byte.size.toString())</span><br><span class="line">           <span class="keyword">var</span> os:OutputStream=conn.outputStream</span><br><span class="line">           os.write(byte)</span><br><span class="line">           os.flush()</span><br><span class="line">           os.close()</span><br></pre></td></tr></table></figure><p>我们先要将请求方式设置为POST，然后是超时时间和允许输入输出和缓存，因为我们要提交表单，所以我们conn对象的输出流需要将表单写入到缓存里面，就当做是提交了，后面就是制作我们的表单，只需要通过字符串拼接的方式就可以了，后面我们会学习json格式数据，所以这里我们先这样做；再就是一些请求头，比如提交内容的类型Content-Type，为表单类型，链接模式是长连接Keep-Alive，传递的长度就是字节数组的长度，这里都是规定写法；</p><p>设置完成了请求头之后就可以将数据写入到缓存，也就是获取conn的输出流，然后write我们拼接好的数据，刷新关闭流就可以了；</p><p>后面获取结果的操作都是和get是一样的，这里我们有使用了handler，还是那个使用了弱引用的匿名内部类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建弱引用handler</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyHanlder</span>(<span class="keyword">var</span> wk: WeakReference&lt;HttpPractice&gt;):Handler(Looper.getMainLooper())&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg)</span><br><span class="line">            wk.<span class="keyword">get</span>()?.run &#123;</span><br><span class="line">                <span class="keyword">if</span>(msg.what==<span class="number">1</span>)&#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;登录成功&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;登录失败&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5、Json数据格式"><a href="#5、Json数据格式" class="headerlink" title="5、Json数据格式"></a>5、Json数据格式</h4><p>Android给我们提供了一个简单好用的在对象和json数据格式之间转化的工具，我们需要在项目的builder.gradle下面导入这个依赖（GSON）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.google.code.gson:gson:2.8.6&#x27;</span><br></pre></td></tr></table></figure><p>然后让项目同步下载一下就可以使用gson这个工具了；json数据格式没有语言的限制，他有自己特定的格式：</p><p>又是通过字符串的方式来传递的，所以在网络通讯中有很大的用途；</p><h3 id="4、okhttp网络请求框架"><a href="#4、okhttp网络请求框架" class="headerlink" title="4、okhttp网络请求框架"></a>4、okhttp网络请求框架</h3><p>这是一个安卓很常用的网络请求框架，其实不仅仅是安卓可以，java、Python同样是可以使用这个网络框架，他主要实现的功能就是发送网络请求，不过要比安卓自带的HttpURLConnection方便得多：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Thread()&#123;</span><br><span class="line">            <span class="keyword">var</span> client:OkHttpClient= OkHttpClient()</span><br><span class="line">            <span class="keyword">var</span> request: Request=Request.Builder()</span><br><span class="line">                .url(<span class="string">&quot;https://publicobject.com/helloworld.txt&quot;</span>)</span><br><span class="line">                .build()</span><br><span class="line">            client.newCall(request).execute().use &#123;</span><br><span class="line">                response -&gt;</span><br><span class="line">                <span class="keyword">if</span>(!response.isSuccessful)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> IOException(<span class="string">&quot;Unexpected code<span class="variable">$response</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>((name,value) <span class="keyword">in</span> response.headers)&#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;okhttplogin: <span class="variable">$name</span>:<span class="variable">$value</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;run: &quot;</span>+response.body!!.string())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start()</span><br></pre></td></tr></table></figure><p>注意：<strong>在使用这个框架之前我们需要导入依赖</strong>，或者可以自己离线导入jar包，但是离线需要导入okhttp和okio两个jar包；</p><p>导入依赖：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.squareup.okhttp3:okhttp:4.9.0&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>配合之前设置好的user-permssion权限就可以了；</strong></p><p>它大概只需要三步就可以完成一个请求的发送和接收，而HttpURLConnection不仅要设置很多参数，还需使用输入输出流来进行数据的接收和发送；那么是那三步呢？</p><h4 id="1、创建okhttpclient客户机和request请求对象；"><a href="#1、创建okhttpclient客户机和request请求对象；" class="headerlink" title="1、创建okhttpclient客户机和request请求对象；"></a>1、创建okhttpclient客户机和request请求对象；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var client:OkHttpClient= OkHttpClient()</span><br><span class="line">var request: Request=Request.Builder()</span><br><span class="line">.url(&quot;https://publicobject.com/helloworld.txt&quot;)</span><br><span class="line">.build()</span><br></pre></td></tr></table></figure><p>这里默认发送的是get请求，我们还可以是表单和json：</p><p>json:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.2 异步的发送json数据</span></span><br><span class="line"><span class="keyword">var</span> jsonobject:JSONObject= JSONObject()</span><br><span class="line"><span class="keyword">var</span> name:String=et_name.text.toString()</span><br><span class="line"><span class="keyword">var</span> pwd:String=et_pwd.text.toString()</span><br><span class="line">jsonobject.put(<span class="string">&quot;UserName&quot;</span>,name)</span><br><span class="line">jsonobject.put(<span class="string">&quot;UserPwd&quot;</span>,pwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client:OkHttpClient= OkHttpClient()</span><br><span class="line"><span class="keyword">var</span> request: Request=Request.Builder()</span><br><span class="line">.url(<span class="string">&quot;http://10.0.2.2:8080/api/v2/user_login&quot;</span>)</span><br><span class="line">.post(jsonstr)</span><br><span class="line">.build()</span><br></pre></td></tr></table></figure><p>表单：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client:OkHttpClient= OkHttpClient()</span><br><span class="line"><span class="keyword">var</span> formBody=FormBody.Builder()</span><br><span class="line">.add(<span class="string">&quot;Email&quot;</span>,<span class="string">&quot;tt@gmail.com&quot;</span>)</span><br><span class="line">.add(<span class="string">&quot;Password&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">.build()</span><br><span class="line"><span class="keyword">var</span> request: Request=Request.Builder()</span><br><span class="line">.url(<span class="string">&quot;http://10.0.2.2:5000//api/login&quot;</span>)</span><br><span class="line">.post(formBody)</span><br><span class="line">.build()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、发送请求"><a href="#2、发送请求" class="headerlink" title="2、发送请求"></a>2、发送请求</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client.newCall(request).execute().use &#123;</span><br><span class="line">                response -&gt;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="3、接收处理数据"><a href="#3、接收处理数据" class="headerlink" title="3、接收处理数据"></a>3、接收处理数据</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!response.isSuccessful)&#123;</span><br><span class="line"><span class="keyword">throw</span> IOException(<span class="string">&quot;Unexpected code<span class="variable">$response</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>((name,value) <span class="keyword">in</span> response.headers)&#123;</span><br><span class="line">Log.d(TAG, <span class="string">&quot;okhttplogin: <span class="variable">$name</span>:<span class="variable">$value</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Log.d(TAG, <span class="string">&quot;run: &quot;</span>+response.body!!.string())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-的高级学习&quot;&gt;&lt;a href=&quot;#Android-的高级学习&quot; class=&quot;headerlink&quot; title=&quot;Android 的高级学习&quot;&gt;&lt;/a&gt;Android 的高级学习&lt;/h1&gt;&lt;h3 id=&quot;1、sqlit轻量级数据库的学习&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="学习安卓，突破自我" scheme="https://tony-hurry.github.io/tony.github.io/tags/%E5%AD%A6%E4%B9%A0%E5%AE%89%E5%8D%93%EF%BC%8C%E7%AA%81%E7%A0%B4%E8%87%AA%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux base</title>
    <link href="https://tony-hurry.github.io/tony.github.io/2022/09/11/Linux%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>https://tony-hurry.github.io/tony.github.io/2022/09/11/Linux%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-09-11T01:52:11.000Z</published>
    <updated>2022-11-17T06:05:05.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux基础学习"><a href="#Linux基础学习" class="headerlink" title="Linux基础学习"></a>Linux基础学习</h1><h3 id="1、使用xshell远程控制Linux"><a href="#1、使用xshell远程控制Linux" class="headerlink" title="1、使用xshell远程控制Linux"></a>1、使用xshell远程控制Linux</h3><p>首先我们先要启动ubantu的ssh功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p><strong>如果没有这个ssh软件就需要安装一下，另外还有安装程序升级一下</strong>，所以就有了下面两条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>然后就可以试着打开xshell软件，新建一个会话就开始操作了，如果没有，那么就是没有分好ip的问题，到VMware里面的虚拟网络里面火速调整一波，如果可以ping通的话就可以了；</p><p>另外，怎么查看ip呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window:</span><br><span class="line">ipconfig</span><br><span class="line">linux: </span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>再来学一手如何快速关机和重启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关机：</span><br><span class="line">shutdown -h now</span><br><span class="line">重启：</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>不得不说，Linux的命令是真的多！</p><h3 id="2、Linux基本操作指令"><a href="#2、Linux基本操作指令" class="headerlink" title="2、Linux基本操作指令"></a>2、Linux基本操作指令</h3><p>1、<strong>pwd</strong>：显示当前操作路径；</p><p>2、<strong>cd 目标文件夹</strong>：切换到目标文件夹；</p><p>3、<strong>ls -l</strong>：凡是由 - 就是一些额外的选项，代表着的是不同的属性，这里是显示详情，当然，这个可以拼接的：</p><p><strong>ls -al</strong> ：这个就表示显示当前目录下所有文件的详细信息；</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/linux01.png" alt="image-20220912215217937" style="zoom:50%;" /><p>4、<strong>cp 文件夹 文件夹名</strong>：这是常见的复制文件的命令，当然我们是可以将路径添加上去的，就表明需要复制文件到想要的路径下面；</p><p>5、<strong>rm 文件&#x2F;文件夹  -ri</strong>：当然，你们也可以不用加i,那么删除的时候就不会征求你的同意了，所以要慎用；如果是删除文件的话可以不用加选项条件，如果是文件夹的话就需要了；</p><p>6、<strong>touch 文件</strong>：这个就是创建文件了；</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/linux02.png" alt="image-20220912220024313"></p><p>7、<strong>grep 关键词 文件名</strong>：当然也是可以加上路径的，这个的作用就是查找抓取一定的内容，就根据我们给的关键词来查找；</p><p>8、<strong>man 指令</strong>：这个命令比较重要，是用来查找指令的指令手册，如果我们忘记了指令的用法可以依靠他来回忆；</p><p>9、使用ctrl+l来清屏，或者输入clear；</p><p>10、<strong>mv 文件 文件名</strong>：这个是用来移动和重名命文件的，如果是重命名的话，我们路径可以填.&#x2F;，只填路径；</p><h3 id="3、权限常识"><a href="#3、权限常识" class="headerlink" title="3、权限常识"></a>3、权限常识</h3><p>在一个安全性高的系统里面，搞清楚我们具有哪些权限非常重要，Linux里面具有很多权限，当然也可以修改它：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/linux03.png" alt="image-20220912214421984" style="zoom: 67%;" /><p>可以看到我这个目录下面的文件夹和文件前面由一些rwx组成的字符串，他们代表的是一些权限，<strong>我们可以将他们三个三个分为一组</strong>，前面三个代表的是用户的权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r: 可读 w:可写 d: 代表是文件夹 x: 是一个可执行文件</span><br></pre></td></tr></table></figure><p>第一组表示的用户的权限，第二组代表的是用户组的权限，第三组是所有用户的权限；</p><p>对于用户组，就是我们将计算机上的用户分了一个组就是了；</p><h4 id="1、修改权限"><a href="#1、修改权限" class="headerlink" title="1、修改权限"></a>1、修改权限</h4><p>这些命令的改变也很简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u-w test01.text 表示的是删除用户的可写权限</span><br><span class="line">chmod g+w test01.text 表示的是添加用户组的可写权限</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/limux04.png" alt="image-20220912220230133" style="zoom:67%;" /><p>可以看到输入命令之后test01.text问价的权限发生响应的变化；</p><h3 id="4、vi编辑器的使用"><a href="#4、vi编辑器的使用" class="headerlink" title="4、vi编辑器的使用"></a>4、vi编辑器的使用</h3><h4 id="1、编辑"><a href="#1、编辑" class="headerlink" title="1、编辑"></a>1、编辑</h4><p>在Linux中，一般使用vi编辑器来编辑文本文件或者是C语言文件等，那么要怎么操作呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hello.c</span><br></pre></td></tr></table></figure><p>在命令行输入这个命令就可以创建一个c文件，当然不同的文件只是后缀不同；</p><p>回车之后就会进入一个文本的编辑界面：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401082.png" alt="image-20220926200113729" style="zoom:50%;" /><p>这个编辑器有三种模式，现在这种输入命令行，我们可以输入i来进去插入模式，输入冒号进入底行模式，注意三种模式之间是不能直接转化的，需要通过命令行模式这个跳板才可以转换；</p><p>我们试着来写一个简单的c程序：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401399.png" alt="image-20220926200420270" style="zoom:50%;" /><p>输入i之后就可以写程序了，比较简单，我们就主要来学习一下命令行模式：</p><p>按esc来切换到命令行模式：</p><p>然后可以输入一下命令来进行需要的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x --删除光标所在的字符</span><br><span class="line">dd --删除光标所在行</span><br><span class="line">n+dd --删除包括光标所在的后面n行</span><br><span class="line">d+$ --重光标到尾所有内容全删除</span><br></pre></td></tr></table></figure><p>还有就是复制和粘贴：</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220926201335860.png" alt="image-20220926201335860" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yy --复制光标所在行</span><br><span class="line">p --粘贴复制的内容到下一行</span><br></pre></td></tr></table></figure><p>我们还可以输入o来向下新起一行来进入编辑模式；</p><p>底行模式下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:w --保存</span><br><span class="line">:q --退出</span><br><span class="line">:x 保存并退出</span><br><span class="line">:wq 同上</span><br></pre></td></tr></table></figure><p>另外我们在这些命令的后面添加！就表示强制的进行操作；还有就是替换操作：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401092.png" alt="image-20220926201833969" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/hello/hi/g --将hello全部替换为hi</span><br></pre></td></tr></table></figure><p>还可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：/xx --查找xx</span><br></pre></td></tr></table></figure><p>在命令行模式下面可以输入G移动到文档的最后一行；</p><h4 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h4><p>用于嵌入式开发的C语言代码我们要如何进行编译呢？</p><p>首先我们保存并退出**:x**</p><p>如果不加百分号的话就表示在当前行进行替换；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello --将C语言文件编译成可执行文件</span><br></pre></td></tr></table></figure><p>对于一个C语言文件到执行文件需要执行四个步骤，而且是有顺序的，<strong>预编译-&gt;编译-&gt;汇编-&gt;链接</strong></p><p>一般检查错误都是在编译这个环节；</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401718.png" alt="image-20220926202445383"></p><p><strong>注意：这里的&#x2F;n打错了，应该是\n;</strong></p><h4 id="3、注意"><a href="#3、注意" class="headerlink" title="3、注意"></a>3、注意</h4><p>在vi编辑器中的三种模式，从插入模式到命令行模式点击esc，从命令行模式到底行模式输入：就可以，但是却不可以直接从插入模式到底行模式；</p><p>有时候我们在编译好了文件之后异常退出，之后在进入文件的时候就会弹出异常退出的对话框，而且是每次进入都会，这时候我们需要在当前路径下面找到一个wrap后缀的隐藏文件，将他删除就可以了；</p><p>chown命令和chmod命令是不一样的，前者是更改文件的所有者，后者是更改访问权限，会处在选择题中；</p><h3 id="5、首次登陆管理员"><a href="#5、首次登陆管理员" class="headerlink" title="5、首次登陆管理员"></a>5、首次登陆管理员</h3><h4 id="1、设置密码"><a href="#1、设置密码" class="headerlink" title="1、设置密码"></a>1、设置密码</h4><p>在装上新的系统之后如果要切换到管理员账号需要先设置一下密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>输入这行命令之后系统就会提示你需要输入当前账号的密码，然后又会提示输入新密码，按照它的步骤来我们就可以登录管理员账号了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><h4 id="2、更新vi编辑器"><a href="#2、更新vi编辑器" class="headerlink" title="2、更新vi编辑器"></a>2、更新vi编辑器</h4><p>因为系统预装的是vim-tiny，这个编辑器的功能便不完善，我们需要删除掉重新安装vim-full:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove vim</span><br></pre></td></tr></table></figure><p>如果在安装过程中出现问题，很可能就是安装程序没有升级，所以我们可以升级一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>然后在执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><p><strong>注意：如果不是登录的超级管理员账号，请在前面加上sudo</strong></p><h3 id="6、调试程序（gdb-的使用"><a href="#6、调试程序（gdb-的使用" class="headerlink" title="6、调试程序（gdb)的使用"></a>6、调试程序（gdb)的使用</h3><p>在我们写好一个程序之后，可以使用cat命令来查看我们的代码：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401449.png" alt="image-20221010210759548"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件名</span><br></pre></td></tr></table></figure><p>如果想要一个程序可以让我们调试，我们需要让这个程序具备调试的信息，如果让编译文件具有调试信息呢？</p><p>很简单，只需要在编译的指令后加上一个-g</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401432.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc mutifytest.c -o mutify -g</span><br></pre></td></tr></table></figure><p>可以看到这个编译出来的文件还是比较大的，因为里面存在调试信息；</p><p>这是程序编译的结果；</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401513.png" alt="image-20221010210651114"></p><p>然后我们使用gdb命令来启动调试：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401369.png" alt="image-20221010210917906"  /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb 带有调试信息的可执行文件</span><br></pre></td></tr></table></figure><p>在弹出的gdb模式下面我们可以输入下面的常用调试命令来实现我们的调试功能：</p><p>1、b + 行号 ： 在行号前面打一个断点</p><p>2、r : 开始调试</p><p>3、n :  往下执行，不会进入函数</p><p>4、step :  往下执行，一步一步执行，会进入函数</p><p>5、l :  显示代码十行，如果重复输入，将会往后显示直至代码结束，这个显示数量可以通过set list进行调整：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401507.png" alt="image-20221010211402817" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401392.png" alt="image-20221010211549407"></p><p>不过需要注意只是当前调试生效，退出之后就无效了；</p><p>6、quit : 可以退出调试</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401578.png" alt="image-20221010211516333"></p><p>7、display：可以再调试的时候使用，自动打印当前位置的变量值</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171401932.png" alt="image-20221010211807279"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display 变量值</span><br></pre></td></tr></table></figure><p>8、条件断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b if 条件</span><br></pre></td></tr></table></figure><p><strong><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402198.png" alt="image-20221010212021315"></strong></p><p>条件断点也是非常常用的，我们的以设置在变量满足某种情况的时候打个断点；</p><p>9、i b : 显示当前所有断点的信息；</p><h3 id="7、用户和用户组"><a href="#7、用户和用户组" class="headerlink" title="7、用户和用户组"></a>7、用户和用户组</h3><p>在Linux系统中有三大用户，分别是超级用户、普通用户和系统用户，他们拥有者各自的权限和各自的组，而在用户组中，有又基本组和附加组，一个用户只有一个基本组，但是可以从属于多个附加组，这一节，我们来学习如何创建一个用户和如何更改该用户的分组；</p><h4 id="1、创建用户："><a href="#1、创建用户：" class="headerlink" title="1、创建用户："></a>1、创建用户：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m wlw（用户名）</span><br><span class="line">sudo adduser wlw</span><br></pre></td></tr></table></figure><p>我们需要超级管理员权限才可以创建一个用户，这里我们就使用sudo，当我们执行命令后其实就创建了一个名字叫wlw的用户，但是这个时候并不会在Linux上生成这个账号，因为我们还没有设置密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd wlw</span><br></pre></td></tr></table></figure><p>这是给账户设置密码，同样修改密码也是这个指令，当我们回车之后就会提示我们输入新密码然后再重复一次；设置好密码之后就可以看到有一个新用户在Linux上了：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402861.png" alt="image-20221017185833355" style="zoom:50%;" /><p>注意我们在创建用户的时候加上的参数-m ，他的作用就是生成账户对应的文件夹，我们每一个用户都应该有一个自己的文件夹，如果不加这个参数就不会自动创建了；</p><h4 id="2、给用户分组"><a href="#2、给用户分组" class="headerlink" title="2、给用户分组"></a>2、给用户分组</h4><p>我们可以使用下面的命令来查看用户的分组情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure><p>这个命令可以打印所有用户的分组信息，这里我们刚刚创建的用户信息就是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402760.png" alt="image-20221017190840570"></p><p>wlw:X:1001</p><p>这个告诉我们什么信息呢？第一个是组名，第二个是密码位，第三个是组id；所以说明我们创建用户的时候会创建一个为用户名的用户组，而且这个组为基本组，是不可以删除的，我们还可以将刚刚创建的用户分到附加组，比如这里的tony组，我们切换到超级用户更好操作（su）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">usermod -a -G sy（用户组） wlw（用户名）</span><br></pre></td></tr></table></figure><p>使用这个命令我们可以将创建的wlw用户分到sy组中;使用下面到的命令可以实现查看用户组下面所有的用户：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402221.png" alt="image-20221018090444824"></p><h4 id="3、创建一个用户组"><a href="#3、创建一个用户组" class="headerlink" title="3、创建一个用户组"></a>3、创建一个用户组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 550（id） sy（组名）</span><br></pre></td></tr></table></figure><p>使用这个命令可以创建一个用户组，而且他的id为550；</p><h4 id="4、权限的修改"><a href="#4、权限的修改" class="headerlink" title="4、权限的修改"></a>4、权限的修改</h4><p>我们之前就说过，关于文件的权限也是跟组有关的，文件的权限有三组：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402931.png" alt="image-20221017205530673"></p><p>他们其实是一串8进制数，也就是每三个没一组，rwx分别对应的数值是421，所以以后我们遇到对应的权限的数字需要知道这个文件拥有的是那些权限，可读对应的是4 ，可写是2，可执行为1；</p><p>那我们来修改一下文件所属的组：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402447.png" alt="image-20221017205844914"></p><p>来修改这个文件为例，分清楚这三组分别对应哪三组权限：<strong>第一组表示的用户的权限，第二组代表的是用户组的权限，第三组是所有用户的权限；</strong>这个之前我们就讲过；</p><p>这个文件所属的组有两个，一个是tony，一个是sy，我们可以将tony改成wlw组:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R wlw hello*</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402385.png" alt="image-20221017210337478"></p><p>如果想要看如何修改权限，可以直达：</p><h4 id="5、删除用户和用户组"><a href="#5、删除用户和用户组" class="headerlink" title="5、删除用户和用户组"></a>5、删除用户和用户组</h4><p>我们有时候创建错了用户或者用户组可以使用下面的命令进行删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -fr wlw（用户名）</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402653.png" alt="image-20221017211027140" style="zoom:50%;" /><p>-f表示强制删除，-r表示删除用户所创建的文件，也就是我们之前创建用户时自动创建的文件夹；</p><p>使用下面的命令来删除用户组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel wlw（用户组名）</span><br></pre></td></tr></table></figure><h3 id="8、shell基础入门"><a href="#8、shell基础入门" class="headerlink" title="8、shell基础入门"></a>8、shell基础入门</h3><h4 id="1、重定向、管道、连接符和文本分析器（awk）"><a href="#1、重定向、管道、连接符和文本分析器（awk）" class="headerlink" title="1、重定向、管道、连接符和文本分析器（awk）"></a>1、重定向、管道、连接符和文本分析器（awk）</h4><p>那么现在我们开始讲一些比较高级的linux命令了，首先是重定向，什么是重定向？</p><p>重定向就是将文件的输入输出重新定义到一个新的位置，<strong>重定向又有三种：输出重定向（&gt;或者&gt;&gt;）、输入重定向（&lt;）、错误重定向（2&gt;或者2&gt;&gt;）。</strong></p><p><strong>这里的&gt;&gt; 和 &lt;&lt; 表示的是追加数据，&lt; 和&gt; 表示的是全部替换，</strong>想要了解重定向，我们现需要了解linux的三种输入输入：</p><p><strong>标准输入：</strong>输入文件的标号是0，也就是0代表着标准输入，默认的是键盘，在命令执行的时候读取输入文件的数据；</p><p><strong>标准输出</strong>：标号为1，默认设备是显示器，命令执行之后将其输入结果发送到标准的输出文件；</p><p><strong>标准错误：</strong>标号为2，默认设备也是显示器，命令执行之后将错误信息发送到标准错误文件；</p><p>所以这就是为什么错误重定向就是在输入重定向前面加上一个2的原因；</p><h5 id="1、输出重定向："><a href="#1、输出重定向：" class="headerlink" title="1、输出重定向："></a>1、输出重定向：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &gt;&gt; 文件名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402946.png" alt="image-20221019164109590"></p><p>这个命令就是将ls执行之后的结果输出到standard.c文件里面，可以很明显的看到我们当前文件夹下面的文件和文件夹结果就展示在standard.c文件内容中；同样，举一反三，我们如果是ll命令也好，其他具有输出功能的命令也好，都是将结果输出到后面的文件中；</p><h5 id="2、输入重定向"><a href="#2、输入重定向" class="headerlink" title="2、输入重定向"></a>2、输入重定向</h5><p>输入重定向就是反过来，我们就可以将某一个文件的内容当成命令的输入，比如一些需要输入的指令，grep,cat：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep pro &lt; 文件名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402386.png" alt="image-20221019164854856"></p><p>这里就是将standard文件中带有pro字符的内容抓取出来；</p><h5 id="3、错误重定向"><a href="#3、错误重定向" class="headerlink" title="3、错误重定向"></a>3、错误重定向</h5><p>这个其实就是抓取错误用的，用法和输出重定向类似，我们首先得有一个错误程序，比如下面的错误代码：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019165128992.png" alt="image-20221019165128992"></p><p>我在lesson01.c文件中写了这样的代码，其实后面没有分号，然后编译时就会报错，我们可以将错误信息输出到standard.c文件中，是使用&gt;&gt;追加输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c 要编译的文件 2&gt; 输出的文件</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402040.png" alt="image-20221019165415486"></p><p>这里可以看到standard.c文件中就多出了编译lesson01.c文件时报的错误信息；</p><h5 id="4、管道"><a href="#4、管道" class="headerlink" title="4、管道"></a>4、管道</h5><p>管道使用符号是|，他的作用就是将一个命令的输出作为另一个命令的输入内容，比如我们grep命令和cat命令结合使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件 | grep 关键字</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402096.png" alt="image-20221019165801702"></p><p>这里实现的就是将cat出来的内容作为grep的抓取对象，可以很明显的看到这里输入了一条带有init的记录，其实就是&#x2F;etc&#x2F;passwd中的一条记录；</p><h5 id="5、连接符"><a href="#5、连接符" class="headerlink" title="5、连接符"></a>5、连接符</h5><p>连接符有三种：；（分号），&amp;&amp;（逻辑与），||（逻辑或）</p><p>分号；：</p><p>因为有时候我们想要执行的命令很多，如果我们一条一条执行的话太过繁琐，不如我们一次性写一堆让它自己慢慢执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令1;命令2;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402564.png" alt="image-20221019170147491"></p><p>这个可以接很多命令，但是都是顺序执行的，也就是不管失败与否都会执行一遍；</p><p>逻辑与&amp;&amp;：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令1&amp;&amp;命令2</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402384.png" alt="image-20221019170327966"></p><p>这个语句是有判断能力的，只有前面一条语句执行成功之后才会执行后面的，可以看到我们执行ll成功之后还会执行ls，但是执行s失败之后就不会再执行ls了；</p><p>逻辑或||：</p><p>这个其实就是和逻辑与反过来的，就是之后前面一个失败后面一个才会执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令1 || 命令2</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019170652119.png" alt="image-20221019170652119"></p><p>可以看到当第一条指令执行完成之后并没有执行第二条指令；</p><h5 id="6、文本分析器awk"><a href="#6、文本分析器awk" class="headerlink" title="6、文本分析器awk"></a>6、文本分析器awk</h5><p>这个指令和grep类似，都是用来抓取我们想要的数据的，不过这个指令的选项多一些，功能更好、更强大一点，我们来看他的规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F 分隔符 &#x27;条件&#123;printf 列和格式&#125;&#x27; 文件</span><br></pre></td></tr></table></figure><p>这里的意思就是我们在一个文件中，他的内容是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402647.png" alt="image-20221019171248677"></p><p>分隔符的意思就好比我们取文件的界限，比如这里我们可以去空格，如果小明和数学之间是；的话，我们就可以取分号，如果不设置，也就是缺省的话默认就是空格，这样就将第一行的数据分成了三列，也就是小明 、数学和89三列，分别使用$1,$2,$3表示，后面还有数据的话依次类推，条件的话我们可以设置（ $2&#x3D;&#x3D;”数学”），这样的，意思就是筛选出第二列是数学的记录，格式就是我们想要添加的字符样式之类的：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402205.png" alt="image-20221019171913552"></p><p>可以看到这里就输出了我们想要的内容；</p><h4 id="2、第一个shell程序"><a href="#2、第一个shell程序" class="headerlink" title="2、第一个shell程序"></a>2、第一个shell程序</h4><p>shell脚本是linux中常用到的纯文本文件，可以用它来执行一些我们想要执行的shell程序，我们在学习之前先来入个门；</p><p>创建一个hello.sh文件，在里面输入：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402808.png" alt="image-20221019172333001"></p><p>这里的#就是注释的意思，echo就是答应的意思，date是打印时间，写好文件保存然后可以使用三种方式来执行它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh 文件名</span><br><span class="line">bash 文件名</span><br><span class="line">./文件名 （前提是需要使用chmod更改文件为可执行文件）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402297.png" alt="image-20221019172530895"></p><p>一般来说bash要比sh更加常用，因为改变权限太麻烦，而且执行文件的方式又多，这里我就不一一介绍了，感兴趣的小伙伴可以自行尝试；</p><h3 id="9、更换输入法"><a href="#9、更换输入法" class="headerlink" title="9、更换输入法"></a>9、更换输入法</h3><p>用户linux的很多小伙伴就知道，linux上的输入法是英文的，而且我们还不知道如何设置成中文，确实也是这样的，因为linux不像win10，直接上网下一个就好了，而且切换输入法的方式也和win10不一样，那么我就来教教大家linux上如何切换输入法为汉语拼音：</p><p>1、更改输入法系统</p><p>系统默认带了输入法系统，但是这种输入法系统并不支持中文输入，所以我们需要下载一个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fcitx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402727.png" alt="image-20221022221625656"></p><p>这个才是linux常用的输入法系统，也是有很多人喜欢使用它；</p><h3 id="10、shell编程基础入门"><a href="#10、shell编程基础入门" class="headerlink" title="10、shell编程基础入门"></a>10、shell编程基础入门</h3><h4 id="1、变量定义"><a href="#1、变量定义" class="headerlink" title="1、变量定义"></a>1、变量定义</h4><p>linux比较喜欢使用脚本语言，也就是shell，具有变量的无特定类型的特点，我们可以不写数据类型就可以进行定义和赋值，他的语句具有镜像的特点，比如if需要以fi结尾，case 要以esac结尾；那我们来走进shell的世界探索一番脚本语言的语法：</p><p>shell定义变量也是和C语言一样需要遵循规则的，比如一些不可以用作变量名的字符：标点符号、纯数字、关键字；</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171402498.png" alt="image-20221024184155198"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名=值</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">变量名</span></span><br></pre></td></tr></table></figure><p>C语言里面如果我们想要引用变量的时候直接写变量名叫就可以了，但是在shell中我们必须要加上$才行；注意空格的问题，在shell中很多时候会出现空格，一定要记住不可以随便删除空格；这里变量赋值的时候千万不要多添加空格，不然的话会报错：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403470.png" alt="image-20221024184612671"></p><p>C语言中有全局变量的定义，shell里面叫做环境变量，有三种定义形式，分别作用于当前线程，当前用户和多用户都可以使用的变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export name=变量值</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在~/.bashrc 的最后一行加上上面的语句</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在 /etc/profile 的最后一行加上上面的语句</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403629.png" alt="image-20221024185218357"></p><p>我们可以使用vi编辑器打开对应的文档然后加上这一句就可以了，两个文档都是一样的操作；</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403657.png" alt="image-20221024185338599"></p><p>如果我们想要给变量清空赋值的话也比较简单，直接运行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset 变量名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403364.png" alt="image-20221024185945369"></p><p>可以看到我们定义了一个变量叫做a，赋值为1，然后执行了一下unset之后就清空了；</p><p><strong>数组的定义：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list=(1,2,3,4)</span><br><span class="line"></span><br><span class="line">echo $&#123;list[1]&#125;</span><br></pre></td></tr></table></figure><p>第一个就是数组的定义了，后面一个其实就是数组的引用，这里强调一下必须要加的大括号，因为$在不加大括号的情况下只会引用list，而忽略掉[1];<strong>注意这里数组元素之间使用逗号隔开；</strong></p><p>我们还可以使用一些shell中的特殊含义的字符，他们也是shell命令：#（个数）、@（所有数量）、$$（当前线程id）</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403166.png" alt="image-20221024192452331"></p><p>这里的意思就是打印array所有元素的数量；除了用在数组中，这里的特殊字符还可以使用在位置参数中，也就是我们执行一个脚本文件的时候在后面添加的参数列表：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403139.png" alt="image-20221025104527790"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash 脚本文件 参数列表</span><br></pre></td></tr></table></figure><p>注意我们填写参数列表的时候是使用空格隔开的不是逗号，和数组一样的，然后我们可以是文件里面可以使用$+数字的方式，来引用位置参数，要注意的是我们无法改变这个未知参数的数值；然后就可以使用@表示所有的参数，#表示参数个数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">echo &quot;my name is : sy&quot;</span><br><span class="line">echo &quot;the first subject is : $1&quot;</span><br><span class="line">echo &quot;the seccond subject is : $2&quot;</span><br><span class="line">echo &quot;the third subject is : $3&quot;</span><br><span class="line">echo &quot;the forth subject is : $4&quot;</span><br><span class="line">echo &quot;the all subject subject is : $@ &quot; </span><br><span class="line">echo &quot;the number of subject is : $#&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;input your performance of Math,Chinese,English,Linux: &quot;</span><br><span class="line">read -p &quot;your Math performance is : &quot; Math</span><br><span class="line">read -p &quot;your Chinese performance is : &quot; Chinese</span><br><span class="line">read -p &quot;your English performance is : &quot; English</span><br><span class="line">read -p &quot;your Linux performance is : &quot; Linux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shift</span><br><span class="line">echo &quot;the all subject subject is : $@ $Math $Chinese $English $Linux &quot;                                                                           </span><br></pre></td></tr></table></figure><p><strong>这里有一个shift命令，作用就是将所有的位置参数往左移除一个，注意，移出去了就是用不了了；</strong></p><h4 id="2、计算式"><a href="#2、计算式" class="headerlink" title="2、计算式"></a>2、计算式</h4><p>既然是学习编程肯定是需要学习如何使用shell语言进行计算：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">(($</span><span class="language-bash">变量1+$变量2))</span></span><br><span class="line">let c=$变量1+$变量</span><br><span class="line">expr c=$变量1+$变量</span><br></pre></td></tr></table></figure><p>这是常见的三种进行计算的方式，可以看得出来，shell里面的计算可不是那么好做；反正变量的引用就需要使用$，计算时还需要加上let 或者是expr，这三种方式其实是等价的，效果一样；我就不过多演示了：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403840.png" alt="image-20221024190419282"></p><p>如果是要计算小数我们得需要另写式子：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403355.png" alt="image-20221024192657979"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;scale=保留多少位小数; 小数1*小数2&quot;|bc</span><br><span class="line">printf %.保留小数位数f `echo 小数1*小数2|bc`</span><br><span class="line">result=$(echo &quot;scale=保留多少位小数; 小数1*小数2&quot;|bc)</span><br></pre></td></tr></table></figure><p>当然这里也可以引用变量小数，只不过不要忘记加上$；第二种其实就是C语言的形式，那种数据的格式化输出；如果我们是要计算出来结果然后赋值给某一个变量的话就需要使用$()或者$[]的方式，在括号里面输入计算的表达式</p><h4 id="3、判断语句"><a href="#3、判断语句" class="headerlink" title="3、判断语句"></a>3、判断语句</h4><p>现在我们来看看shell中的if判断语句和一些判断条件如何使用：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403892.png" alt="image-20221024193751930"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ $a -lt $b ];then</span><br><span class="line">        echo &quot; a &lt; b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>注意这[]里面存放的是判断语句，而且空格不能错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-gt 大于号</span><br><span class="line">-ge 大于等于号</span><br><span class="line">-lt 小于号</span><br><span class="line">-le 小于等于号</span><br><span class="line">-eq 返回值比较，相同就真</span><br><span class="line">-nq 不同就真</span><br><span class="line"></span><br><span class="line">str1=str2 字符串比较</span><br><span class="line">str1!=str2 字符串反比</span><br><span class="line">-n str    不为空就真</span><br><span class="line">-z str  为空就真</span><br></pre></td></tr></table></figure><p>这里常用的比较命令，需要记一下；</p><p>转义运算符 \ :<br>有时候我们想要输出一些含有特殊含义的命令符号，比如$ , @ 等，不可以直接打印，所以就使用转移运算符就可以了：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403044.png" alt="image-20221024194422908"></p><p>我们还可以使用多分支的判断语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;请输入文件或者文件夹名称：&quot; file</span><br><span class="line">if [ -d $file ];then</span><br><span class="line">        echo -n &quot;$file是一个文件夹&quot;</span><br><span class="line">elif [ -x $file ];then</span><br><span class="line">        echo -n &quot;$file是一个可执行文件&quot;</span><br><span class="line">else</span><br><span class="line">        echo -n &quot;$file是一个普通文件&quot;</span><br><span class="line">fi</span><br><span class="line">echo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们使用了文件的基本几个判断，-d后面加上文件名是判断是否是一个文件夹，-x是判断可执行文件；注意一个规律，在判断语句的后面一般需要接上then，不要忘记这里的分号，在有循环的语句后面习惯使用do-done来代替C语言里面的大括号；</p><h4 id="4、read接受用户输入"><a href="#4、read接受用户输入" class="headerlink" title="4、read接受用户输入"></a>4、read接受用户输入</h4><p>和C语言的scanf的功能一样，等待用户的输入：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403932.png" alt="image-20221024200423434"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;文字描述&quot; 参数列表</span><br></pre></td></tr></table></figure><p>按照这样的格式来写，要求我们输入的时候就是按照参数列表的个数和顺序来输入数据就行了，这里提醒一个，就是echo后面的-n的作用就是清除换行；</p><h4 id="5、selecte、case、for、while、until语句的基本使用"><a href="#5、selecte、case、for、while、until语句的基本使用" class="headerlink" title="5、selecte、case、for、while、until语句的基本使用"></a>5、selecte、case、for、while、until语句的基本使用</h4><p>shell中也是有很多有趣的语句，比如开关和循环语句，与C语言不一样的事shell习惯使用do和done来代替大括号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;What do you want to study?&quot;</span><br><span class="line">select subject in &quot;Adnroid&quot; &quot;Java&quot; &quot;C++&quot; &quot;IOS&quot;</span><br><span class="line">do</span><br><span class="line">echo &quot;You have selected $subject&quot;</span><br><span class="line">break</span><br><span class="line">done</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>select其实也是一个循环，只要我们不选择选项中的项就会一直要你选择，这里我们设置了四个选项，它的执行效果比较特殊：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403423.png" alt="image-20221026131118863"></p><p>他会把in后面的参数列表全部列出来，然后要求你去选择，选择之后打印一句话；</p><p>case语句其实就是开关语句，也是一种循环的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;a:&quot;</span><br><span class="line">read a</span><br><span class="line">echo -n &quot;b:&quot;</span><br><span class="line">read b</span><br><span class="line">echo -n &quot;select(+ - * /):&quot;</span><br><span class="line">read var</span><br><span class="line">case $var in</span><br><span class="line">        &quot;+&quot;)echo &quot;a+b=$[ $a+$b ]&quot;;;</span><br><span class="line">        &quot;-&quot;)echo &quot;a-b=$[ $a-$b ]&quot;;;</span><br><span class="line">        &quot;*&quot;)echo &quot;a*b=$[ $a*$b ]&quot;;;</span><br><span class="line">        &quot;/&quot;)echo &quot;a/b=$[ $a/$b ]&quot;;;</span><br><span class="line">        *)echo &quot;error&quot;;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>看起来case比较特殊，因为它不需要使用do，而是用的镜像结束符；就是in前面使用一个变量，然后in后面接上我们可能会选择的所有情况，以””)开头双分号结尾（;;）;这个变量就是我们会输入的变量；</p><p>for语句大致的使用还是和C语言差不多的，只是我们将大括号换成了do：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(&quot;Math&quot;,&quot;Chinese&quot;,&quot;Englihs&quot;,&quot;Linux&quot;)</span><br><span class="line">for item in $array</span><br><span class="line">do</span><br><span class="line">        echo $item</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>一般我们在shell需要使用in来遍历，设置一个遍历的变量，然后在do里面写打印语句或者是处理数据的代码，记得以done结尾；</p><p>while语句就需要一个条件来判断什么时候退出循环了，同样要使用到do：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">count=0</span><br><span class="line">read -p &quot;请输入最大值：&quot; number</span><br><span class="line">while [ $count -le $number ]</span><br><span class="line">do</span><br><span class="line">echo $count</span><br><span class="line">((count=count+1))</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样是在while的后面是用了一个方括号来进行判定，如果是判断语句出现问题的话就可能死循环了；然后使用do来表示循环的开始就可以了；</p><p>until其实就是while的对立面，它只有在括号里面是假的时候才会执行do里面的语句:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count=0</span><br><span class="line">read -p &quot;请输入最大值：&quot; number</span><br><span class="line">until [ $count -ge $number ]</span><br><span class="line">do</span><br><span class="line">echo $count</span><br><span class="line">((count=count+1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>这样写就是当我们的count小于number的时候执行do里面的语句，大于number的时候就不会执行；</p><h4 id="6、调试脚本"><a href="#6、调试脚本" class="headerlink" title="6、调试脚本"></a>6、调试脚本</h4><p>C语言程序可以使用gdb来调试，当然shell也是不例外的，但是shell的调试要简单很多，他就只有三个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -n 脚本文件 #意思就是我们程序如果有错误就不会执行，只会打印错误信息，当然没错的话就执行</span><br><span class="line">bash -v  脚本文件 #意思就是打印程序执行过了得代码</span><br><span class="line">bash -x 脚本文件 #意思就是将执行的过程打印到窗口上，-v就好像打印源码，但是这个会答应每一个变量变化的过程</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403305.png" alt="image-20221026143323854" style="zoom:50%;" /><p>非常详细；</p><h4 id="7、变量的定义和调用"><a href="#7、变量的定义和调用" class="headerlink" title="7、变量的定义和调用"></a>7、变量的定义和调用</h4><p>shell的变量定义和调用都比较简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编写函数</span></span><br><span class="line">function fun()&#123;</span><br><span class="line">local a=10</span><br><span class="line">b=11</span><br><span class="line">echo &quot;本地变量：&quot;$a</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">调用函数</span></span><br><span class="line">fun</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意这里的变量，我么a加了一个local修饰就表示有了作用域只可以在函数里面使用；</p><h3 id="11、文件操作"><a href="#11、文件操作" class="headerlink" title="11、文件操作"></a>11、文件操作</h3><p>linux中的文件操作是使用的几个系统函数来实现的，使用的是C语言，关键作用的是文件描述符，可以说操作<strong>文件描述符</strong>就是操作文件，之前我们了解过三个文件的标号，因为文件描述符也是一个类似的索引值，就是说已经有了0,1,2了，所以我们打开文件之后返回的文件描述符只能从3开始；</p><p>1、阅读手册，了解i&#x2F;o函数</p><p>在我们学习函数的使用前，最好就是阅读手册，先从头文件，然后就是函数的参数，返回值，描述。</p><p>输入下面的命令查看第一个i&#x2F;o函数，open</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 2 open</span><br></pre></td></tr></table></figure><p>Linux的man很强大，该手册分成很多section，使用man时可以指定不同的section来浏览，各个section意义如下：<br>1 - commands<br>2 - system calls<br>3 - library calls<br>4 - special files<br>5 - file formats and convertions<br>6 - games for linux<br>7 - macro packages and conventions<br>8 - system management commands<br>9 - 其他<br>解释一下,<br>1是普通的命令<br>2是系统调用,如open,write之类的(通过这个，至少可以很方便的查到调用这个函数，需要加什么头文件)<br>3是库函数,如printf,fread<br>4是特殊文件,也就是&#x2F;dev下的各种设备文件<br>5是指文件的格式,比如passwd, 就会说明这个文件中各个字段的含义<br>6是给游戏留的,由各个游戏自己定义<br>7是附件还有一些变量,比如向environ这种全局变量在这里就有说明<br>8是系统管理用的命令,这些命令只能由root使用,如ifconfig</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403564.png" alt="image-20221031184349852" style="zoom:50%;" /><p>然后可以看到这样的页面，其实就是进入了手册了，先展示出来的是头文件和下面的一些函数，我们要是用他们的话这下头文件是需要导入的，这里我们可以看到第一个函数open,他需要传一个pathname，也就是文件的路径，我们可以使用一个字符数组来传递，如果是当前路径的话我们直接写文件名就行了，第二个参数就是我们要对文件进行什么操作类了，在文档后面的话都有说明，就是有一点，英文的不好阅读，都是简单词汇，有点基础的应该没有问题，这里我们一般像这样写就行了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> fb1,fb2=<span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> filename1[]=<span class="string">&quot;readtext.txt&quot;</span>;</span><br><span class="line">        <span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        fb1=open(filename1,O_RDWR|O_CREAT,<span class="number">0644</span>);</span><br><span class="line">        <span class="keyword">if</span>(fb1==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;read open error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> filename2[]=<span class="string">&quot;writetxt.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(fb2==<span class="number">-1</span>)&#123;</span><br><span class="line">                perror(<span class="string">&quot;write open error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fb2=open(filename2,O_RDWR|O_CREAT,<span class="number">0644</span>);</span><br><span class="line">        <span class="keyword">while</span>((length=read(fb1,buf,<span class="keyword">sizeof</span>(buf)))&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                write(fb2,buf,length);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        close(fb1);</span><br><span class="line">        close(fb2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是完成一个文件复制的代码，我们来分析一下里面函数的使用，如果想要详细了解的话可以按照我们的那个指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man 2 read </span><br><span class="line"></span><br><span class="line">man 2 write</span><br></pre></td></tr></table></figure><p>自行查看；</p><h4 id="1、open函数"><a href="#1、open函数" class="headerlink" title="1、open函数"></a>1、open函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int fb1=0;</span><br><span class="line">fb1=open(filename1,O_RDWR|O_CREAT,0644);</span><br></pre></td></tr></table></figure><p>这里的返回值就是一个文件描述符，是open函数的返回值，所以后面我们使用read&#x2F;write操作i&#x2F;o的时候都是操作这个文件描述符；</p><p>参数1是文件名，参数2是我们想要对文件的操作，这里使用的是O_RDWR（以读写方式打开）|O_CREAT（创建文件，存在文件会出错），<strong>这两者结合起来就是有文件是就以读写打开，没有文件是就创建</strong>，参数3是我们的文件权限，之前我们就说过类似的，其实文件的权限就是一个8进制的数，一个数分别对应421，可读可写可执行；一般我们会使用0644,644是对应的用户用户组和所有用户的权限；</p><h4 id="2、read函数"><a href="#2、read函数" class="headerlink" title="2、read函数"></a>2、read函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char buf[1024]=&#123;0&#125;;</span><br><span class="line">length=read(fb1,buf,sizeof(buf)</span><br></pre></td></tr></table></figure><p>文件的读写是这样的流程：读取文件时先将数据存放在缓存中，也即是这里的buf，然后读取文件的时候再从buf中读取数据，写入到目标文件中；第一个是文件描述符，也就是open的返回值，对应的就是那个文件，第二个就是缓存区，对应的就是字符数组，第三个就是长度，我们读取的话一般读取缓存区长度就行；</p><h4 id="3、write函数"><a href="#3、write函数" class="headerlink" title="3、write函数"></a>3、write函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fb2=open(filename2,O_RDWR|O_CREAT,0644);</span><br><span class="line">write(fb2,buf,length);</span><br></pre></td></tr></table></figure><p>写入文件，我们是从缓存区写入数据的，所以我们可以拿到我们存放了数据的数组buf，第一个参数同样是文件描述符，只不过是打开写入的目标文件，第二个是缓存区，第三个是长度，这里我们要以真实读取的的长度为准，所以我们拿了read的返回值，就是真实长度；</p><p>最后不要忘了关闭文件流：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">close(fb1);</span><br><span class="line">close(fb2);</span><br></pre></td></tr></table></figure><p>这个程序的逻辑也很好理解，就是我们打开要写和要读的文件，然后利用while循环读取数据然后写入到目标文件就可以了，这里就是注意一个长度的使用；</p><h4 id="4、lseek函数"><a href="#4、lseek函数" class="headerlink" title="4、lseek函数"></a>4、lseek函数</h4><p>这个函数跟我们的鼠标光标息息相关，他可以设置光标的起始位置，那就意味着这个函数可以决定文件复制的起始位置和写入的起始位置，同样的你可以使用man 2 lseek来查看这个函数的具体信息，这里我们就不详细说明了，我们就直接将几个重要的点提一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//设置复制起始点</span></span><br><span class="line"><span class="type">int</span> indexr=lseek(fb1,<span class="number">5</span>,SEEK_SET);</span><br><span class="line"><span class="type">int</span> indexw=lseek(fb2,<span class="number">4</span>,SEEK_SET);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个函数的第一个参数是文件描述符，也就是前面讲到的open的返回值，代表我们要移动光标的文件，第二个参数是移动的长度，如果是负数就是往前，正数就是往后，第三个就是光标的初始位置，<strong>有三个选项：SEEK_SET,SEEK_END,SEEK_CUR,其实看因为就可以知道大致的含义，第一个就是给光标设置位置，第二个就是从文件末尾开始移动，也就是光标会到文件末尾，第三个就是从光标当前位置移动；</strong>返回值就是光标前面的字节数，所以我们就可以使用lseek来算出文件的大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> content=lseek(fb2,<span class="number">0</span>,SEEK_END);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403443.png" alt="image-20221102180115928"></p><p>可以看到这里打印的数字就是这个写入文件的大小，这个函数也是在unistd.h头文件里面的，所以使用的时候要注意自己有没有包含它；</p><p>lseek还有一个功能就是可以更改文件的大小，通过插入一些“ ”，和移动光标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lseek(fb2,100,SEEK_CUR);</span><br><span class="line">write(fb2,&quot; &quot;,1);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403527.png" alt="image-20221102230348019"></p><p>通过这个函数移动光标，从当前位置向后面移动100个单位，然后在插入空格，之前这个文件的大小事2365，如果我们执行程序将会变成2465：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403821.png" alt="image-20221102230648188"></p><p>可以看到这里明显是夸大了大约100个单位，可能存在一些误差，但是无伤大雅；</p><h4 id="5、stat函数"><a href="#5、stat函数" class="headerlink" title="5、stat函数"></a>5、stat函数</h4><p>这个函数可以获取文件的属性，它在sys&#x2F;stat.h的文件中，我们可以使用它来获取文件属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sbuf</span>;</span> </span><br><span class="line">result=stat(<span class="string">&quot;readtext.txt&quot;</span>,&amp;sbuf);</span><br></pre></td></tr></table></figure><p>这个函数具有两个参数，第一个是文件的名字，第二个参数要传一个结构体，当然这个结构体使我们自己定义的，但是函数执行成功之后它就会具有一下属性，如果执行失败的话就会返回-1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">struct stat &#123;</span><br><span class="line">              dev_t     st_dev;         /* ID of device containing file */</span><br><span class="line">              ino_t     st_ino;         /* Inode number */</span><br><span class="line">              mode_t    st_mode;        /* File type and mode */</span><br><span class="line">              nlink_t   st_nlink;       /* Number of hard links */</span><br><span class="line">              uid_t     st_uid;         /* User ID of owner */</span><br><span class="line">              gid_t     st_gid;         /* Group ID of owner */</span><br><span class="line">              dev_t     st_rdev;        /* Device ID (if special file) */</span><br><span class="line">              off_t     st_size;        /* Total size, in bytes */</span><br><span class="line">              blksize_t st_blksize;     /* Block size for filesystem I/O */</span><br><span class="line">              blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */</span><br><span class="line"></span><br><span class="line">              /* Since Linux 2.6, the kernel supports nanosecond</span><br><span class="line">                 precision for the following timestamp fields.</span><br><span class="line">                 For the details before Linux 2.6, see NOTES. */</span><br><span class="line"></span><br><span class="line">              struct timespec st_atim;  /* Time of last access */</span><br><span class="line">              struct timespec st_mtim;  /* Time of last modification */</span><br><span class="line">              struct timespec st_ctim;  /* Time of last status change */</span><br><span class="line"></span><br><span class="line">          #define st_atime st_atim.tv_sec      /* Backward compatibility */</span><br><span class="line">          #define st_mtime st_mtim.tv_sec</span><br><span class="line">          #define st_ctime st_ctim.tv_sec</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以我们可以写一个程序来看看文件的属性是否正确获取到了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> fd1,result=<span class="number">0</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sbuf</span>;</span></span><br><span class="line"></span><br><span class="line">        result=stat(<span class="string">&quot;readtext.txt&quot;</span>,&amp;sbuf);</span><br><span class="line">        <span class="keyword">if</span>(result==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;stat error&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;len=%1d\n&quot;</span>,sbuf.st_size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403204.png" alt="image-20221102181609149"></p><p>执行程序之后的的确确是获取到了属性的值，而且也是正确的，这里我们获取的是readtext.txt文件的长度；</p><h4 id="6、access函数"><a href="#6、access函数" class="headerlink" title="6、access函数"></a>6、access函数</h4><p>这个函数用来测试文件是否拥有某种权限，这个函数也是在unisted.h文件里面的，也具有两个参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result=access(<span class="string">&quot;readtext.txt&quot;</span>,R_OK);</span><br><span class="line"><span class="keyword">if</span>(result!=<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件是可以阅读的\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件是不可以阅读的\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个参数是文件的路径名，第二个是权限，这里又三个可选项：R_OK, W_OK, F_OK, 他们分别代表的是文件的可读、可写、可执行，这里我们判断了一下可执行权限，执行之后是没有问题的：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403034.png" alt="image-20221102182536747"></p><h4 id="7、chmod函数"><a href="#7、chmod函数" class="headerlink" title="7、chmod函数"></a>7、chmod函数</h4><p>这个函数用于修改文件的访问权限，该函数也是在sys&#x2F;stat.h文件中，他也是具有两个参数，第一个参数是文件路径名，第二个是要修改的权限，这里我们传的是一个8进制数，之前我们说过文件的权限就是一个8进制数：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171403051.png" alt="image-20221102225325415"></p><p>可以看到我们这里readtext文件的权限是rw-r-r，我们试着将他们改成rwx-rwx-rwx：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">result=chmod(<span class="string">&quot;readtext.txt&quot;</span>,<span class="number">0777</span>);</span><br><span class="line"><span class="keyword">if</span>(result==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;this is a error\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sccessud\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在chmod的第一个参数上写上我们的文件名，然后第二个参数是我们想要改成的权限，这里的7就是对应的rwx，同样他也是有一个返回值得，如果调用函数失败的话就会返回一个-1：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404356.png" alt="image-20221102225650178"></p><p>编译运行可以看到我们程序运行成功，再看看权限：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404232.png" alt="image-20221102225723795"></p><p>很明显，这里我们的权限也是的的确确修改成功了；</p><h4 id="8、truncate函数"><a href="#8、truncate函数" class="headerlink" title="8、truncate函数"></a>8、truncate函数</h4><p>truncate是用来修改文件的大小的，lseek也可以修改大小，但是这个只需要调用一下就可以了，而lseek还需要写入“ ”，移动光标的操作，但是他们起到的效果是差不多的，这个函数也是具有两个参数的，第一个是文件的路径名，第二个是长度，也就是我们想要给文件设置的长度，他也是具有返回值得，如果调用失败就会返回-1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line"> result=truncate(<span class="string">&quot;readtext.txt&quot;</span>,<span class="number">3000</span>);</span><br><span class="line"> <span class="keyword">if</span>(result==<span class="number">-1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sucessd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们这是将readtext这个文件的大小设置成3000，原来的大小是2357：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404912.png" alt="image-20221102231110661"></p><p>我们执行程序再来看：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404373.png" alt="image-20221102231204385"></p><p>可以看到这个文件已经是修改成了3000了；</p><h3 id="12、进程管理"><a href="#12、进程管理" class="headerlink" title="12、进程管理"></a>12、进程管理</h3><p>在window系统上也是有一个进程管理的，也就是任务管理器，在程序中我们可以看到正在运行的进程的详细信息，并且可以筛选排序删除的操作，那么在linux上也是有这样一个程序的，进程实际上就是在运行的程序，程序没有运行的时候其实是在硬盘中的，运行的时候就是在内存；</p><h4 id="1、查看进程"><a href="#1、查看进程" class="headerlink" title="1、查看进程"></a>1、查看进程</h4><p>我们可以输入ps来查看当前的部分进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">ps a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404998.png" alt="image-20221109225430561"></p><p>这里的a参数是罗列所有的进程的意思，这样显示出来的线程是静态的，但是罗列我们输入命令时的进程，但是进程其实是动态进行的，所以我们如果有需要动态的查看进程的话，可以使用top：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top </span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404138.png" alt="image-20221109225600396" style="zoom:50%;" /><p>这里top的话是直接打印了所有的进程信息，而且还是在不断变化的，可以看到很多的列，有进程号（也就是PID，相当于文件的描述符），还有user（用户，一般用来筛选），cup的使用，时间和名称等的信息，我们通过看数据也是很容易分析出来的，我们要注意一个地方就是S（进程的状态）:</p><p>D&#x3D;不可中断的睡眠状态<br>R&#x3D;运行<br>S&#x3D;睡眠<br>T&#x3D;跟踪&#x2F;停止<br>Z&#x3D;僵尸进程</p><p>这里可以看到狠毒都是s和T, 一般做服务器维护的话就要注意清理这个僵尸进程；</p><p>在我们输入top命令的时候其实还有很多可选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top M(按照内存排序)/P(CPU使用排序)/T(时间排序)/K(可以根据pid杀死线程)</span><br></pre></td></tr></table></figure><p>如果我们打开了这个程序，就只需要输入这些可选项就可以了，程序会按照输入的内容来做出相应的操作；点击了k他就会显示一串文字：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404239.png" alt="image-20221109230540082"></p><p>意思就是要我们输入要杀死的线程的pid;不过除了这种杀死线程的方式，我们还可以使用kill指令来杀死线程；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 线程PID</span><br></pre></td></tr></table></figure><p>这里我就不做演示了；先要退出的话直接ctrl+c，记住线程号，然后输入上面的指令就可以杀死对应的线程；</p><p>如果要查看当前进行中的线程，我们可以使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -u</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404787.png" alt="image-20221110111609487"></p><h4 id="2、进程控制"><a href="#2、进程控制" class="headerlink" title="2、进程控制"></a>2、进程控制</h4><p>进程一共有四个状态：就绪态、运行态、睡眠态、终止态；这里的就绪态就是程序的资源分配到位之后等待CPU执行的状态，运行态就是cup在执行的状态，睡眠态又有阻塞态和挂起，就是一种进程因为一些原因导致无法执行的情况就阻塞，只是暂时退出但是还没有终止的进程能够随时被唤醒的状态就是挂起；</p><p>在linux，我们可以看到任务切换好像都是无缝的，但是从微观上来说，切换进程其实都是需要事件的，只是事件比较少，也就是说linux中的进程其实是并发的，而不是并行的；只是每个进程之间不断地切换运行我们感觉不出来而已；</p><h4 id="3、fork函数"><a href="#3、fork函数" class="headerlink" title="3、fork函数"></a>3、fork函数</h4><p>这个函数可以创建出一个新线程，而且这个线程的内容是和父进程一样的，我们来了解一下什么事子进程，什么父进程，在window端，如果我们用微信打开一个小程序，是不是小程序依赖着微信这个环境，我们就可以称他们为父子线程；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        pid=fork();</span><br><span class="line">        <span class="keyword">if</span>(pid==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;parent process , pid=%d,ppid=%d\n&quot;</span>,getpid(),getppid());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;parent process , pid=%d,ppid=%d\n&quot;</span>,getpid(),getppid());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;finish!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404768.png" alt="image-20221109232409801"></p><p>其实这里就是父子线程打印的几句话了，这里的第二句话的ppid（也就是父进程id）就是第一句话的pin(本线程Id)，所以第一个线程就是父进程，第二个就是子进程，我们可以通过getpid、getppid来分别获取到本线程id和父线程id，不过我们通过ps现在是看不到的，因为程序执行完之后就进入了终止态；</p><p>这里的pid_t应该是头文件里面的宏定义，相当于int；当我们执行fork这个函数之后，就会创建一个和本线程一模一样的子线程，而且是直接执行的，所以我们要注意这个函数的使用，fork也是有返回值，这个反回值可以使0、1 、-1，分别表示的子线程、父线程、创建线程失败；如果还有不懂的话，可以使用man指令；</p><p>**还有一个函数是vfork()**，就是在fork的基础上加了一个特性，就是父子进程共用一块空间，我们父进程的变量在子进程中是可以改变的，</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404894.png" alt="image-20221112202226458"></p><p>这个我们使用fork写的执行后的程序，现在我们换成vfork来试试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        pid=vfork();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i &lt; <span class="number">2</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(pid==<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        num+=<span class="number">10</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;花有重开日，人无再少年，id为：%d\n&quot;</span>,getpid());</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;增加后的num：%d\n&quot;</span>,num);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        num+=<span class="number">10</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;花有重开日，人无再少年，id为：%d\n&quot;</span>,getpid());</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;增加后的num：%d\n&quot;</span>,num);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404297.png" alt="image-20221112201953257"></p><p>可以看到我们这里子线程打印的num出现了一个随机数，这是因为我们复制出来的子线程共用的父线程的num，但是我们不知道何时退出子线程，所以这里就会一直进行num的累加，所以就会出现这个随机数，所以我们就需要给他一个退出的地方：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">    num+=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;花有重开日，人无再少年，id为：%d\n&quot;</span>,getpid());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;增加后的num：%d\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404423.png" alt="image-20221112203238065"></p><p>这样的话我们就可以发现在子进程中退出了一次之后，我们父进程就少了一个，但是子进程是可以看到使用的是父进程的num；</p><h4 id="4、gdb多进程的调试"><a href="#4、gdb多进程的调试" class="headerlink" title="4、gdb多进程的调试"></a>4、gdb多进程的调试</h4><p>当我们的程序中含有父子进程的时候，我们调试可以选择父子进程还可以在两者之间切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set detach-on-fork off/on #设置是否分离线程调试</span><br><span class="line">set follow-fork-mode parent #设置父子进程调试</span><br><span class="line">info inferiors #打印调试信息，当前调试的进程以及可调式进程</span><br><span class="line">inferior id #切换要调试的进程</span><br><span class="line">detach inferiors id #分离调试</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404009.png" alt="image-20221112205037438"></p><h4 id="5、exec函数族"><a href="#5、exec函数族" class="headerlink" title="5、exec函数族"></a>5、exec函数族</h4><p>为什么叫做函数族，因为这个里面一共有6个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">execl(文件路径名，新进程名，NULL), #在程序中插入一个新进程，这个进程会运行参数1 </span><br><span class="line">execlp(文件名，新进程名，NULL),  #与execl的作用一致，但是文件路径名会自动查找，不需要我们自己写好路径</span><br><span class="line">execle(), </span><br><span class="line">execv(), </span><br><span class="line">execvp(), </span><br><span class="line">execve()</span><br></pre></td></tr></table></figure><p>我们就先演示一下前面两个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        pid_t pid;</span><br><span class="line">        int i;</span><br><span class="line">        int num=0;</span><br><span class="line">        pid=vfork();</span><br><span class="line"></span><br><span class="line">        for(i=0;i &lt; 2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                if(pid==-1)</span><br><span class="line">                &#123;</span><br><span class="line">                        perror(&quot;fork error&quot;);</span><br><span class="line">                        exit(1);</span><br><span class="line">                &#125;</span><br><span class="line">                else if(pid&gt;0)</span><br><span class="line">                &#123;</span><br><span class="line">                        num+=10;</span><br><span class="line">                        printf(&quot;花有重开日，人无再少年，id为：%d\n&quot;,getpid());</span><br><span class="line">                        printf(&quot;增加后的父线程num：%d\n&quot;,num);</span><br><span class="line">                &#125;</span><br><span class="line">                else if(pid==0)</span><br><span class="line">                &#123;</span><br><span class="line">                        num+=10;</span><br><span class="line">                        printf(&quot;花有重开日，人无再少年，id为：%d\n&quot;,getpid());</span><br><span class="line"></span><br><span class="line">                        execl(&quot;/bin/ps&quot;,&quot;ps&quot;,NULL);</span><br><span class="line">                        printf(&quot;增加后的子线程num：%d\n&quot;,num);</span><br><span class="line"></span><br><span class="line">                        exit(0);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样是那个程序，但是我在子程序中加入了execl函数，表示的是打印ps这个shell指令，可以看到：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404285.png" alt="image-20221112210812865"></p><p>有一个线程是没有打印num的值，其实使我们的子线程没有打印，因为没有了exit，但是却转向执行了ps这个指令，也是算停止了num的累加，很明显的可以看到这里的子线程其实是被execl程序中断了，相当于插入了一个进程然后不执行后面的部分了；如果我们使用excelp的话其实也是一样的效果，只不过我们可以这样用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execlp(&quot;ps&quot;,&quot;ps&quot;,NULL);</span><br></pre></td></tr></table></figure><h4 id="6、进程的退出"><a href="#6、进程的退出" class="headerlink" title="6、进程的退出"></a>6、进程的退出</h4><p>常见的进程退出有两种，一种是exit()，另一种叫就是_exit()，那么这两种有什么区别呢？</p><p>前者就是不刷新缓存区的退出，后者是会刷新缓存区的退出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        printf(&quot;hello world!\n&quot;);</span><br><span class="line">        prinft(&quot;hi&quot;);</span><br><span class="line">        exit();</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404503.png" alt="image-20221114222347072" style="zoom:150%;" /><p>可以看到使用exit的时候两句话都是会打印的，也就是都执行了；但是如果我们换成_exit()就不一样了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        printf(&quot;hello world!\n&quot;);</span><br><span class="line">        prinft(&quot;hi&quot;);</span><br><span class="line">        _exit(0);</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404266.png" alt="image-20221114222508293"></p><h4 id="7、特殊进程"><a href="#7、特殊进程" class="headerlink" title="7、特殊进程"></a>7、特殊进程</h4><p>这里我们就讲解两个进程，<strong>一个是僵尸进程一个是孤儿进程</strong>，僵尸进程在服务器维护当中是最不应该出现的，因为会占用资源，如果线程多的话还会让电脑崩溃，所以我们就需要阻止它的产生，而孤儿进程就是没有父进程的子进程，因为父子进程是异步运行的原因，所以存在父进程提前结束的情况，而子进程就没有人关闭，于是就一直运行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        pid=fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i &lt; <span class="number">2</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(pid==<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;parent pid:%d\n&quot;</span>,getpid());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;child pid:%d\n&quot;</span>,getpid());</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404336.png" alt="image-20221114225253477"></p><p>这里我们使用了一个操作，就是在创建了子进程之后，我们让其休眠2秒，之后父进程就会退出，它退出之后子进程就成了一个孤儿进程，结果就是子进程一直在运行，没有回收，而我们可以从窗口中看到没有显示原来的那个操作界面；</p><p>僵尸进程就是子进程已经结束，但是父进程却一直在执行没有回收，我们可以用下面的代码看到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        pid=fork();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(pid==<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;parent pid:%d\n&quot;</span>,getpid());</span><br><span class="line">sleep(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;child pid:%d\n&quot;</span>,getpid());</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404114.png" alt="image-20221114230111980"></p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404910.png" alt="image-20221114230122645"></p><p>这里我们就让父线程还没有苏醒的时候让子进程结束，于是我们就可以看到图中出现了一个z+，意思就是说僵尸进程还在运行；这时候我们结束掉父进程就可以结束僵尸进程了；</p><p>那么我们要如何来避免僵尸进程的产生呢？linux给出了wait()函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pid_t wait(int *wstatus);</span><br><span class="line"></span><br><span class="line">pid_t waitpid(pid_t pid, int *wstatus, int options);</span><br><span class="line"></span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>wait这个函数在父进程运行的时候会进行阻塞，如果发现子进程出现了僵尸进程的话就是执行，然后回收掉他，返回这个进程的id，如果没有的话就会返回-1 ，到时候正常退出就可以了；这里的参数是用来保存进程退出是的状态信息，因为我们只是为了处理僵尸进程，所以我们一般将参数设置为null就可以了；wait的使用需要包含一个头文件sys&#x2F;wait.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;parent pid:%d\n&quot;</span>,getpid());</span><br><span class="line">sleep(<span class="number">3</span>);</span><br><span class="line">ret=wait(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(ret==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ret&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;处理了一个僵尸进程！%d\n&quot;</span>,ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在父进程的while循环里面添加这样的代码，然后结果就会截然不同：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//android-imges/202211171404441.png" alt="image-20221114231533770"></p><p>原本会一直执行下去的父进程随着僵尸进程的产生随之就是退出了，是因为wait函数的调用，在产生了僵尸进程时候进行了处理然后打印了2099的编号，然后在没有了僵尸进程时候就执行了exit(0);</p><p>waitpid这个函数可以说是wait的升级版，他有三个参数，可以设置参数pid为-1，那么他的作用就是和wait一样的，他的显著特点就是不会阻塞线程，也就是在父进程运行的时候处理的子进程；</p><h4 id="8、进程之间的通讯"><a href="#8、进程之间的通讯" class="headerlink" title="8、进程之间的通讯"></a>8、进程之间的通讯</h4><p>进程之间是独立的，但是又是有联系的，他们可以使用管道、信号、socket、消息队列和共享内存来实现通信，那么我们先来看看进程之间如何使用管道通讯：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        pid_t pid;</span><br><span class="line">        int fd[2];</span><br><span class="line">        int ret=pipe(fd);</span><br><span class="line">        if(ret==-1)</span><br><span class="line">        &#123;</span><br><span class="line">                printf(&quot;pipe error!\n&quot;);</span><br><span class="line">                exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        pid=fork();</span><br><span class="line">        if(pid==-1)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(&quot;fork error\n&quot;);</span><br><span class="line">                exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(pid&gt;0)</span><br><span class="line">        &#123;</span><br><span class="line">                        waitpid(pid,NULL,WNOHANG);</span><br><span class="line">                        close(fd[1]);</span><br><span class="line">                        char buf[1024]=&#123;0&#125;;</span><br><span class="line">                        int len=0;</span><br><span class="line">                        len=read(fd[0],buf,sizeof(buf));</span><br><span class="line">                        printf(&quot;parent receive meassge:%s\n&quot;,buf);</span><br><span class="line">                        close(fd[0]);</span><br><span class="line">                        sleep(2);</span><br><span class="line">        &#125; </span><br><span class="line">        else if(pid==0)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">                        close(0);</span><br><span class="line">                        char * str=&quot;this is a message by child send!\n&quot;;</span><br><span class="line">                        write(fd[1],str,strlen(str)+1);</span><br><span class="line">                        close(fd[1]);</span><br><span class="line">                        sleep(2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">                                                                                                            </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要注意几个点，管道是需要在进程创建之前在再创建的，如果在进程之后创建管道的话顺序就乱了，管道将不会生效，而且这个半双工过程，也就说我们一次只能通信一次，要么是a向b发信息，要么就是b向a，不能ab同时，所以我这里就拿父子进程来讲解；</p><p>首先我们创建管道：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int fd[2];</span><br><span class="line">int ret=pipe(fd);</span><br></pre></td></tr></table></figure><p>他需要一个int数组，两个元素，一个是读端（fd[0]）一个是写端(fd[1])，pipe这个函数就是用来创建管道的，他的参数就是这个数组；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">close(fd[1]);</span><br><span class="line">char buf[1024]=&#123;0&#125;;</span><br><span class="line">int len=0;</span><br><span class="line">len=read(fd[0],buf,sizeof(buf));</span><br><span class="line">printf(&quot;parent receive meassge:%s\n&quot;,buf);</span><br><span class="line">close(fd[0]);</span><br><span class="line">sleep(2);</span><br></pre></td></tr></table></figure><p>在我们要写或者读一个内容的时候，如果是写我们就应该把读的管道描述符关闭，也就是这里的fd[0]，同理如果是读的话就是关闭写了；</p><p>使用读写流也是read和write之前我讲过的，参数的话第一个就是描述符，第二个就是数据，第三个就是长度，这里注意read的返回值是读取到的真实长度，如果读取失败的话就是返回-1；如果想要父子之间一直保持通讯的话我们就不能关闭读写流了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        pid_t pid;</span><br><span class="line">int fd[2];</span><br><span class="line">int ret=pipe(fd);</span><br><span class="line">if(ret==-1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;pipe error!\n&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">pid=fork();</span><br><span class="line">        if(pid==-1)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(&quot;fork error\n&quot;);</span><br><span class="line">                exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(pid&gt;0)</span><br><span class="line">        &#123;</span><br><span class="line">char buf[1024]=&#123;0&#125;;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">waitpid(pid,NULL,WNOHANG);</span><br><span class="line">int len=0;</span><br><span class="line">len=read(fd[0],buf,sizeof(buf));</span><br><span class="line">printf(&quot;parent receive meassge:%s\n&quot;,buf);</span><br><span class="line">sleep(2);</span><br><span class="line">char * str = &quot;fighing ,child ,you are my hope!\n&quot;;</span><br><span class="line">write(fd[1],str,strlen(str)+1);</span><br><span class="line">sleep(2);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(pid==0)</span><br><span class="line">        </span><br><span class="line">&#123;</span><br><span class="line">char buf[1024]=&#123;0&#125;;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">char * str=&quot;fighting , parent , you are my example!\n&quot;;</span><br><span class="line">write(fd[1],str,strlen(str)+1);</span><br><span class="line">sleep(2);</span><br><span class="line">int len=0;</span><br><span class="line">len = read(fd[0],buf,sizeof(buf));</span><br><span class="line">sleep(2);</span><br><span class="line">printf(&quot;child receive message:%s\n&quot;,buf);</span><br><span class="line">&#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux基础学习&quot;&gt;&lt;a href=&quot;#Linux基础学习&quot; class=&quot;headerlink&quot; title=&quot;Linux基础学习&quot;&gt;&lt;/a&gt;Linux基础学习&lt;/h1&gt;&lt;h3 id=&quot;1、使用xshell远程控制Linux&quot;&gt;&lt;a href=&quot;#1、使用xs</summary>
      
    
    
    
    
    <category term="Linux学习" scheme="https://tony-hurry.github.io/tony.github.io/tags/Linux%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>python-baselearning</title>
    <link href="https://tony-hurry.github.io/tony.github.io/2022/08/29/python-baselearning/"/>
    <id>https://tony-hurry.github.io/tony.github.io/2022/08/29/python-baselearning/</id>
    <published>2022-08-28T23:06:27.000Z</published>
    <updated>2022-09-13T06:20:12.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章：字符串的一些函数"><a href="#第一章：字符串的一些函数" class="headerlink" title="第一章：字符串的一些函数"></a>第一章：字符串的一些函数</h3><h4 id="1、相关函数"><a href="#1、相关函数" class="headerlink" title="1、相关函数"></a>1、相关函数</h4><p>eval():  这个函数的作用是将字符串当做一个表达式来用，可以进行加减乘除等计算；</p><p>ord():  字符串作为一个参数，可以返回它的ascII编码;</p><p>chr():  这里和eval()反过来，通过传入表达式或者数值返回一个字符串；</p><p>字符串是我们编程之中常用的数据格式，我们格式化数值在我们显示想要的数据是尤为重要，那么我们如何来格式化输出我们想要的数据呢？</p><p><strong>注意：%d&#x2F;f&#x2F;s:  通过这个占位符可以实现格式化我们的数据，在Python中我们连接数据不是使用+号，而是使用，直接连接就可以了；</strong></p><h4 id="2、String-方法（）"><a href="#2、String-方法（）" class="headerlink" title="2、String.方法（）"></a>2、String.方法（）</h4><p>String.count():  查找我们想要的字符串在该字符串中出现了多少次，这里有三个参数，第一个传入我们想要的字符串，第二个是开始查找的位置，第三个是查找的长度，Sting使用我们要操作的字符串对象，如果只传一个参数的话就是想要查找的字符串，其余默认为从0开始查找整个要操作的字符串：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一章：字符串的一些函数&quot;&gt;&lt;a href=&quot;#第一章：字符串的一些函数&quot; class=&quot;headerlink&quot; title=&quot;第一章：字符串的一些函数&quot;&gt;&lt;/a&gt;第一章：字符串的一些函数&lt;/h3&gt;&lt;h4 id=&quot;1、相关函数&quot;&gt;&lt;a href=&quot;#1、相关函数&quot;</summary>
      
    
    
    
    
    <category term="人生苦短，我用python" scheme="https://tony-hurry.github.io/tony.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8python/"/>
    
  </entry>
  
  <entry>
    <title>vue-baselearning</title>
    <link href="https://tony-hurry.github.io/tony.github.io/2022/08/27/vue-baselearning/"/>
    <id>https://tony-hurry.github.io/tony.github.io/2022/08/27/vue-baselearning/</id>
    <published>2022-08-27T01:52:11.000Z</published>
    <updated>2022-11-17T04:27:41.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue基础学习"><a href="#Vue基础学习" class="headerlink" title="Vue基础学习"></a>Vue基础学习</h1><h3 id="1、简单介绍："><a href="#1、简单介绍：" class="headerlink" title="1、简单介绍："></a>1、简单介绍：</h3><p>vue是一个渐进式的前段框架，我们可以使用它来提高我们动态页面的交互性，他可以动态绑定和修改盒子里面的数据，原生的js使用的编程范式是命令式编程，我们的变量需要先声明在使用，而vue使用的是声明式编程，我们可以先使用子声明变量；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;你好，李焕英&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>vue的基本用法就是创建一个vue对象，然后传一个对象参数，这个对象的el表示需要托管的标签，一般使用id，data是要显示的数据，可以来自于网络，这样当数据改变时，页面的显示也就是随之改变，这是vue的响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 我们可以使用v-on来绑定一些数据</span></span><br><span class="line">   <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">       <span class="comment">//元素对象</span></span><br><span class="line">       <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">       <span class="comment">//数据对象</span></span><br><span class="line">       <span class="attr">data</span>:&#123;</span><br><span class="line">           <span class="attr">counte</span>: <span class="number">0</span>,</span><br><span class="line">           <span class="attr">message</span>:<span class="string">&#x27;你好，李焕英&#x27;</span>,</span><br><span class="line">           <span class="attr">movies</span>:[<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>]</span><br><span class="line">           </span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">//函数对象</span></span><br><span class="line">       <span class="attr">methods</span>:&#123;</span><br><span class="line">           <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">counte</span>++,</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了添加&#x27;</span>)</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">counte</span>--,</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了减少&#x27;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>vue具有很强大的响应式，更他的数据传递方式有很大关系，因为是声明式编程，所以我么先要知道用那些数据，然后在写到vue对象里面。</p><p>vue的使用一般就是new vue（options）options代表参数列表，可以传入很多值，也可以传入很多类型，可以使字符串、方法、对象和html元素等，vue也有一个生命周期，所谓生命周期就是一个事务从诞生到消亡的整个过程；</p><h3 id="2、vue的准备工作："><a href="#2、vue的准备工作：" class="headerlink" title="2、vue的准备工作："></a>2、vue的准备工作：</h3><p>代码规范和模板搭建：</p><p>首先是缩进，我们使用2个空格的缩进更为规范，vscode的更改缩进的地方为：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/tabchange.png?raw=true" alt="image-20220705102823026"></p><p>在设置下面的tab size设置为2就可以了；</p><p>由于写vue的重复点多，所以我们可以设置一个模板：</p><p>按照一下步骤打开模板代码设置，选择new一个snippet：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/sinnpetset.png?raw=true" alt="image-20220705104922876"></p><p>然后输入下面代码即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and </span></span><br><span class="line"><span class="comment">// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope </span></span><br><span class="line"><span class="comment">// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is </span></span><br><span class="line"><span class="comment">// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: </span></span><br><span class="line"><span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. </span></span><br><span class="line"><span class="comment">// Placeholders with the same ids are connected.</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line"><span class="comment">// &quot;scope&quot;: &quot;javascript,typescript&quot;,</span></span><br><span class="line"><span class="comment">// &quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line"><span class="comment">// &quot;body&quot;: [</span></span><br><span class="line"><span class="comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line"><span class="comment">// &quot;$2&quot;</span></span><br><span class="line"><span class="comment">// ],</span></span><br><span class="line"><span class="comment">// &quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="string">&quot;Print to console&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;scope&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line"><span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line"><span class="string">&quot;body&quot;</span>: [</span><br><span class="line"> <span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;html lang=&#x27;en&#x27;&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;head&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;meta charset=&#x27;UTF-8&#x27;&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;meta http-equiv=&#x27;X-UA-Compatible&#x27; content=&#x27;IE=edge&#x27;&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;meta name=&#x27;viewport&#x27; content=&#x27;width=device-width, initial-scale=1.0&#x27;&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;title&gt;Document&lt;/title&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;script src=&#x27;./js/vue.js&#x27;&gt;&lt;/script&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;/head&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;body&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;div id=&#x27;app&#x27;&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;h2&gt;开始计数：&#123;&#123;counte&#125;&#125;&lt;/h2&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;button v-on:click = &#x27;add&#x27; &gt;+&lt;/button&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;button v-on:click = &#x27;sub&#x27;&gt;-&lt;/button&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;/div&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;/body&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;const app = new Vue(&#123;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&#125;)&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;&lt;/html&gt;&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意的是这里的配置，<strong>prefix是设置我们使用模板时的关键字，scope是我们在什么文件里使用；</strong></p><h3 id="3、基础语法和指令"><a href="#3、基础语法和指令" class="headerlink" title="3、基础语法和指令"></a>3、基础语法和指令</h3><ul><li><p>Mustacle</p><p>这是vue用到最多的语法，就是我们看到的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>开始计数：&#123;&#123;counte&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-once</p><p>当我们想要数据只显示一次，相当于取消了vue的响应式功能，当数据变化是不需要改变显示的情况</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in movies&quot;</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们使用了列表，v-for也是一个很常用的指令，这是它的语法，v-once就直接加载后面就可以了，当做标签的属性</p></li><li><p>v-html</p><p>这个的作用是将传过来的html字符串解析成标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>&#123;&#123;tag&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">tag:&#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure><p>这里的tag是一个标签字符串，同样我们添加这个指令，并赋值为tag，然后就会解析出来一个标签</p></li><li><p>v-text</p><p>这个指令的作用就是设置数据在标签上显示的作用，但是没有Mustache语法灵活：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">name:&#x27;李天王&#x27;</span><br></pre></td></tr></table></figure><p>因为它会覆盖掉原有的数据，而且不方便内容的设计，所以是不推荐使用的；v-html可以解析字符串里面的标签，但是存在安全性问题：如果在里面写了留有标签的不法代码时，就很容易被攻击（盗窃cookie）；</p></li><li><p>v-pre</p><p>有时候我们会不想要数据进行解析，我们就想要显示标签里面的内容，那么我们只需要加上这个属性就可以了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">age:&#x27;18&#x27;</span><br></pre></td></tr></table></figure></li><li><p>v-cloak</p><p>这个指令的作用是处理散动效果的，有时候我们页面渲染上去了，但是数据还没有加载出来就会显示标签里面的东西，降低了用户体验，所以我们可以利用这个执行，他也是当做属性加载标签上，但是这个属性有一个特点，就是当页面解析的时候这个属性会在标签上，但是解析完毕之后就会删除，利用这个特点我们可以设置css样式，当有这个属性的时候，我们不显示内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;myclass&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> myclass:&#x27;物联网2003&#x27;</span><br></pre></td></tr></table></figure></li><li><p>v-bind </p><p>这个指令是用来动态绑定标签的属性的，有时候我们想要动态的显示一些网页图片或者是资源，我们就可以使用这个指令，只需要加载想要动态显示的属性前面即可，然后传入该资源的路径变量就可以了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgurl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;无法显示&quot;</span>&gt;</span></span><br><span class="line">imgurl:&#x27;./img/apple.jpg&#x27;</span><br></pre></td></tr></table></figure><p>这样当我们的变量改变是，这个属性也会发生改变，一般我们可以从服务器上获取数据为变量的数据；还可以用其来改变类选择，可以使用：直接加属性，也是同样的效果，这是一个语法糖，如果我们先要固定不变的类属性就可以单独写出来，如果后期需要改变的属性我们就使用v-bind，出入一个对象即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span> <span class="attr">:class</span>=<span class="string">&#123;red:isred,green:isgreen&#125;</span>&gt;</span>&#123;&#123;blind&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//变量</span><br><span class="line">blind:&#x27;动态绑定属性&#x27;,</span><br><span class="line">isred:true,</span><br><span class="line">isgreen:false</span><br><span class="line">//样式</span><br><span class="line">.red&#123;</span><br><span class="line">  color:red;</span><br><span class="line">&#125;</span><br><span class="line">.green&#123;</span><br><span class="line">   color:green;</span><br><span class="line">&#125;</span><br><span class="line">.word&#123;</span><br><span class="line">   font-size: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>v-for</p><p>常用来遍历集合，他也有自己的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in movies&quot;</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">//变量</span><br><span class="line">movies:[&#x27;唐僧&#x27;,&#x27;孙悟空&#x27;,&#x27;猪八戒&#x27;,&#x27;沙和尚&#x27;],</span><br></pre></td></tr></table></figure><p>这里是没有索引的一个遍历，它的效果就是四个小li：</p><p><img src="https://github.com/Tony-hurry/imageBad/blob/main/mian/vue-baselearning/datagroup01.png?raw=true" alt="image-20220706130548448"></p><p>当然还有带有索引显示的列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span> = <span class="string">&quot;(item,index) in movies&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; - &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/datagroup02.png?raw=true" alt="image-20220706130725313"></p></li><li><p>computed计算属性</p><p>有时候我们会使用到数据处理的属性，就是我们可能得到多个数值，但是显示的时候是从这些数值中提取出来的数值，所以我们就可以使用计算属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算属性</span></span><br><span class="line">       <span class="attr">computed</span>:&#123;</span><br><span class="line">           <span class="attr">fullname</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fristname</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>可以很明显的看到计算属性里面的值就是一个方法，那么为什么不放在methods里面呢？</p><p>因为计算属性里面的方法只会执行一次，而methods里面的方法调用一次就会执行一次，而计算属性里面的方法就算调用多次也只会执行一次。</p></li></ul><h3 id="4、对象语法和数组语法"><a href="#4、对象语法和数组语法" class="headerlink" title="4、对象语法和数组语法"></a>4、对象语法和数组语法</h3><p>我们在对属性赋值，比如style，class这些拥有很个值的属性时，常常使用对象语法或数组语法赋值，相对来说，对象语法更加灵活和多用；</p><p>对象语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span> <span class="attr">:class</span>=<span class="string">&#123;red:isred,green:isgreen&#125;</span>&gt;</span>&#123;&#123;blind&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数组语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[&#123;fontSize:&#x27;30px&#x27;&#125; , &#123;color:&#x27;red&#x27;&#125;]&quot;</span>&gt;</span>你好，数组<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以很明显的看到对象语法更加简洁方便，数组语法比较复杂，当使用单引号括起来值的时候，就不会当成变量解析，如果有值，那么vue就会把它当成一个变量解析，到时候找不到变量就麻烦了；当然我们是可以使用变量替代的，这个变量是一个键值对对象，放的就是属性和属性值，方便数据的响应式。</p><h3 id="5、var的缺点"><a href="#5、var的缺点" class="headerlink" title="5、var的缺点"></a>5、var的缺点</h3><p>我们都知道var是没有块级作用域的，js由Brendan Eich设计出来的时候，并没有那么完善，所以var的缺点就没有那么凸显，随着它的发展，var的缺陷就不得不弥补；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.2 块级作用域的优势</span></span><br><span class="line">    <span class="comment">//var是不具有块级作用域的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取button</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="comment">/*for(var i = 0;i &lt; btn.length;i++)&#123;</span></span><br><span class="line"><span class="comment">        //为按钮添加监听事件</span></span><br><span class="line"><span class="comment">        btn[i].addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class="line"><span class="comment">             因为没有块级作用域，所以我们调用函数的时候回去上面找i</span></span><br><span class="line"><span class="comment">            ,但这个时候i已经因为for遍历自增了很多次了 </span></span><br><span class="line"><span class="comment">            console.log(&#x27;你点击了&#x27;+i);</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//se5的做法是添加闭包：</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; btn.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//为按钮添加监听事件</span></span><br><span class="line">        (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">            <span class="comment">//双括号加函数自调用闭包</span></span><br><span class="line">            btn[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你点击了&#x27;</span>+i);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)(i);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//se6的做法是使用let</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>闭包的使用，使用连续的两个小括号，前一个是放函数，函数体是我们需要执行的代码，后一个小括号传参当做是调用第一个括号里面的函数；</p><h3 id="6、const"><a href="#6、const" class="headerlink" title="6、const"></a>6、const</h3><p>使用const来创建一个常量，我们开发的时候优先考虑常量；要注意常量必须在声明的时候赋值，而且后面的值不可以修改，如果指向一个对象的话，不可以再让其指向其他对象，但是你可以修改对象的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.2 const的使用</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//可以让其指向对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">   name : <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//可以更改属性，但是不能修改指向的对象</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="7、v-on的使用"><a href="#7、v-on的使用" class="headerlink" title="7、v-on的使用"></a>7、v-on的使用</h3><p>1、这个是用来绑定监听事件的，它的一般写法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-<span class="attr">on</span>:click = <span class="string">&quot;shownumber()&quot;</span>&gt;&#123;&#123;movies[<span class="number">0</span>]&#125;&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>有一个简便写法，也叫作语法糖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click = <span class="string">&quot;showobj(123,$event)&quot;</span>&gt;&#123;&#123;movies[<span class="number">1</span>]&#125;&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>这里填的是一个函数，如果是一些简单的实现我们可以直接写表达式；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">shownumber</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">showobj</span>(<span class="params">a,event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a )</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的$符号是可以拿到js对象的，而不是传参；</p><p>2、修饰符</p><p>监听事件有一些修饰符，比如stop、prevent等，它们的作用是用来限定事件的，我们直接在语法糖后面点出属性即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click=<span class="string">&quot;fatherlisten&quot;</span> &gt;</span><br><span class="line">            父类</span><br><span class="line">            &lt;button @click.<span class="property">stop</span>=<span class="string">&quot;sonlisten&quot;</span>&gt;子类&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这里父类和子类都有单击监听事件，那么当我们点击自雷的时候会触发两次监听事件，因为浏览器 并不知道这个事件源是哪一个，那么就会向上去寻找事件处理，这种情况叫做事件冒泡，vue只是使用了一个简简单单的stop修饰就解决了这个问题；</p><p>还有是默认的事件我们不想要时，可以通过prevent来进行拦截：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 阻止默认的监听事件 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交表单&quot;</span> @<span class="attr">click.prevent</span> = <span class="string">&quot;submitlisten&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这是一个提交表单的例子，默认情况下点击按钮会提交一次表单，但是这里我们使用了prevent，所以会被这个函数替代。点击按钮之后就会执行函数里面的代码，而不是提交表单了；</p><h3 id="8、判断语句"><a href="#8、判断语句" class="headerlink" title="8、判断语句"></a>8、判断语句</h3><p>判断语句是在很多语言中一定要学习的，vue中的判断语句和其他语言也差不多，无非就是if else else-if，不过注意它的使用方式，可以用作属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用判断语句来实现登录的切换 --&gt;</span><br><span class="line">       &lt;span v-if=&quot;isusername&quot; key=&quot;user&quot;&gt;</span><br><span class="line">           &lt;label for=&quot;username&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">           &lt;input type=&quot;text&quot; id = &quot;username&quot; placeholder=&quot;username login&quot;&gt;</span><br><span class="line">       &lt;/span&gt;</span><br><span class="line">       &lt;span v-else&gt;</span><br><span class="line">           &lt;label for=&quot;email&quot; key=&quot;email&quot;&gt;邮箱&lt;/label&gt;</span><br><span class="line">           &lt;input type=&quot;text&quot; id = &quot;email&quot; placeholder=&quot;email login&quot;&gt;</span><br><span class="line">       &lt;/span&gt;</span><br><span class="line">       &lt;button @click = &quot;changelogin&quot;&gt;change login ways&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>这就是声明式编程，大家要习惯，其实还挺好用的，我们的判断语句直接v-if&#x3D;”表达式或者值”加载标签的属性后面就可以，非常的方便，不过如果是判断那种很多数据分类的类型，大家还是直接使用计算属性的好，更加规范；</p><p>这里实现了一个登录切换的案例，我们点击后面的按钮，然后会改变变量的值，浏览器就会渲染不同的登录界面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">changelogin</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//不要忘记在vue的函数里面使用属性的时候要加this</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isusername</span> = !<span class="variable language_">this</span>.<span class="property">isusername</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/login.gif?raw=true" alt="vue-loginchange"></p><p>这里有几个要注意的地方，key属性涉及到了vue底层做的事，在我们改变dom的时候，vue其实先生成了一个虚拟dom，为了降低性能的消耗，有一些值会复用，如果没有添加不同的key，那么上一次输入的数据没有清除点击切换的时候就会显示到下面的输入框中，有一些需求是不想要这个效果的；</p><p>for属性是用来点击聚焦的，就是我们的输入框，一般label会需要这个for；</p><p><strong>这里要提到一下v-show的用法，它的用法和v-if类似，但不同的是消失方式，当我们切换次数多的时候我们要是用v-show，它其实只是为元素添加了一个行内样式display，将元素隐藏了，但开发中还是v-if用的多；</strong></p><h3 id="9、v-for遍历数组和对象、key在数组中的作用"><a href="#9、v-for遍历数组和对象、key在数组中的作用" class="headerlink" title="9、v-for遍历数组和对象、key在数组中的作用"></a>9、v-for遍历数组和对象、key在数组中的作用</h3><p>我们可以使用v-for遍历数组或对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span> = <span class="string">&quot;(item,index) in movies&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; - &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>这里使用了小括号，表明是含有下标的遍历；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">movies</span>:[<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>],</span><br><span class="line">            <span class="title function_">addmovie</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">movies</span>.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><p>这里添加了key进行动态绑定，目的是为了节省性能的消耗，利用key可以阻止数据的复用，这里的元素和数组元素绑定了，所以可以浏览器可以标识，当我们开始添加数据时，浏览器就能找到我们想要插入数据到数组种的位置；</p><h3 id="10、小案例：书单购物车"><a href="#10、小案例：书单购物车" class="headerlink" title="10、小案例：书单购物车"></a>10、小案例：书单购物车</h3><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/bookshop.png?raw=true" alt="image-20220722184603621"></p><p>学过了v-for和动态绑定相关的内容之后，我们可以写一个购物车：这里是拥有显示书名、序号、总价、数量、移除功能的一个程序，</p><p>我们可以用对象数组的数据结构，这里就有一个长度为四的数组，里面存放有序号，书名，价格和数量的属性的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">books</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;海底两万年&#x27;</span>,</span><br><span class="line">                    <span class="attr">price</span>:<span class="number">100</span>,</span><br><span class="line">                    <span class="attr">authors</span>:<span class="string">&#x27;none&#x27;</span></span><br><span class="line">                    ,</span><br><span class="line">                    <span class="attr">booknumber</span>:<span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;海底两万年&#x27;</span>,</span><br><span class="line">                    <span class="attr">price</span>:<span class="number">100</span>,</span><br><span class="line">                    <span class="attr">authors</span>:<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">                    <span class="attr">booknumber</span>:<span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">id</span>:<span class="number">3</span>,</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;海底两万年&#x27;</span>,</span><br><span class="line">                    <span class="attr">price</span>:<span class="number">100</span>,</span><br><span class="line">                    <span class="attr">authors</span>:<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">                    <span class="attr">booknumber</span>:<span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">id</span>:<span class="number">4</span>,</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;海底两万年&#x27;</span>,</span><br><span class="line">                    <span class="attr">price</span>:<span class="number">100</span>,</span><br><span class="line">                    <span class="attr">authors</span>:<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">                    <span class="attr">booknumber</span>:<span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br></pre></td></tr></table></figure><p>那么表格的数据是怎么放进去的呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 书单购物车 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;books.length&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;tstyle&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>authors<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>numbers<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>action<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in books&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> &gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> &gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> &gt;</span>&#123;&#123;item.price | getprice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> &gt;</span>&#123;&#123;item.authors&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 要是小于1，按钮会变灰色 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement(index)&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;item.booknumber &lt;= 1&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            &#123;&#123;item.booknumber&#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment(index)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeHandle(index)&quot;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 计算属性可不是方法，不能传参 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格：&#123;&#123;totalprice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>购物车为空<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很简单，使用判断和v-for就可以啦，表格组件一般有一个标题栏和数据栏，我们分别使用thead和tbody，tbody中可以遍历的数据只有四个，后面的添加和移除是我们需要自己额外写上去的，几个按钮和文字就搞定；样式在下面：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tstyle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span>;<span class="comment">/*去掉单元格间隙*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tstyle</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tstyle</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c0c0c0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是创建一个全实线分割的常用css样式，建议记下来后面也好用到；</p><p>那么这些数据处理的逻辑是怎么样的呢？</p><p>首先我们通过一个th进行遍历，有多少个对象就会有多少个th，而td就是其中一个对象的数据，所以我们可以自己引用，建议遍历的方式是带有缩印的，因为后面的价格什么计算是需要用到的，我们一般使用splice来进行数据的插入和删除：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">removeHandle</span>(<span class="params">index</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">books</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加书本数量就是一个简单的单击事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">increment</span>(<span class="params">index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">booknumber</span>++;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">decrement</span>(<span class="params">index</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">booknumber</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">booknumber</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>毕竟都是响应式的，所以我们改变数据的时候，浏览器也会显示响应的改变；如果书本数量减少到了1，我们可以让按钮变灰色；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:disabled=&quot;item.booknumber &lt;= 1&quot;</span><br></pre></td></tr></table></figure><p>计算总价大家要想到使用计算属性，而不是函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.5 计算购物车书单总价</span></span><br><span class="line"><span class="title function_">totalprice</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        total += <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">price</span>*<span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">booknumber</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历一下数组，然后累加价格返回即可；</p><h3 id="11、radio和v-model"><a href="#11、radio和v-model" class="headerlink" title="11、radio和v-model"></a>11、radio和v-model</h3><p>v-model是一个双向绑定的指令，我们可以加上这个指令，传的是一个参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 如果不写value的话，那么sex会一直为空字符串，因为单选框也是需要内容代表的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span></span><br><span class="line">data:&#123;</span><br><span class="line">  message:&#x27;动态绑定&#x27;,</span><br><span class="line">  sex:&#x27;男&#x27;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后我们改变输入框里面的内容时，sex参数的值也会随之发生变化；当然该sex的值，输入框中的内容也会变化；</p><p>radio是input的一种类型，叫做单选框，我们可以借助v-model绑定同一个参数来实现互斥；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.2 单选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">  男</span><br><span class="line">  <span class="comment">&lt;!-- 如果不写value的话，那么sex会一直为空字符串，因为单选框也是需要内容代表的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female  &quot;</span>&gt;</span></span><br><span class="line">  女</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的性别为：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12、单选框和复选框"><a href="#12、单选框和复选框" class="headerlink" title="12、单选框和复选框"></a>12、单选框和复选框</h3><p>CheckBox就是复选框，同样是input的功能，那么我们怎么将它们和变量绑定起来呢？</p><p>单选功能绑定变量，而多选就可以是数组，CheckBox也可以是单选功能，比如用户许可协议：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 复选框的使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;听音乐&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>听音乐</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跑步&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>跑步</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打游戏&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>打游戏</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;agreement&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;agreement&quot;</span>&gt;</span>已阅读用户许可协议</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  您的爱好为：&#123;&#123;hobby&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;!agreement&quot;</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们选择了哪些爱好，vue就会将其添加到数组中，这里就是hobby这个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hobby</span>:[],</span><br><span class="line"><span class="attr">agreement</span>:<span class="literal">false</span>,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个就是select，也具有单选和复选的功能，但是它是下拉框的形式：</p><p><img src="https://github.com/Tony-hurry/imageBad/blob/main/mian/vue-baselearning/hobbey.png?raw=true" alt="image-20220724174408611"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.2 select 标签与v-model  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;西瓜&quot;</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;橙子&quot;</span>&gt;</span>橙子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>您选择了：&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;西瓜&quot;</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;橙子&quot;</span>&gt;</span>橙子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>您选择了：&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.3 值绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">&quot;item in originhobby&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您绑定的是:&#123;&#123;originhobby&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要注意的是，我们直接将数值绑定在select上面就可以了；后面的值绑定的就是我们不将数据写死的操作，爱好的选项是由一个数组存储起来了，后期也方便修改，这里就直接遍历渲染出多选框；</p><h3 id="13、v-model的修饰符，它的修饰符有lazy（懒加载）、number（设置为数字类型）、trim（给变量去除空格）；"><a href="#13、v-model的修饰符，它的修饰符有lazy（懒加载）、number（设置为数字类型）、trim（给变量去除空格）；" class="headerlink" title="13、v-model的修饰符，它的修饰符有lazy（懒加载）、number（设置为数字类型）、trim（给变量去除空格）；"></a>13、v-model的修饰符，它的修饰符有lazy（懒加载）、number（设置为数字类型）、trim（给变量去除空格）；</h3><p>使用的方式是靠v-model直接点出来的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>懒加载的作用就是我们不会已修改就刷新变量的值，而是等我们回车或者是失去焦点的时候才刷新；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;typeof message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们无论类型设置为字符串还是数值，当我们填入数字后变量的类型就会被设置为数字类型；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;typeof message&#125;&#125;-&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们往输入框中填入了空格，vue会剔除变量的空格；</p><h3 id="14、组件化编程"><a href="#14、组件化编程" class="headerlink" title="14、组件化编程"></a>14、组件化编程</h3><p>有时候我们需要用到同一个模板代码，或者是很多重复，如果自己遇到一次敲一次的话就太麻烦了，于是我们可以通过组件化编程来提高代码的灵活性；什么是组件化呢？就是我们将一个页面分层，像树结构那样，分成一个一个的小块，</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/components.png?raw=true" alt="查看源图像"></p><p>代码的实现方式有三个步骤，第一个创建组件化对象，也就是模板对象，第二个是注册组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpnc&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是段落1&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是段落2&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一般第一步可以放在第二步里面实现，就这里一句话，第一个参数是组件名称，第二个就是模板，大家也不要去较真，就是要分开写，那样的话会报错的，我们就直接一步写完，然后就是使用了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.2 组件化编程 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpnc</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpnc</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接使用这个组件，已经抽象成了一个标签；其实它的底部是这样实现的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*   //创建模板</span></span><br><span class="line"><span class="comment">  const cpnc = new Vue.extend(&#123;</span></span><br><span class="line"><span class="comment">    extend:`</span></span><br><span class="line"><span class="comment">    &lt;div&gt;</span></span><br><span class="line"><span class="comment">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">        &lt;p&gt;我是段落1&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;p&gt;我是段落2&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    `</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  //注册组件</span></span><br><span class="line"><span class="comment">  Vue.component(&#x27;my-cpnc&#x27;,cpnc) */</span></span><br></pre></td></tr></table></figure><h4 id="1、全局与局部组件"><a href="#1、全局与局部组件" class="headerlink" title="1、全局与局部组件"></a>1、全局与局部组件</h4><p>顾名思义，全局组件就是可以在所有的vue实例中使用的组件，vue实例就是我们new vue（）的实例化对象，向我们之前直接创建的就是一个全局组件；</p><p>局部组件是使用了vue实例的component属性注册：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const cpnc =  Vue.extend(&#123;</span><br><span class="line">  template: `    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span><br><span class="line">&#125;)</span><br><span class="line">//使用组件属性来创建局部组件</span><br><span class="line">component:&#123;</span><br><span class="line">  &#x27;my-cpnc2&#x27;:cpnc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、父组件和子组件"><a href="#2、父组件和子组件" class="headerlink" title="2、父组件和子组件"></a>2、父组件和子组件</h4><p>也就是说我们可以在一个组件里面在使用组件，然后这两个组件其实就是父子关系了，那就意味着vue实例其实就是爷爷组件了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cpnc1 =  <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;我是儿子标题&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是段落1&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是段落2&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> cpnc2 =  <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;我是父亲&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是段落1&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是段落2&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;soncpn&#x27;</span>:cpnc1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3、组件的分离写法和组件内部的数据处理"><a href="#3、组件的分离写法和组件内部的数据处理" class="headerlink" title="3、组件的分离写法和组件内部的数据处理"></a>3、组件的分离写法和组件内部的数据处理</h4><p>如果组件的创建和注册都写在一起的话，看上去显得非常杂乱：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/saperteds.png?raw=true" alt="image-20220726104525660"></p><p>而且看起来也非常难受，写这个也麻烦，所以我们可以分离它们<strong>，使用template标签或者是script属性设置为x-template的标签：</strong>**</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.3 分离组件写法 :不需要渲染出来的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是分离组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>开始计数：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;count &lt;= 1&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是分离组件2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实在每一个组件里面都含有自己的data和methods属性，与实例vue不一样的是，组件里面的data是一个具有对象返回值的函数，为什么要这样设计呢？</p><p>vue处理数据想的很周到，因为组件我们会重复使用到，大家总不想我在标题使用的组件数据一变化后面的也就跟着变化吧？这样的话组件化就很死板，我们知道函数返回的是一个对象地址，这里返回的是一个数据对象，那么就是返回一个地址，而每当函数执行的时候都会创建自己的栈空间，所以返回的对象就不会是同一个地址，就不是同一个对象了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册分离组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn3&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;#cpn3&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message1</span>: <span class="string">&#x27;分离组件数据&#x27;</span>,</span><br><span class="line">      <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">increment</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>总之就是使用了函数会自己开空间的这个特性，每次使用数据的就不会是同一个对象了；</p><h4 id="4、父子组件之间的通讯"><a href="#4、父子组件之间的通讯" class="headerlink" title="4、父子组件之间的通讯"></a>4、父子组件之间的通讯</h4><p>当我们一个页面比较复杂的时候，有很多的组件会运用到，特别是父子组件的使用，在开发中，它们之间的通讯就显得很重要，毕竟我们组件像服务器发送数据请求的时候不可能所有组件都去访问，一定是交给最外面的那个组件一次访问服务器就可以了，所以就需要让父组件知道下面的子组件的数据请求，而当父组件接收到了服务器的回应数据时，又需要将数据传给子组件，这样才能完成一次完整的通讯；</p><p>那么，父子组件之间是如何通讯的呢？子访问父组件使用props属性，而父访问子组件就是通过事件的方式；</p><h5 id="1、子组件访问父组件"><a href="#1、子组件访问父组件" class="headerlink" title="1、子组件访问父组件"></a>1、子组件访问父组件</h5><p>props可以是数组也可以是对象，开发中一般是使用的对象，因为可以设定很多的条件，有一个验证的作用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cpn1=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;#cpn1&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">movies1</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">Array</span>,</span><br><span class="line">      <span class="title function_">default</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">greet1</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">movies</span>:[<span class="string">&#x27;人在囧途&#x27;</span>,<span class="string">&#x27;新少林故事&#x27;</span>,<span class="string">&#x27;奇门遁甲&#x27;</span>],</span><br><span class="line">    <span class="attr">greet</span>:<span class="string">&#x27;hello everyone!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;my-cpn1&#x27;</span>:cpn1,</span><br><span class="line">            <span class="comment">//语法糖写法</span></span><br><span class="line">    <span class="string">&#x27;my-cpn2&#x27;</span>:&#123;</span><br><span class="line">      <span class="attr">template</span>:<span class="string">&#x27;#cpn2&#x27;</span>,</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">          <span class="attr">message</span>:<span class="string">&#x27;hello This is cpn2&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这是注册组件的函数，用到了组件的分离写法和语法糖，这里做的事就是设定了从父组件传过来的两个数据，一个是movies1要求是一个数组，默认值是一个数组，因为如果类型数数组或者对象的话，数据的默认值就就需要使用default函数，而第二个数据greet因为是string类型，所以default就可以是属性的方式，常量和变量嘛，使用函数开辟空间好一点；required的意思就是这个值是必须要传的，不然就报错，那么我们要怎么传呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.1 子组件访问父组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn1</span> <span class="attr">:movies1</span>=<span class="string">&quot;movies&quot;</span> <span class="attr">:greet1</span>=<span class="string">&quot;greet&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;movies1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;greet1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到这里使用v-bind动态绑定了父组件的两个数据movies和greet，这就是传了数值过来，而组件里面就可以直接使用了，不过要注意使用的是自己的数据，而不是父组件的，也就是movies1而不是movies；</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/cmp01.png?raw=true" alt="image-20220727100754312"></p><p>这里出现了一个特殊符号，就是Nan这是因为我使用了驼峰命名，很坑：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-cpn3</span> <span class="attr">:my-movies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-cpn3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然说有一些不可以使用驼峰的话可以通过短横线来连接，可以有一些vue的版本连短横线也用不了，我的是2.4.2版本的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.1 父子组件通讯的驼峰写法 */</span></span><br><span class="line"><span class="keyword">const</span> cpn3=&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;#cpn3&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">myMovies</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">default</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的一个属性myMovies就是典型的驼峰命名，所以建议大家在传递属性的时候尽量<strong>使用小写字母</strong>；</p><h5 id="2、父组件访问子组件"><a href="#2、父组件访问子组件" class="headerlink" title="2、父组件访问子组件"></a>2、父组件访问子组件</h5><p>父组件访问子组件有一种方式，前面就已经说过了，就是事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件3,&#123;&#123;mymovies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;submit(message)&quot;</span>&gt;</span>通知父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很明显的看到我添加了一个按钮的点击事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;我是子组件的message&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,     </span><br><span class="line"><span class="comment">//监听事件</span></span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="string">&#x27;submit&#x27;</span>:<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;signlistren&#x27;</span>,item)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已提交&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在子组件的数据定义下，我写了一个监听方法叫submit，里面干了一件这样的事，就是使用this.$emit给父组件发送了一个事件和一个变量；其实这句代码的意思就是给父组件一只耳朵，用来监听这类这个组建的时间，而这只耳朵的名字就叫做signlistren:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-cpn3</span> <span class="attr">:mymovies</span>=<span class="string">&quot;movies&quot;</span> @<span class="attr">signlistren</span>=<span class="string">&quot;sonlistren&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-cpn3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>于是我在使用时组件的时候就使用了这只耳朵，父组件成功的接收到了子组件传过来的数据：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/cmp02.png?raw=true" alt="image-20220727135052510"></p><p>意思就是说我们可以通过监听子组件的一些普通时间，然后通过this.$item()发送给父组件一些自定义的事件监听器和数据，然后父组件就可以是使用这个监听器来专门监听这一种事件；</p><h5 id="3、父子组件之间的动态绑定"><a href="#3、父子组件之间的动态绑定" class="headerlink" title="3、父子组件之间的动态绑定"></a>3、父子组件之间的动态绑定</h5><p>我们先来分析一下，怎样算是父子组件的动态绑定，大家都是知道v-model就是动态绑定，但是对于父子组件之间来说，它们之间是没有数据来往的，要实现这个动态绑定，必须要分开来才行，怎么弄呢，其实在前面我们就讲到过一个点，v-model其实就是v-bind和监听函数的结合使用，在input里面就是：value和监听函数；实现的思路也很简单，就是我们可以将父组件穿过来的数据使用value显示到input中，而通过input的监听来对父组件发送数据变动的请求，然后父组件就可以监听这个请求来做出响应的改变：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是组件四：&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;number1&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;getvalue&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里是我们的模板，使用：value来实现动态的绑定数据显示到input中，然后通过@input来监听数据的变动：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;#cpn4&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">number</span>:<span class="title class_">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">number1</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="attr">getvalue</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">number1</span> = event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;cpn4value&#x27;</span>,<span class="variable language_">this</span>.<span class="property">number1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是局部的组件注册，里面的监听函数向父组件发送了数据信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;cpn4value&#x27;</span>:<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">number</span> = <span class="built_in">parseInt</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父组件拿到之后就可以实现数据的更改了，这里的value默认只就是我们子组件的第二个参数的值；</p><p>想要实现这个案例需要我们对前面的知识有一定的掌握，比如父子组件的通讯，这里结合了前面两课的介绍；一般我们不可以直接修改父组件传过来的值，而是需要使用事件监听的方式，而父组件传过来的数据一定不能直接使用而是使用另一个变量存放起来，才可以使用；</p><h5 id="4、使用对象的方式获取父子组件数据"><a href="#4、使用对象的方式获取父子组件数据" class="headerlink" title="4、使用对象的方式获取父子组件数据"></a>4、使用对象的方式获取父子组件数据</h5><p>之前我们使用的是props获取父组件数据，使用事件的方式获取子组件数据，这样在开发中有一点困难，毕竟不是每次需要子组件数据的时候都需要点击，所以我们就想了一种可以通过对象的方式获取数据，这样就方便多了：</p><p>子组件对象：</p><p>1、$children：这是一个对象数组，里面是存放的是该实例<strong>下面所有的子组件对象：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">$children</span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">message</span>)</span><br></pre></td></tr></table></figure><p>使用起来也很简单，就是this.$children就可以了，但是要通过下标的方式来获取数据，容易出错的同时也非常的不方便，所以我们推荐使用$refs</p><p>2、$refs是一种引用的方式，我们给标签添加这个属性，后面的值是我们自定义的名称，后面要使用的时候我们直接引用就可以了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mycpn4</span> <span class="attr">:number1</span>=<span class="string">&quot;number&quot;</span> @<span class="attr">cpn4value</span>=<span class="string">&quot;cpn4value&quot;</span>  <span class="attr">ref</span>=<span class="string">&quot;data4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn4</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里设置的引用名称是data4，后面使用的时候就是data4：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">data4</span>.<span class="property">message</span>)</span><br></pre></td></tr></table></figure><p>这种方式简洁有好用，推荐使用；</p><p>父组件对象：</p><p>子组件可以依靠$root和$parent两个对象来访问父组件，前者是访问根组件，也就是vue实例，后者就是直接的父组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$parent</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>)</span><br></pre></td></tr></table></figure><h4 id="5、插槽slot"><a href="#5、插槽slot" class="headerlink" title="5、插槽slot"></a>5、插槽slot</h4><p>对于插槽这个东西大家肯定是不陌生的，在日常生活中非常常见，其中use是最多的，那么它的作用就是用来扩展功能的，在vue里面也是一样，slot的作用就是用来扩展组件的功能的，想想看我们常常看到一些导航栏，它们有相似之处又有很多不同的地方，不用想它们肯定是用的组件做的，但是怎么做到不一样的呢？这就是插槽，我们在模板中留下一些插槽，也就是slot标签，然后使用组件的时候我们就可以添加标签进去了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是默认插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具名插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;s1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>我是默认按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里有两种插槽，一种是没有名字的，默认插入标签都是在这个位置，另一种就是具名插槽了，我们在使用的时候需要声明插槽的名字：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是自定义按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>作用域插槽</strong></p><p>有时候我们数据在子组件，但是父组件使用的组件建，利用插槽来做到不同的展示效果，也就是在html页面中拿到子组件对象数据显示而已：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;clanguage&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in clanguage&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认状态下，我们的插槽是来自于子组件数据的一群小li，注意这里为slot添加了一个属性：data这个名字是自取得的，它绑定了一个数据就是来自子组件的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cpn2</span>:&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;#cpn2&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">clanguage</span>:[<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c++&#x27;</span>,<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;javascript&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们怎么拿到这个绑定了的数据呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.1 作用域插槽，目的就是将子组件的数据拿到这里使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn2</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span>&#123;&#123;slot.data.join(&#x27;-&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用slot-scope这个属性获取到插槽对象，然后就可以在标签里面点出它的属性了，做到了值传递的效果，注意这个属性是加在我们要加在插槽位置的标签上面；这里使用了一个函数就是join（）其实是用来分离数组元素的，它不会在左右两头加分隔符号：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/join.png?raw=true" alt="image-20220731103521449"></p><h3 id="15、模块化"><a href="#15、模块化" class="headerlink" title="15、模块化"></a>15、模块化</h3><p>在一些大公司开发的项目中，往往不是一个人开发一个页面，可能是多个人共同开发，就会引用大量的.js文件，很大程度上会存在全局变量重名的问题，将会引发一系列的逻辑问题，所以我们需要给每个.js文件设置一个作用域，在es6之前，常使用闭包的方式来给与一个.js文件作用域，就只需要将返回的对象不重名就可以，那时候还没有模块化的概念；</p><p>在ES6中已经有了模块化了，这是一个标准，我们导入js文件的时候要声明类型是一个modules：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./modules/modules1.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这就是在告诉浏览器这是一个模块，拥有自己的作用域，这里面的所有对象在别的js文件之中无法直接访问；那么我们要如何使用其他js文件中的数据呢？</p><p>答案就是导入（import）和导出（exports）的使用：</p><p>导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n1 = <span class="string">&#x27;我是模块一&#x27;</span></span><br><span class="line"><span class="keyword">var</span> n2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a +  b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出部分</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  n1,n2,sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我这里不写太多，使用这个关键字可以导出变量、函数、类等对象</p><p>导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块2导入模块1</span></span><br><span class="line"><span class="comment">/* import * as info from &#x27;../modules/modules1&#x27; */</span></span><br><span class="line"><span class="keyword">import</span> &#123;n1,n2, sum&#125; <span class="keyword">from</span> <span class="string">&#x27;./modules1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1+n2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>这里有两种方式，一种是创建了一个对象，叫做info，如果要是用对应js文件下的数据时直接点出来就可以了；</p><p>另一种就是直接使用数据接收，但要注意取得名字一定要相同；</p><p><strong>注意事项</strong>：</p><p>我这里使用的是VScode，在用到模块化的时候，导入文件浏览器出现了跨域访问的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main/mian/vue-baselearning/block.png?raw=true" alt="image-20220801105228447"></p><p>其实只需要在vscode中安装一个插件然后通过这个插件打开就可以了：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220801105325624.png" alt="image-20220801105325624"></p><p>在自己写的页面点击下面选项打开就没有这个问题了：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220801105410124.png" alt="image-20220801105410124"></p><h4 id="1、webpack"><a href="#1、webpack" class="headerlink" title="1、webpack"></a>1、webpack</h4><p>这是一个模块化打包工具，核心就是实现了模块化，而且它的强大之处在于如果一个模块有依赖的话，他会自动化处理这些依赖模块；</p><p>使用它需要安装node下面的npm，npm是一个包管理工具，因为需要使用到很多的工具包，所以就有了这样一些工具，那么我们使用npm来安装一下webpack，先找到我们的项目文件夹，然后在对应的命令行下面输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@3.6.0 --save-dev</span><br></pre></td></tr></table></figure><p>这里我安装的是3.6.0版本，而且是局部安装，也就是在这个项目里面使用，当然还可以全局安装一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@3.6.0 -g</span><br></pre></td></tr></table></figure><h5 id="1、构建项目结构"><a href="#1、构建项目结构" class="headerlink" title="1、构建项目结构"></a>1、<strong>构建项目结构</strong></h5><p>虽然现在很多工具可以实现自动化构建，但是对于学习者来说，想要了解结构莫过于自己构建试试：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220801211259385.png" alt="image-20220801211259385"></p><p>这里我建的项目叫做day02，下面有两个子文件夹dist和src，前者是存放通过了webpack打包后的代码，就是我们要发行的项目，后者就是我们要开发的代码，后面我们就在src里面写代码了；这里还可以看到几个不一样的文件，package.json，这个其实是npm初始化后产生的文件，主要也是用来管理包的，我们只需要在项目的命令行下面输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>就可以拿到这个文件了，当然目前我们还是简单的学习，所以弹出来的提示我们就一直回车就行了；这里的index是入口，但其实打包主要是打的main.js文件，它是js文件的入口，在后期我们写代码里面的时候里面是核心代码，会有很多的依赖，都是通过这个文件来关联的，webpack借助这个文件可以处理到其他依赖的文件；</p><p>怎么打包呢？我们只需要负责打包的文件和去处就行了，这里我们为了以后打包的方便，写了一个配置文件来表明打包文件和地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  <span class="attr">entry</span>:<span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是配置文件里面的代码，主要是表明了main.js文件为打包对象，然后打包到这个dist文件夹的下面，文件名称是bundle.js，这里使用的是commonjs模块规范，因为webpack底部对着这种写法有了支撑，所以我们可以写很多中的模块化规范。path也是一个包，里面有一个功能就是获取到当前文件夹在本机上的绝对路径，因为表明打包的地点需要绝对路径，所以我们就可以使用红这个path.join( __dirname,’dist’)来告诉webpack我们想要打包的目的地；</p><p>还有，为了以后写代码简单明了，我们就使用了命令的映射：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>这是package.json里面的代码，这一段代码就是实现了代码的映射，我们添加了一个build，如果我们在命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>他就会执行webpack的命令，意思就是打包项目，根据我们写的默认配置来打包，重main.js文件，打包到dist文件下面的bundle.js文件。</p><h5 id="2、两种模块规范的导入导出写法："><a href="#2、两种模块规范的导入导出写法：" class="headerlink" title="2、两种模块规范的导入导出写法："></a>2、两种模块规范的导入导出写法：</h5><p>这里介绍经常用到的两种模块导入和导出的写法：</p><p>导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.1 使用commonjs的方式接收</span></span><br><span class="line"><span class="keyword">const</span> &#123;message&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./js/module01.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line"><span class="comment">//2.2 使用ES6接收</span></span><br><span class="line"><span class="comment">/* import &#123;name,age&#125; from (&#x27;./js/module01.js&#x27;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">console.log(&#x27;姓名:&#x27;+name+&#x27;,年龄：&#x27;+age) */</span></span><br></pre></td></tr></table></figure><p>相对应的导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 使用commonjs的方式</span></span><br><span class="line"><span class="comment">/* export var name=&#x27;tony&#x27;</span></span><br><span class="line"><span class="comment">export var age = 21 */</span></span><br><span class="line"><span class="comment">//1.2 使用ES6的方式</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  <span class="attr">message</span>:<span class="string">&#x27;hello webpack&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要特别注意一点，我是es6的导入和导出给注释的，因为同一个模块中不支持写多种模块导出的规范，但是却可以写多种模块规范的导入；</p><h5 id="3、loader的使用"><a href="#3、loader的使用" class="headerlink" title="3、loader的使用"></a><strong>3、loader的使用</strong></h5><p>我们如果不依赖css文件的时候，webpack就不会去处理样式文件，那我们的页面就不好看了，想要依赖css或是其他格式的文件就需要用到lloader，它是用来转换的，有了这个webpack就可以识别导入的css文件模块了；</p><p>先安装这个工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br></pre></td></tr></table></figure><p>很多时候我们使用到了–save-dev这个修饰其实 表示的是我们这个工具是在开发中才会使用的意思；</p><p>安装完成之后还需要到webpack.config.js文件中配置一下这个loader才可以使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置loader</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">//注意顺序，因为loader是从右到左读取的</span></span><br><span class="line">      <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是css-loader这个工具只是将css文件可以打包到bundle.js中，它并不会使用这个样式，所以就不会看到样式效果，如果想要生效，还需要安装一个style.loader才行，然后将它放在css-loader的前面，像上面的代码一样，这里是具有顺序的，之所以写在前面，是因为webpack读取的顺序是从右到左；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入css文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/normal.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后在main.js也就是入口文件里面依赖一下我们的样式文件就可以看到样式了；</p><p>又时候我们也会需要使用less来写样式，所以可以将less-loader也按照上面的步骤安装一遍，只是名字是less-loader而已，其他的是一样的，这里要注意的是less-loader也不包括转换功能，他只是打包less文件而已，所以我们还要安装一个less</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less</span><br></pre></td></tr></table></figure><p>如果还有不懂的就去看官网吧，这里有中文手册：</p><p>[webpackjs.com]: </p><h5 id="4、使用图片"><a href="#4、使用图片" class="headerlink" title="4、使用图片"></a>4、使用图片</h5><p>想要图片打包也是需要loader的，在网页中有许多各式各样的图片，所以学会打包图片非常重要，我们可以使用url-loader和file-loader来实现图片的打包，添加这两个loader的命令和也是一样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader file-loader</span><br></pre></td></tr></table></figure><p>这样写的话就会一次性装上两个了，后面就是配置url-loader的打包信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       test: /\.(png|jpg|gif|jpeg)$/,</span><br><span class="line">       use: [</span><br><span class="line">         &#123;</span><br><span class="line">           loader: &#x27;url-loader&#x27;,</span><br><span class="line">           options: &#123;</span><br><span class="line">             limit: 1300,</span><br><span class="line">             name:&#x27;img/[name].[hash:8].[ext]&#x27;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h5 id="5、vue包的安装和使用"><a href="#5、vue包的安装和使用" class="headerlink" title="5、vue包的安装和使用"></a>5、vue包的安装和使用</h5><p>在使用之前一定要注意版本问题，自己学的是vue2还是vue3，它们两个的包是不一样的，我们学的是这种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">info</span>:<span class="string">&#x27;既然上了生活的贼船，那就做一个快乐的海盗&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么就是vue2了，在项目下面的命令行中输入安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue@2</span><br></pre></td></tr></table></figure><p>虽然安装了，但需要解决一下runtime的问题，打开我们安装好的vue包：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220805072121864.png" alt="image-20220805072121864"></p><p>可以发现这里有一种是runtime命名的，而且默认也</p><p>是使用的这个，我们需要改成vue.esm.js文件，因为runtime-only环境下使用不了template，而vue实例其实也算一个template，所以我们就会无法使用，只需要在webpack.config.js文件下面加上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意放的位置，它是和module平行的；</p><p>在使用vue的时候需要导入vue包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.3 使用vue实例前需要导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">info</span>:<span class="string">&#x27;既然上了生活的贼船，那就做一个快乐的海盗&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就可以和前面学习的知识衔接上了。</p><p>为了做到更加的模块化，webpack可以将main.js代码和vue组件分开，就是创建一个vue文件夹，里面存放着组件的数据，都是vue格式的文件：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/main/print-screen/202208271620584.png?raw=true"></p><p>但是既然是一种文件，那么必不可少的是其对应的loader和compiler，所以我们和之前一样，安装一下这两个包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev vue-loader@14.2.2 vue-template-compiler@2.7.8</span><br></pre></td></tr></table></figure><p>我建议安装对应的包是一定要表明所安装的版本，<strong>因为vue发行的包版本较多，版本不同的话就没有办法编译，而且vue版本需要和vue-template-compiler的版本一致</strong>：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/main/print-screen/202208271620578.png?raw=true"></p><p>这里是我用的版本，比较旧，因为如果版本越高操作的配置就要越复杂，所以我们从简单开始，这里的vue-loader是14版本的，如果比它高就需要配置一个plugin，这里就不需要了，但还是要和之前一样在webpack.config.js文件里面配置对应的模块解析规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置vue-loader</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  <span class="attr">use</span>:[<span class="string">&#x27;vue-loader&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建好了一个vue文件的时候，我们需要一个模板来写对应的组件数据，一般是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>加勒比海盗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">info</span>:<span class="string">&#x27;既然上了生活的贼船，那就做一个快乐的海盗&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&#x27;杰克船长&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可分成三部分，第一template是组件模板，第二是脚本，也就是该组件对应的js代码数据，第三部分style就是样式，我们可以在里面写对应的组件样式，通过script部分的导出，可在main.js文件里面导入，然后就可以打包了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.3 使用vue实例前需要导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//1.4 导入app文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./vue/App.vue&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`&lt;App/&gt;`</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">   <span class="attr">message</span>:<span class="string">&#x27;我是vue实例，不是组件&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的template作用就是替换index.html文件中id为app的部分标签，既然在main.js中有了依赖，那么webpack就会自动化解决这些依赖；</p><p>6、插件的使用：</p><p>html-webpack-plugin自动生成index.html的插件，因为我们之前打包的时候并没有将index.html文件打包到dist文件夹下面，但是如果要发行的话一定需要这个index.html页面入口；</p><p><strong>注意版本问题：</strong></p><p>特别是在插件中，这里提供一些参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;day02&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;webpack.config.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack --mode development&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;babel-core&quot;</span>: <span class="string">&quot;^6.26.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^7.1.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-preset-es2015&quot;</span>: <span class="string">&quot;^6.24.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>: <span class="string">&quot;^0.28.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;file-loader&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^2.30.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less&quot;</span>: <span class="string">&quot;^2.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less-loader&quot;</span>: <span class="string">&quot;^4.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>: <span class="string">&quot;^0.23.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uglifyjs-webpack-plugin&quot;</span>: <span class="string">&quot;^1.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url-loader&quot;</span>: <span class="string">&quot;^1.1.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;^2.7.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue-template-compiler&quot;</span>: <span class="string">&quot;^2.7.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.10.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;babel-preset-env&quot;</span>: <span class="string">&quot;^1.7.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue-loader&quot;</span>: <span class="string">&quot;^14.2.2A&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^3.6.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一般我们需要使用到一下几个插件：</p><p>html-webpack-plugin（生成index.html文件）、bannerplugin(webpack自带)、uglifyjsj-webpack-plugin（压缩bandle文件）</p><p>它们安装的方法类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev html-webpack-plugin@2.30.1 uglifyjsj-webpack-plugin@1.1.1</span><br></pre></td></tr></table></figure><p>在安装插件的时候一定要注意我们使用的webpack和其对应的插件版本，一般版本不对就会出现找不到文件或者是无法解析对象的问题，所以我这里就针对3.6.0版本的webpack安装的上面的几个插件；</p><p>另外，安装完了还需要配置，方式也差不多，先看bannerplugin，它的作用是生成一个标注：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/main/print-screen/%E6%A0%87%E6%B3%A8%E6%8F%92%E4%BB%B6.png?raw=true" alt="image-20220808142916220"></p><p>这是bundle文件的一个声明，我们只需在webpack.comfig.js中配置一下即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&#x27;最终版权归Tony所有！&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>:<span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">//new UglifyjsWebpackPlugin()</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>plugins是和modules平行的一个属性，在里面我们需要配置插件对象，第一个就是使用webpack的bannerplugin就可以了，在构造函数里面写上自己想要声明的字符串就可以了；</p><p>htmlwebpackplugin的作用大家看效果：</p><p><img src="https://github.com/Tony-hurry/imageBad/blob/main/main/print-screen/202208271618778.png?raw=true" alt="image-20220808143230234"></p><p>可以看到执行打包命令之后就在dist文件夹下面生成了一个index.html文件，它的配置就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin=require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line"> plugins:[</span><br><span class="line">    new webpack.BannerPlugin(&#x27;最终版权归Tony所有！&#x27;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template:&#x27;index.html&#x27;</span><br><span class="line">    &#125;),</span><br><span class="line">    //new UglifyjsWebpackPlugin()</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>因为使用了模板文件，就是在src下面的index.html，所以在打包的时候会自动打包一个index.html文件和scr下面的差不多；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;en&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&#x27;X-UA-Compatible&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;IE=edge&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;width=device-width, initial-scale=1.0&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>他会自动生成一个script引入的bundle.js文件，而且是没有加dist的，之前我们为了加上dist做了一个操作，现在可以复原了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//开发中index文件分离，所以我们要加一个条件才能正常显示</span></span><br><span class="line"><span class="comment">// publicPath: &#x27;dist/&#x27;</span></span><br></pre></td></tr></table></figure><p>publicPath是webpack.config.js文件下面的一个output属性的一个对象属性，作用就是在导入的文件中加上dist路径；</p><p>uglifyjs.webpackl.puligin一般我们是不在编写的时候使用，因为这个插件是压缩bundle.js文件的，自动删除空格和注释，而且更改变量名为一些简单的符号，可读性大大降低。</p><h5 id="6、搭建本地服务器（webpack-dev-server）"><a href="#6、搭建本地服务器（webpack-dev-server）" class="headerlink" title="6、搭建本地服务器（webpack-dev-server）"></a>6、搭建本地服务器（webpack-dev-server）</h5><p>有时候我们更改代码的时候就要执行打包命令非常的烦，那么webpack可不可以像node一样搞一个服务器可以监听然后自动刷新打包呢？答案是肯定的，那就是我们的webpack-dev-server工具了，老样子先安装在配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev webpack-dev-server@2.9.3</span><br></pre></td></tr></table></figure><p>需要在webpack.config.js里面更改配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">contentBase</span>:<span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">  <span class="attr">inline</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这个属性和modules平行，意义就是为dist文件服务，而且在线，也就是一直监听代码变化，会自动打包；</p><p>还要添加一个映射，用来开启服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这个在package.json文件中，之前我们使用num run build的时候就是在这里配置的，同样我们在这里配置一个dev用来启动服务器，上面的代码意思就是再执行命令的时候启动服务器并会在浏览器中打开 –open的意思。</p><h5 id="7、分离配置文件写法"><a href="#7、分离配置文件写法" class="headerlink" title="7、分离配置文件写法"></a>7、分离配置文件写法</h5><p>有时候我们在开发的时候有开发时候的配置，在发行的时候又有发行时候的配置，比如我们写代码就不希望压缩bundle文件，方便我们在浏览器中的调试，所以就可以通过分离写法来满足我们在不同条件下面的配置要求；</p><p>想要用分离写法就需要一个合并js文件的工具webpack-merge，第一步安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev webpack-merge@4.1.5</span><br></pre></td></tr></table></figure><p>先来讲解一下思路，我们可以创建一个build文件夹，下面放有base.config.js、prod.config.js、dev.config.js，在后面的两个文件里面使用这个工具来合并base.config.js达到实现不同需求的效果，而prod文件里面就放有打包的代码，dev文件里面就放有服务器的代码：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/main/print-screen/202208271616505.png" alt="image-20220808164155127">)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带有服务器的配置</span></span><br><span class="line"><span class="comment">//导入合并工具和base配置文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebpackMerge</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BaseConfig</span> = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">WebpackMerge</span>(<span class="title class_">BaseConfig</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">      <span class="attr">contentBase</span>:<span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">      <span class="attr">inline</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这里一dev文件为例，通过导入工具和公共配置base，然后合并一下就可以使用了，公共配置文件无非就是将之前我们需要有条件使用的配置代码抽离出来后的一些代码，一般不需要变动的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="comment">//导入html插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span>=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//开发中index文件分离，所以我们要加一个条件才能正常显示</span></span><br><span class="line">   <span class="comment">// publicPath: &#x27;dist/&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="comment">// mode: &#x27;development&#x27;,//设置mode</span></span><br><span class="line">  <span class="comment">//配置loader</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">//注意顺序，因为loader[&#x27;style-loader&#x27;, &#x27;css-loader&#x27;]是从右到左读取的</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">//url:false,</span></span><br><span class="line">              <span class="attr">esModule</span>: <span class="literal">false</span>, <span class="comment">//解决生成多余文件问题</span></span><br><span class="line">              <span class="attr">importLoaders</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: <span class="string">&#x27;less-loader&#x27;</span> &#125;,</span><br><span class="line">      <span class="comment">//配置url-loader</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">limit</span>: <span class="number">1300</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//配置babel-loader</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//配置vue-loader</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">use</span>:&#123;</span><br><span class="line">          <span class="attr">loader</span>:<span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>:&#123;</span><br><span class="line">          </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&#x27;最终版权归Tony所有！&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>:<span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">  </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们就不需要webpack.config.js配置文件了，我们可以删了它，然后修改映射命令即可，这里还有一个细节，就是导出的路径有一点点小变化，这里创建了文件夹，将配置文件放在build里面，我们不想导出dist到这里，而是上一级文件夹，所以在导出路径的前面加上..&#x2F;;</p><p>修改映射命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config ./build/dev.config.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config ./build/dev.config.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>因为默认配置文件不在了，所以我们就制定需要执行的配置文件–config 接上配置文件路径。</p><h3 id="16、脚手架vue-cli"><a href="#16、脚手架vue-cli" class="headerlink" title="16、脚手架vue cli"></a>16、脚手架vue cli</h3><p>既然是一个工具，那么我们也需要先安装它，可以将脚手架放在全局下，而且使用的是cli2创建项目，目前流行的是cli3，所以我们直接安装的是cli3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure><p>所以需要拉取一下旧的cli模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line">更改镜像源会快一点</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>详情可以参考cli.vuejs.org.</p><p>1、创建项目</p><p>我们在项目文件夹下面打开命令行，然后输入创建项目的命令，当然是cli2的命令，要注意cli3和cli2的命令很大程度上是不同的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init webpack 项目名</span><br></pre></td></tr></table></figure><p>然后就会弹出很多选项：</p><p><img src="https://github.com/Tony-hurry/imageBad/blob/main/main/print-screen/202208271615959.png?raw=true" alt="image-20220809153009067"></p><p>第一个是项目名，一般不用该就是命令中的，第二个是描述信息，自己填写就行，第三个是就是作者，在全局下有一个默认的gitconf文件，里面存放着作者信息，可以到哪里修改，第三个有两个选项，第一个是运行加编译，提示为大多数人使用，但它更加复杂，后面一个是只运行时，代码更小，运行也快；这里我选择的是第一个，所以弹出了路由、测试等的选项，这里我们暂时选没有，最后包管理使用的是npm工具，等待构建完成即可；</p><p>我们再来看看cli3的创建，输入一下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure><p>然后出现了这样的：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/create-cli3-01.png?raw=true" alt="image-20220830132511524"></p><p>要注意这里我之前使用过的，所有有一些模板： a model of cli preset() 后面我们也会遇到，这里我们通过箭头和回车选择最后一项，表示我们要自己配置项目：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/create-cli3-02.png?raw=true" alt="image-20220830132656215"></p><p>注意这里，我们项目想要实现什么功能是和这里息息相关的，一般babel是要勾选的，这里有一个功能，主要是解决兼容问题：</p><p>Babel是一个<strong>JS编译器</strong>，主要作用是将ECMAScript 2015+ 版本的代码，转换为向后兼容的JS语法，以便能够运行在当前和旧版本的浏览器或其它环境中。 Vue项目中普遍使用ES6语法，若要求兼容低版本浏览器，就需要引入Babel，将ES6转换为ES5。</p><p>Linter是用来测试用的，不要勾选，<strong>我们勾选的时候按下空格就可以了</strong></p><p>这一次我们先选择router和babel其他的后面遇到我们在说；</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/create-cli3-03.png?raw=true" alt="image-20220830133147907"></p><p>选择3.x,回车，然后：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/create-cli3-04.png?raw=true" alt="image-20220830133627294"></p><p>这里问到我们需要使用的路由模式，history和hash是路由的两个常用模式，因为路由主要功能是配置映射关系，到后面就知道了，我们通过修改url地址来实现，但是要通过更改url又不会刷新页面，只能使用路由的这两个模式，这里我们使用history，它默认时hash的，主要是更改url是的一点点区别；</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/create-cli3-05.png?raw=true" alt="image-20220830133959450"></p><p>问我们是否需要独立配置文件，有时候有一些文件的配置文件我们不想要放在一个配置文件下面，我们就需要独立开来，我们选择第一个；</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/create-cli3-06.png?raw=true" alt="image-20220830134117302"></p><p>这里问我们是否保留这次的配置，想保留就保留呗；</p><p>回车之后就自动构建项目了，等待就可以了；</p><h3 id="17、项目结构和用途"><a href="#17、项目结构和用途" class="headerlink" title="17、项目结构和用途"></a>17、项目结构和用途</h3><p>因为我们选了router，所以会在src下面看到一个router文件夹，下面有一个index.js的文件。</p><p>科普一下，前段路由和后端路由，路由主要是用来配置映射关系的，实现一些数据的转发，就像是我们发短信的时候，先通过公网找到目标所在公网的ip，然后在公网的下面还有内网，常见的192.168就是内网分配的ip，严格来说只有公网下面的ip才是唯一的，所以我们可以看到我们的电脑可以配置的ip，别人的电脑也是可以的，在不同的内网下面；</p><p>以前网站的映射功能是由后端路由处理的，那个时候使用的是jsp通过Java代码和前段代码的结合，在服务器上写好了网页之后放到浏览器上就可以了，于是后端做了大部分工作，于是就叫做后端路由；</p><p>后来出现了前后端分离，使用就是jQuery和Ajax请求，这个时候前后端分工就明确了，前段负责网页，后端负责数据但是路由依然还是在服务器上，学过node的就知道，我们接收和Ajax的时候是通过服务器接受的，然后返回数据；</p><p>最后有了单页面富应用（SPA）技术，有了前端路由，我们可以通过前段来刷新数据了，请求和回复数据都是前段写的；</p><p>现在我们来走进项目里面具体的看看前段路由如何实现数据的属性和访问的：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/vue-project.png?raw=true" alt="image-20220830135240152"></p><p>这是项目的结构，可以看到router下面有一个index.js文件，其实这里面写的就是关于路由的一些映射关系，只不过映射的是一个一个的组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 导入路由创建模块和模式选择模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//1.2 导入我们需要使用到的组件模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="comment">//1.3 写好路由映射关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//1.4 创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">linkActiveClass</span>:<span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//1.5 导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<strong>这里的路由配置参数是routes，不是routers！</strong>不然的话后面在使用routers-view的时候会被注释掉；</p><p>要知道我们的url的改变就是通过history，这是vue下面的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  &lt;nav&gt;</span></span><br><span class="line"><span class="comment">    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; replace&gt;Home&lt;/router-link&gt; |</span></span><br><span class="line"><span class="comment">    &lt;router-link to=&quot;/about&quot; tag=&quot;button&quot; replace&gt;About&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">  &lt;/nav&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickHome&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickAbout&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">clickHome</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.1 使用组件挂载的route属性改变url</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/home&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">clickAbout</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/about&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>:<span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vue-router插件会在所有的组件下面挂载一个router属性，通过这个属性我们可以调用切换url的方法，这里使用的是history，我们就可以调用</p><p>this.$router.replace(‘&#x2F;home’)方法，到在我们访问的url下面添加&#x2F;home，来实现更改的目的，然后路由检测到了这个变化，就会将映射的组件显示到我们的<router-view/>标签的位置上，当然我们直接使用<router-link>标签也是没有问题的</p><p>这里要知道vue实现这种更改url实现页面更改的内在逻辑，就是通过vue-router的history的方法改变了url，然后路由映射了这个地址对应的组件，于是就会显示相应的数据了；</p><p>组件我们放在一个组件文件夹下面，和Vue.vue一样是一个vue文件：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/components-model.png?raw=true" alt="image-20220830140316111"></p><p>这种文件含有三个部分，分别是template、script、style，按照上面的模板写就可以了；</p><p>router文件夹下面放了一个index文件是我们的路由映射文件，我们在里面写好我们的映射代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 导入路由插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">/* import Home from &#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="comment">import About from &#x27;../components/About&#x27;</span></span><br><span class="line"><span class="comment">import User from &#x27;../components/User&#x27; */</span></span><br><span class="line"><span class="comment">//2.1 路由懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../components/About&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">User</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../components/User&#x27;</span>)</span><br><span class="line"><span class="comment">//1。2 配置映射关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:userid&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//1.3 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">linkActiveClass</span>:<span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//1.4 导出模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里很多代码是vue的内容，但是语法就是原生的js代码，所以具有js基础的小伙伴比较容易看懂，因为这是框架，关于基础知识的学习，大家有时间还是自己去看看，这里我就不给大家讲解了；</p><p>总而言之，写好这个路由文件就三步，导入组件，创建映射对象，再是路由对象的配置和导出，用法就按照上面来就可以了，使用的是ES6的语法，映射对象是一个对象数组，每一个数组元素中都含有组件对象和path，这个path是用来拼接成url地址的；</p><h4 id="1、动态路由"><a href="#1、动态路由" class="headerlink" title="1、动态路由"></a>1、动态路由</h4><p>从映射数组中可以看到一个不一样的映射：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/user/:userid&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个冒号，其实后面相当于参数占位的作用一样，来看Vue文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  &lt;nav&gt;</span></span><br><span class="line"><span class="comment">    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; replace&gt;Home&lt;/router-link&gt; |</span></span><br><span class="line"><span class="comment">    &lt;router-link to=&quot;/about&quot; tag=&quot;button&quot; replace&gt;About&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">  &lt;/nav&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickHome&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickAbout&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickUser&quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>:<span class="string">&#x27;tony&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">clickHome</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.1 使用组件挂载的route属性改变url</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/home&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">clickAbout</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/about&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">clickUser</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&quot;/user/&quot;</span>+<span class="variable language_">this</span>.<span class="property">id</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>:<span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在clickUser单击函数下面有一个路由的使用，通过的是history的方式来修改了路径，后面接上的是id参数，这是data下面的一个属性，这就说明这个url是动态的，他会随着id的改变而改变，达到了动态路由需要的效果，比如一些网站的用户中心，虽然每个用户的id不一样，但是进入的都是用户中心这个组件中；</p><h4 id="2、懒加载"><a href="#2、懒加载" class="headerlink" title="2、懒加载"></a>2、懒加载</h4><p>什么是懒加载呢？就是在使用到组件的时候在加载组件，所以之前路由文件下面为什么使用常量和箭头函数来加载组件，为的是让项目多打几个分包，也就是将导入的组件每一个都会产生一个js文件，这样的话用到的时候向服务请求就可以增加访问的效率，提高体验：</p><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/mian/vue-baselearning/lazyloding.png" alt="image-20220831165955788"></p><p>这是dist下面的js代码，dist文件是我们运行了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>之后vue将项目打包之后生成的有一定结构可以发布的项目了，这里面有很多的js文件，可以看到有app、chunk-vendors，还有一些数字开头的，app是对应项目里面那个VUe文件的js代码，而chunk-vendors是第三方插件之类的js代码，比如vue-router，而其他四个其实就是我们刚刚在index文件下面懒加载的四个映射对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../components/About&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">User</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../components/User&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user/:userid&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>因为只有三个组件，但有四个映射对象使用了，所以会有四个js文件；</p><h4 id="3、参数的传递"><a href="#3、参数的传递" class="headerlink" title="3、参数的传递"></a>3、参数的传递</h4><p>router有两种数据的传递方式，一种是通过parames之前讲动态路由的哪一种方式，也是通过动态绑定的，不过就是通过$route.parmas这个对象来引用的；</p><p>第二种是query的方式，也就是查询的方式，在完整的url中，query占了其中一部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://host:port/path?query#fragment</span><br></pre></td></tr></table></figure><p>一般我们使用的地址是https，后面依次跟着的是主机名、端口、路径、查询、片段，片段就是我们之前讲到过的hash</p><p>那么如何来使用这个传递方式呢？</p><p>首先我们创建一个名为Profile的组件，这是规范，配置好路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;我是query&lt;/h2&gt;</span><br><span class="line">  &lt;div class=&#x27;gree&#x27;&gt;welcome visit here&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;$route.query.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;$route.query.age&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;$route.query.score&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;profile&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.greet &#123;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>query是通过挂载的route对象的query对象的属性来传递数据的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/profile&#x27;, query:&#123;name:&#x27;tony&#x27;,age:&#x27;20&#x27;,score:30&#125;&#125;&quot;</span> &gt;</span>query<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然你也可以这样使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">clickQuery</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//通过单击事件监听实现跳转，直接将path变为对象就可以了</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">            <span class="attr">query</span>:&#123;</span><br><span class="line">              <span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,</span><br><span class="line">              <span class="attr">age</span>:<span class="string">&#x27;20&#x27;</span>,</span><br><span class="line">              <span class="attr">score</span>:<span class="string">&#x27;100&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>很明显的可以看到我们有使用this.$router和this.$route，这两者有什么区别呢？</p><p>我告诉大家，其实前者就是我们写的那个路由文件导入的路由对象，它的router类里面有封装好我们使用的一系列跳转方法，后者其实是当前活跃的一个路由元素，我们写的映射会被自动添加到这个对象的属性下面；</p><p>那么，之前我们使用的route-link和router-view又是怎么挂载到全局的呢？</p><p>很简单，vue.component();就可以实现，那么router和route这两个对象又是怎么运用到全局的，其实就是通过原型的挂载方式，因为所有的vue组件都继承自vue，所以在原型上面挂载这属性对于所有的vue组件都生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineproperty(vue.property,&#x27;$router&#x27;,&#123;...&#125;)</span><br></pre></td></tr></table></figure><p>4、导航守卫</p><p>导航守卫有三种：<strong>全局守卫、路由守卫、组件内守卫</strong>，它们的写法一致，只是放的位置不一样而已，而守卫有前置的有后置的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span>=to.<span class="property">matched</span>[<span class="number">0</span>].<span class="property">meta</span>.<span class="property">title</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//后置守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is the afterEach&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前置的有三个参数，比后置多了一个next函数，调用的时候我们可以传递一个url参数，这个参数表示的是下一步执行的位置，如果我们将这两个函数放在路由映射文件下面，就称之为全局守卫，这里明显是放在全局，因为是通过route点出来的，如果是放在映射元素的下面就是路由独享守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Profile</span>,</span><br><span class="line">    <span class="attr">meta</span>:&#123;</span><br><span class="line">      <span class="attr">title</span>:<span class="string">&#x27;查询&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">afterEach</span>:<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is the afterEach of profile&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>举一反三，那么组件守卫当然就是放在组件下面的；这里有一个meta，主要是用来存放我们要显示的标题，叫做元数据，是一种用来描述数据的数据；</p><h4 id="4、keep-alive"><a href="#4、keep-alive" class="headerlink" title="4、keep-alive"></a>4、keep-alive</h4><p>这是一个用来保存组件状态的标签，在vue的生命周期里面，默认是我们点击跳转了页面之后，原来页面显示的组件就会被销毁，而通过keep-alive可以将组件保留，那么下次切换回来的时候就可以保存原来的状态显示；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是它的使用方法，以前的话直接使用keep-alive包裹到router-view就可以了，现在可以能是版本问题，不支持那种写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>于是我们可以通过这个特点实现页面跳转保留原来状态的功能：</p><p><img src="https://github.com/Tony-hurry/imageBad/blob/main/mian/vue-baselearning/keepalive.gif?raw=true" alt="keep-alive"></p><p>不过想要实现可不是一个keep-alive就可以实现，我们还需要在跳转回来的时候通过代码将路径改成之前没跳转的路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">activated</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;home activited&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">path</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;home deactivited&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">path</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是组件下面的js代码，想要那个组件实现这个功能就在那个组件下面加上代码就可以了，只有加了keep-alive之后activated和deacitvated两个函数才会生效；而后面的路由守卫是我们保存之前path的作用，在每次跳转回来的时候就可以自动跳转到这个path上面，因此实现了这个功能；</p><p>有时候我们<strong>多个跳转连接之间有的想要被缓存有的又不想缓存，那就要运用到keep-alive的包含和排除属性了</strong>，include和exclude，只要将模块的导出名写在后面就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">  &lt;keep-alive exclude=&quot;profile&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;Component&quot; /&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="18、tabbar项目结构的制作"><a href="#18、tabbar项目结构的制作" class="headerlink" title="18、tabbar项目结构的制作"></a>18、tabbar项目结构的制作</h3><p>tabbar就是我们常见的一种移动端购物app等的常见的结构：</p><p>在做项目的时候，插槽会用到非常的多，还记得怎么使用插槽吗？它是在一个组件上要插入的地方加入slot标签，可以是具名的，然后在要是用的组件中使用这个组件，然后在使用的组件对应的位置上放入我们想要展示的代码，</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122255393.png" alt="image-20220911070920707"></p><p>大概的样子就是这样的，我们可以点击下面的导航按钮然后显示不同的组件；</p><h4 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h4><p>我们就使用vue2开发，首先进入项目文件夹，打开命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack tabbar</span><br></pre></td></tr></table></figure><p>等待项目的构建，这里之前我们讲过，不过这里我们需要路由插件，所有在询问道是否安装路由模块的时候，我们敲y回车就可以了，等待构建；</p><p>完成了之后先点击APP文件，将里面不需要的代码删除，还有components文件夹下面的组件也删除，然后自己创建一个tabbar文件夹，里面存放我们这个功能的公共组件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122255152.png" alt="image-20220911070811509"></p><p>暂时创建这两个文件，它们就是下面的导航按钮，我们可以将那个灰色的长标签看做是一个Tabbar组件，然后他有一个插槽，里面存放的就是TabBarItem这个组件，有四个，当然也可以设置更多，vue是相当的灵活：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;tabbar&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;tabbar&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#tabbar&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  position: fixed;</span><br><span class="line">  background-color: #f6f6f6;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  box-shadow: 0 -2px 1px rgba(100, 100, 100, .1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>灰色条组件很简单，就上面的代码，设置一下定位和背景色，当然常用的弹性布局不要忘了；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;tabbar-item&quot; @click=&quot;oncilck&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;!isactive&quot;&gt;&lt;slot name=&quot;tabbar-icon&quot;&gt;&lt;/slot&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;&lt;slot name=&quot;tabbar-icon-active&quot;&gt;&lt;/slot&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div :style=&quot;activestyle&quot;&gt;&lt;slot name=&quot;tabbar-text&quot;&gt;&lt;/slot&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;tabbaritem&#x27;,</span><br><span class="line">  props:&#123;</span><br><span class="line">    link:String,</span><br><span class="line">    activecolor:&#123;</span><br><span class="line">      type:String,</span><br><span class="line">      default:&#x27;red&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      /* isactive:true */</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    oncilck()&#123;</span><br><span class="line">      this.$router.replace(this.link)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    isactive()&#123;</span><br><span class="line">      return this.$route.path.indexOf(this.link) !== -1</span><br><span class="line">    &#125;,</span><br><span class="line">    activestyle()&#123;</span><br><span class="line">      return this.isactive?&#123;color:this.activecolor&#125;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .tabbar-item&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    height: 49px;</span><br><span class="line">  &#125;</span><br><span class="line">  .tabbar-item img&#123;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height:24px;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这个就是放在长组件插槽里面的组件了，还有比较复杂的，首先样式要有，我们使用两个div将图片和文字包裹起来，也是为了后面替换样式动态决定属性的，因为有用户自己修改，所以我们不可以直接放在插槽上面，我们知道使用插槽的时候后面的代码会直接替换这个插槽，所以有必要将它们包装起来；</p><p>样式就是像上面这样设置，js代码中还是比较全面的，之前学习组件传递的时候的props属性，可以在组件之间传递数据，还有我们需要根据其他值改变而改变的样式或者属性就可以放到计算属性中，直接使用就可以了；</p><h4 id="2、路由配置"><a href="#2、路由配置" class="headerlink" title="2、路由配置"></a>2、路由配置</h4><p>来看看我们需要跳转的路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cart</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../views/cart/Cart&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CateGory</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../views/category/CateGory&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../views/home/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Profile</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="string">&#x27;../views/profile/Profile&#x27;</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">CateGory</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/cart&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Cart</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Profile</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>:<span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然还是使用的懒加载，从图片上可以看到有四个跳转的，首页，我的，购物车和分类，所以我们直接写四个组件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122255768.png" alt="image-20220911070739683"></p><p>因为它们功能都比较独立的原因，我们直接创建一个views文件夹，在里面在创建响应的文件夹，在相应的文件夹下面在创建需要的组件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;购物车&lt;/h2&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;cart&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这几个组件暂时就写这些简单的代码就可以了；</p><p>使用懒加载将路由的映射写好之后，设置路由的模式为history就可以导出了；</p><h4 id="3、加载的元素"><a href="#3、加载的元素" class="headerlink" title="3、加载的元素"></a>3、加载的元素</h4><p>然后就是我们要显示的东西了，先准备需要的图片，这里有两张，一张是没有点击时候显示的，一张是点击之后处于活跃状态时候显示的：</p><p><img src="https://github.com/Tony-hurry/imageBad/blob/main/mian/vue-baselearning/tabbar04.png?raw=true" alt="image-20220904083040810"></p><p>src下面的assets创建好这个tabbar文件夹，里面创建一个css和img文件夹存放资源，css是公共样式，因为浏览器自带样式什么的，我们可以在这个文件里面清除，img就是我们需要使用的两张不同状态的图片；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;tabbar&gt;</span><br><span class="line">      &lt;tabbaritem link=&quot;/home&quot; activecolor=&quot;pink&quot;&gt;</span><br><span class="line">        &lt;img slot=&quot;tabbar-icon&quot; src=&quot;./assets/tabbar/img/home.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;img slot=&quot;tabbar-icon-active&quot; src=&quot;./assets/tabbar/img/home-active.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div slot=&quot;tabbar-text&quot;&gt;首页&lt;/div&gt;</span><br><span class="line">      &lt;/tabbaritem&gt;</span><br><span class="line">      &lt;tabbaritem link=&quot;/cart&quot; activecolor=&quot;pink&quot;&gt;</span><br><span class="line">        &lt;img slot=&quot;tabbar-icon&quot; src=&quot;./assets/tabbar/img/home.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;img slot=&quot;tabbar-icon-active&quot; src=&quot;./assets/tabbar/img/home-active.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div slot=&quot;tabbar-text&quot;&gt;购物车&lt;/div&gt;</span><br><span class="line">      &lt;/tabbaritem&gt;</span><br><span class="line">      &lt;tabbaritem link=&quot;/category&quot; activecolor=&quot;pink&quot;&gt;</span><br><span class="line">        &lt;img slot=&quot;tabbar-icon&quot; src=&quot;./assets/tabbar/img/home.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;img slot=&quot;tabbar-icon-active&quot; src=&quot;./assets/tabbar/img/home-active.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div slot=&quot;tabbar-text&quot;&gt;分类&lt;/div&gt;</span><br><span class="line">      &lt;/tabbaritem&gt;</span><br><span class="line">      &lt;tabbaritem link=&quot;/profile&quot; activecolor=&quot;blue&quot;&gt;</span><br><span class="line">        &lt;img slot=&quot;tabbar-icon&quot; src=&quot;./assets/tabbar/img/home.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;img slot=&quot;tabbar-icon-active&quot; src=&quot;./assets/tabbar/img/home-active.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div slot=&quot;tabbar-text&quot;&gt;我的&lt;/div&gt;</span><br><span class="line">      &lt;/tabbaritem&gt;</span><br><span class="line">    &lt;/tabbar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import tabbar from &#x27;./components/tabbar/Tabbar.vue&#x27;</span><br><span class="line">import tabbaritem from &#x27;./components/tabbar/TabBarItem.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    tabbar,</span><br><span class="line">    tabbaritem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">@import &quot;./assets/tabbar/css/base.css&quot;;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里就可以开始使用插槽了，先导入两个tabbar组件，这是App代码，到components中注册一下，就可以在html部分使用了，公共样式在style部分导入，然后就是要注意参数的传递，插槽的使用参考一下代码就可以了，对应的位置，对应的标签就可以了，很多可以自己修改的，还有props，这就是在组件的属性上直接加就可以了，名称相同后面就会接收到；</p><p>路径取别名，我们可以在：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122255026.png" alt="image-20220911071046436"></p><p>目录下面的这个webpack.base.conf.js文件中找到代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;assets&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/assets&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;components&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;views&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/views&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>添加自己想要的路径就可以了，就按照这样的方式就可以了，使用的话就很方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tabbaritem link=&quot;/home&quot; activecolor=&quot;pink&quot;&gt;</span><br><span class="line">      &lt;img slot=&quot;tabbar-icon&quot; src=&quot;~assets/tabbar/img/home.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;img slot=&quot;tabbar-icon-active&quot; src=&quot;~assets/tabbar/img/home-active.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot=&quot;tabbar-text&quot;&gt;首页&lt;/div&gt;</span><br><span class="line">    &lt;/tabbaritem&gt;</span><br></pre></td></tr></table></figure><p>这里使用的直接是别名，<strong>有一个~这是src的固定写法</strong>，需要加上去才能生效；</p><h3 id="19、promise的学习"><a href="#19、promise的学习" class="headerlink" title="19、promise的学习"></a>19、promise的学习</h3><p>promise是一个类，可以说是一个异步编程的包装类，我们知道同步编程（sync）就是平时编译器从上往下执行的那种方式，容易出现的一个问题就是请求堵塞，而异步编程（async）就不会，很典型的就是settimeout函数，他可以延迟代码的执行，因为算作异步执行的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;response 200&#x27;</span>)</span><br><span class="line">        <span class="comment">//reject(&#x27;err message&#x27;)</span></span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这是promise的常见用法，传入一个函数作为参数，而这个参数又有两个参数同样也是两个函数，在promise的参数里面调用settimeout函数实现异步，如果请求成功的话我们就调用resolve函数，它会跳转到then函数的第一个参数里面执行代码，如果请求失败就调用reject函数，就会跳转到then的第二个参数里面执行；</p><h4 id="1、promise执行的三个状态"><a href="#1、promise执行的三个状态" class="headerlink" title="1、promise执行的三个状态"></a>1、promise执行的三个状态</h4><p>想要更深入理解promise，我们要知道它的三个状态：pending(等待请求状态)、fulling(请求成功状态)、reject(请求失败状态)</p><h4 id="2、promise的链式调用"><a href="#2、promise的链式调用" class="headerlink" title="2、promise的链式调用"></a>2、promise的链式调用</h4><p>使用这个包装类的好处之一就是实现链式调用，他可以一直点下去，可以使then函数，也可以是catch：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//1.1 promise的链式调用</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">reslove</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;请求失败&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">/*         return new Promise(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">          console.log(res)</span></span><br><span class="line"><span class="comment">        &#125;) */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello vscode&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;). <span class="keyword">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err,<span class="string">&#x27;捕获异常&#x27;</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>注意看这里的格式，我们使用reslove时就只会跳转到then当中，而且时顺序执行的，也就是说如果throw在resolve后面的话就会直接忽略，我们就捕获不到这个异常；<strong>可以直接return一个字符串，默认就是调用了reslove并且传的参数就是这个字符串；</strong></p><h4 id="3、promise-all的使用"><a href="#3、promise-all的使用" class="headerlink" title="3、promise.all的使用"></a>3、promise.all的使用</h4><p>这个函数的作用就是当有多个请求过来的时候，可以等拿到全部返回结果在进行数据的处理，如果我们不用这个函数的话，就需要定义一系列的变量来记录才能实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.2 promise.all 的使用</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reslove</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;)</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reslove</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    ]).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>可以看到在这个函数里面我们创建了多了包装类，它们分别可以包装请求，然后返回响应，只有拿到全部结果的时候，就可以执行下面的语句，result是一个数组，存放着上面的所有回应数据；</p><p><img src="/tony.github.io/home/Tony/.config/Typora/typora-user-images/image-20220906163813580.png" alt="image-20220906163813580"></p><h3 id="20、vuex的学习"><a href="#20、vuex的学习" class="headerlink" title="20、vuex的学习"></a>20、vuex的学习</h3><p>这是一个状态管理插件，用在很多页面互相访问或者自己需要更改的时候，就相当于一个院子里的大管家，首先我们先安装这个插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>因为再多页面应用的时候可能需要页面间的互相访问，这就需要获取到各自的状态，所以就有了vuex这个管理插件，它主任务就是规定各种状态和一些行为方法，然后很多页面共享这么一个对象，话不多说，直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="title function_">addition</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">subtraction</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      state.<span class="property">count</span>--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>在项目下面创建一个叫做store的文件夹，因为我们使用vuex时候具体使用的是vuex下面的Store对象，然后创建一个index.js文件，就和router的使用一样，毕竟都是vue下面的插件，所有都到导入vue来use一下，这里要了解一下store的下面的一些属性，主要是通过state、mutation、action来实现的各个界面状态的改变和共享，vue官方推荐的处理方式是通过mutation提交事务的方式来处理state里面的状态，当然你是可以直接更改里面的状态，但是不推荐，因为不好跟踪，不利于维护和修改；</p><p>关于这三者的关系可以用一幅图来解释：</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20210301205229917.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FfQm93%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1665110774&t=6b57d52a869d137b4a63b91c9ee99433" alt="点击查看图片来源"></p><p>可以看到左边是vue的一些组件，action就是一些交互方式，它依赖了mutation，mutation是一些事务一般是和state挂钩的，毕竟需要更改这些状态，所以它又依赖了state，state就存放着一些变量来保存那些状态，devtools是一个插件，vue官方推出的，可以再浏览器的插件商城里面下载，他的使用也很简单，安装插件之后：</p><p><img src="/tony.github.io/home/Tony/.config/Typora/typora-user-images/image-20220907104947834.png" alt="image-20220907104947834"></p><p>在调试器的旁边就会出现一个vue的选项，这里可以跟踪一些组件的信息和vuex的状态改变方式；</p><p>使用也很简单，我们在mian.js里面向所有的vue组件挂在了store这个对象，就和router一样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就可以在组件下面进行事务的提交：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">incremet</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addition&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">decremet</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;subtraction&#x27;</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="1、getters的使用"><a href="#1、getters的使用" class="headerlink" title="1、getters的使用"></a>1、getters的使用</h4><p>state是用来存放变量的，mutation是用来更改状态的，也就是更改state中的变量，<strong>那么getters就是相当于计算属性</strong>，用来处理需要变化后显示的变量的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>:&#123;</span><br><span class="line">  <span class="title function_">getmoresco</span>(<span class="params">state</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="params">bar</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(</span><br><span class="line">        <span class="function"><span class="params">s</span>=&gt;</span>s.<span class="property">score</span>&gt;bar</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; ,</span><br><span class="line">  <span class="title function_">getstulength</span>(<span class="params">state,getters</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> getters.<span class="property">getmoresco</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里是通过两个函数来实现对state中的学生对象进行筛选，然后计算一下长度：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;------------getters的测试&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;$store.getters.getmoresco(75)&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;$store.getters.getstulength&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>用法也很简单，直接通过挂在的store直接调用就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">students</span>:[</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&#x27;bob&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;man&#x27;</span>,<span class="attr">score</span>:<span class="number">90</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;femal&#x27;</span>,<span class="attr">score</span>:<span class="number">95</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;man&#x27;</span>,<span class="attr">score</span>:<span class="number">85</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&#x27;mike&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;man&#x27;</span>,<span class="attr">score</span>:<span class="number">70</span>&#125;]</span><br></pre></td></tr></table></figure><p>用了很多的箭头函数，不仅简化了代码，而且很灵活的使用，getmoresco函数使用了多个箭头函数传参和返回，后面一个filter的作用就是前面讲过的筛选的作用，括号里如果是false的话就会过滤掉这个元素；</p><h4 id="2、解决响应式"><a href="#2、解决响应式" class="headerlink" title="2、解决响应式"></a>2、解决响应式</h4><p>之前我们也接触过，因为有些数据操作是做不到响应式的，先让我们了解一下什么是响应式吧；</p><p>也就是当数据变化的时候相应界面的显示也是会变化的，刷新页面，在使用vuex的时候，我们知道放在store.state中的所有数据都是响应式的，毕竟它们的改变是会刷新界面的，我们不管通过mutation改变还是直接改变都是会刷新的，但是如果我们想要添加数据就不一定了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inserthero</span>(<span class="params">state,payload</span>)&#123;</span><br><span class="line">  state.<span class="property">hero</span>.<span class="property">score</span>=payload.<span class="property">score</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这里的事务，就是mutation里面的一个非响应式的，也就是这里数据会改变，但是不会刷新页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hero</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;spider&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><p>我们想要给state中的数据hero添加一个score的属性，但是直接挂载是非响应式的，那么我们可以怎么让他变成响应式呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inserthero</span>(<span class="params">state,payload</span>)&#123;</span><br><span class="line">  <span class="comment">//state.hero.score=payload.score</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">set</span>(state.<span class="property">hero</span>,<span class="string">&#x27;score&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看代码就很明了了，<strong>就是使用vue提供的set函数了</strong>，有三个参数，第一个是你想要修改的对象，第二个是属性，第三个就是值了；</p><p>那么删除呢？我们之前可以使用delete语句直接删除一个对象的属性，但这里要做到响应式这样可不行，我们一样的，使用vue提供的方法不就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">deletehero</span>(<span class="params">state,payload</span>)&#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">delete</span>(state.<span class="property">hero</span>,payload.<span class="property">target</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确实可以的，这就是通过vue提供的方法来实现响应式数据修改的两个方法，这里还有一个小插曲，就是我们数据传递的时候还有一个叫<strong>做负载（payload）的东西，我们其实可以通过提交一个对象的方式来提交mutation里面的事务：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">deletehero</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;deletehero&#x27;</span>,</span><br><span class="line">    <span class="attr">target</span>:<span class="string">&#x27;score&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>type就是我们要提交的事务的类型，后面就是挂在到负载payload对象上的属性；</p><h4 id="3、拷贝mutation事务麻烦处理"><a href="#3、拷贝mutation事务麻烦处理" class="headerlink" title="3、拷贝mutation事务麻烦处理"></a>3、拷贝mutation事务麻烦处理</h4><p>的确在我们写mutation的时候，使用起来比较困难，因为需要翻过去拷贝才不容易写错，那有没有一种办法可以不用翻页就可以提交事务呢？当然也不是手写，手写最容易错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INSERTHERO</span>=<span class="string">&#x27;inserthero&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADDITION</span>=<span class="string">&#x27;addition&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">SUBTRACTION</span>=<span class="string">&#x27;subtraction&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADDSTU</span>=<span class="string">&#x27;addstu&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DELETEHERO</span>=<span class="string">&#x27;deletehero&#x27;</span></span><br></pre></td></tr></table></figure><p>当然是有的，我们在store文件夹下面创建一个专门存放变量的js文档，到处里面的所有变量，然后就在多个文件里导入就相当于大家共享这些变量，这样就可以不用翻页复制就可以实现提交事务有不会出错了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INSERTHERO</span>,<span class="variable constant_">ADDITION</span>,<span class="variable constant_">SUBTRACTION</span>,<span class="variable constant_">ADDSTU</span></span><br><span class="line">,<span class="variable constant_">DELETEHERO</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./mutations-types&#x27;</span></span><br><span class="line"></span><br><span class="line">    [<span class="variable constant_">ADDITION</span>](state)&#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">        <span class="title function_">incremet</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="variable constant_">ADDITION</span>)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="4、action处理异步操作"><a href="#4、action处理异步操作" class="headerlink" title="4、action处理异步操作"></a>4、action处理异步操作</h4><p>当要处理请求的时候要使用异步操作来修改状态，但是vuex强调了在mutation里面只能进行同步操作，不能异步，因此就有了action这个属性来专门对付异步操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">  [<span class="variable constant_">ACHANGEACTION</span>](context,payload)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="variable constant_">CHANGEACTION</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(payload)</span><br><span class="line">        <span class="title function_">reslove</span>(<span class="string">&#x27;ok,It is succeed&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>就以settimeout为异步操作，如果想要修改state里的内容，必须通过事务的方式，但有时异步操作，所以应该放在actions里面，只是在action里面进行了事务的提交而已，别的还是一样的；</p><p>要注意几个地方，我们在action里面的函数，使用时要用dispatch提交：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">changehero</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="variable constant_">ACHANGEACTION</span>,<span class="string">&#x27;正在进行，这里是参数列表&#x27;</span>).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作完成&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里跟前面的那副</p><p>对应起来了；</p><p>还有就是这里使用了promise，之前我们讲过这是一个异步操作的封装类，它的特点在于链式调用，也就是当我们执行了resolve函数或者是reject函数之后会调到then函数里面操作，其实这个then函数是可以挂在到别的对象后面的<strong>，这有点像一个锚点，传动门之类的东西：</strong></p><p>可以看到上面代码中后面几挂着一个then，并且打印了一句话；</p><h4 id="5、modules"><a href="#5、modules" class="headerlink" title="5、modules"></a>5、modules</h4><p>我们还有最后一个store属性就是模块，有时候状态多的时候全部写在一个state中显得很臃肿，所以vue允许我们创建多个组件，每一个组件就相当于一个store的小分支：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moudlesa=&#123;</span><br><span class="line">  <span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="attr">aname</span>:<span class="string">&#x27;jerry&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="title function_">changename</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      state.<span class="property">aname</span>=<span class="string">&#x27;tom&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="title function_">achangname</span>(<span class="params">context,payload</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(payload)</span><br><span class="line">          context.<span class="title function_">commit</span>(<span class="string">&#x27;changename&#x27;</span>)</span><br><span class="line">          <span class="title function_">reslove</span>(<span class="string">&#x27;ok ,it is completed&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="title function_">fullname</span>(<span class="params">state,getters,rootstate</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">name</span>,rootstate.<span class="property">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的属性和store一样，但是有一些用法是需要指明的，比如模块里面的state是需要指明模块名的，不然分不清是谁的状态，但是下面几个就没有要求的，要注意不要和store里面的重名了，如果重名了就直接调用store里面的，这里的就失效了；还要注意这里的getters，它有第三个参数，就是外面的store，store的getters是没有这个参数的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   &lt;h2&gt;&#123;&#123;$store.state.a.aname&#125;&#125;&lt;/h2&gt;</span><br><span class="line">modulesclick()&#123;</span><br><span class="line">      this.$store.dispatch(&#x27;achangname&#x27;,&#x27;this is the modluesa&#x27;).then(()=&gt;&#123;</span><br><span class="line">        console.log(&#x27;调用完成&#x27;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>要注意使用模块的时候我们不需要写modules，直接挂在模块名就可以了，因为store默认没有modules这个属性；</p><p>依然可以使用异步操作的包装类。</p><h4 id="6、代码的抽离"><a href="#6、代码的抽离" class="headerlink" title="6、代码的抽离"></a>6、代码的抽离</h4><p>当我们写的业务越来越多时，在store对象里面的代码就会越来越乱，这时候我们就要对项目进行一下结构化，所以就有了代码的抽离，一般我们可以将state抽出一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state=&#123;</span><br><span class="line">  <span class="attr">count</span>:<span class="number">1000</span>,</span><br><span class="line">  <span class="attr">students</span>:[</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;bob&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;man&#x27;</span>,<span class="attr">score</span>:<span class="number">90</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;femal&#x27;</span>,<span class="attr">score</span>:<span class="number">95</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;man&#x27;</span>,<span class="attr">score</span>:<span class="number">85</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;mike&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;man&#x27;</span>,<span class="attr">score</span>:<span class="number">70</span>&#125;],</span><br><span class="line">  <span class="attr">hero</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;spider&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而其他的函数之类的都是通过模块，modules需要我们创建一个文件夹来存放，因为有时候我们使用的不仅仅是一个模块：</p><p><img src="/tony.github.io/home/Tony/.config/Typora/typora-user-images/image-20220908201431426.png" alt="image-20220908201431426"></p><p>可以看到，这里抽离了多个模块，而每个模块对应的是store属性的的各个对象的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">  <span class="attr">modules</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:moudlesa</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是不是就变得好看多了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">CHANGEACTION</span>,<span class="variable constant_">ACHANGEACTION</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./mutations-types&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  [<span class="variable constant_">ACHANGEACTION</span>](context,payload)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="variable constant_">CHANGEACTION</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(payload)</span><br><span class="line">        <span class="title function_">reslove</span>(<span class="string">&#x27;ok,It is succeed&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以actions为例，我们只需要使用export default 导出对象就可以了，当然如果你使用了其他的模块就在上面倒入一下就可以使用了。</p><h3 id="21、axios的学习"><a href="#21、axios的学习" class="headerlink" title="21、axios的学习"></a>21、axios的学习</h3><p>这是一个网络请求发送的框架，一个独立框架所以我们不需要use它，先让我们在项目中安装一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><p>然后在使用的时候导入一下这个模块就可以使用了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1 发送get请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;http://httpbin.org/cache&#x27;</span>,</span><br><span class="line">  <span class="attr">methods</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/* axios.post(&#x27;http://httpbin.org/response-headers&#x27;,&#123;</span></span><br><span class="line"><span class="comment">  freeform:89</span></span><br><span class="line"><span class="comment">&#125;).then((res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">  console.log(res)</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br></pre></td></tr></table></figure><p>总体来说有两种发送请求的方式，一种是我直接使用axios，然后再参数列表里面配置一些数据，比如URL，params以及请求的方式等，另一种就是我指定我发送什么请求，然后传一些数据在里面，具体操作看上面代码就可以了；</p><p>因为axios支持promise，所以在他后面我们可以使用then，他是异步操作，在请求成功后确实会调用reslove函数，所以请求成功会后会跳转到then函数里面执行；</p><h4 id="1、发送并发请求"><a href="#1、发送并发请求" class="headerlink" title="1、发送并发请求"></a>1、发送并发请求</h4><p>因为有时候我们需要同时访问多个数据，那就要发送多个请求，那么一般是等请求全部响应之后在进行操作，就像之前的promise.all那样，其实axios也提供了这样的方式，用法都是一样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.2 发送并行请求</span></span><br><span class="line">axios.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://123.207.32.32:8000/category&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">]).<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>axios.all（）方法传递的参数是一个数组，可以说是一个请求对象的数组，我们可以在里面写很多条请求，然后如果全部返回的话就会跳转到后面的then里面执行，<strong>而在then里面又有一个技巧，就是axios.spread的分离对象的方式，跟我们之前学过的对象的解构一样</strong>，数组其实也是可以解构的，但是意义不大，一般数组里面使用遍历就可以了；</p><h4 id="2、对请求实例的封装"><a href="#2、对请求实例的封装" class="headerlink" title="2、对请求实例的封装"></a>2、对请求实例的封装</h4><p>一个项目里面可以有很多的组件，特别是当我们的业务很大的时候我们就需要发送和处理很多的请求，不可能在每一个组建中对第三方的axios框架导入一遍，那样对后期的维护和修改非常的不利，如果框架一旦出了什么问题就需要一个一个的去修改，非常困难，所以我们就直接封装一个请求类，让所有的组件面向我们封装的这个模块来进行请求的发送和处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> instance1  = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>:<span class="string">&#x27;http://httpbin.org&#x27;</span>,</span><br><span class="line">        <span class="attr">timeout</span>:<span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">instance1</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建一个文件夹network，在里面放一个request.js文件，存放着上面的代码，于是当我们要使用他来发送请求的时候我们只需要这样做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;../network/request&#x27;</span></span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">request</span>(<span class="string">&#x27;/headers&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span>=res</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就算是后面这个axios框架不再维护了，我们要换了，也没有什么影响，我们可以火速打开request文件，在里面换上新的框架和api就可以了；</p><p>这里可能会有点不懂，<strong>就是我们返回的是一个axios.create创造出来的对象，为什么可以挂在then和catch呢</strong>？会看源码的小伙伴就会知道了，因为instace1返回的其实是一个promise，一个异步操作的封装类，他请求成功的时候就会执行then，失败就是执行catch；</p><h4 id="3、拦截器的使用"><a href="#3、拦截器的使用" class="headerlink" title="3、拦截器的使用"></a>3、拦截器的使用</h4><p>什么是拦截器，就是我们从半路上打劫请求或者是响应，所以这里一共有四种拦截器，就是请求成功与否的和响应与否的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截器的使用</span></span><br><span class="line">    <span class="comment">//1.1 这里是请求拦截器，两个参数，一个是配置，一个是错误</span></span><br><span class="line">    instance1.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(config)</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is a err&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//1.2 这里是响应拦截器，一个参数是结果，一个参数是错误</span></span><br><span class="line">    instance1.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>代码非常清晰明了，使用axios.create出来的实例，他有一个interceptor对象就是拦截器的大类，然后里面又有request和response两种，想要使用它们就调用他们的use方法，有两个参数<strong>，请求拦截器第一个参数是config，也就是我们发送请求的时候传的那个config，第二个就是错误了之后用的，一般不会到哪里去，响应拦截器的第一个参数是结果res,也就是我们服务器给我们的数据，第二个当然就是响应给我们的错误信息了；</strong></p><h3 id="22、小插曲，个人博客的搭建（hexo）版"><a href="#22、小插曲，个人博客的搭建（hexo）版" class="headerlink" title="22、小插曲，个人博客的搭建（hexo）版"></a>22、小插曲，个人博客的搭建（hexo）版</h3><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122255081.png" alt="image-20220911071425704" style="zoom:50%;" /><p>很多时候，我们想要拥有一个自己的小博客，然后把文章发在上面自己爽一爽，但是通过自己去写一个网站的话不仅需要浓厚的知识储备，而且还需要后期的修改和维护，不太适合基础不好的或者技术不够成熟的小伙伴们，那么我们可以通过hexo这个工具来自动化的给我们搭建一个个人博客，然后我们只需要自己去修改内容就可以了；</p><p>首先，我们先安装这个小工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><strong>安装它的脚手架，注意是在自己的博客文件夹下面，方便后面移动或者修改；</strong></p><p>这里需要用到git，大家还是自行去下载一下，然后安装：</p><p><a href="https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></p><p>安装完成之后，来到我们的博客目录下面，右击点击Git bash here ,在弹出的窗口里面输入下面的命令；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexio init tony</span><br></pre></td></tr></table></figure><p>最后一个是博客名称，自定义即可，注意需要空目录，所以大家安装东西的话是要全局安装的；</p><p>然后就会慢慢的开始构建一个博客项目的结构了，接下来我们可以对其进行修改和部署到GitHub：</p><p>来到构建的博客目录下面，输入一下命令安装一个工具，可以将博客推送到GitHub仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后需要打开配置文件来配置一下自己GitHub上面的仓库：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122255616.png" alt="image-20220911073909752"></p><p>就是项目结构下面的_config.yml文件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122254559.png" alt="image-20220911074204190"></p><p>输入上面的配置，当然，这个仓库就在你的账号里面，来到GitHub的仓库，如下方式可以拿到仓库的地址，然后填入repo即可：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122254678.png" alt="image-20220911074144367"></p><p>接下来咱们可以给博客更换一下主题：</p><p><a href="https://hexo.io/themes/index.html">Themes | Hexo</a></p><p>挑选自己喜欢的，然后按照里面的操作进行设置，每个主题可能要求的操作是不一样的：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122254445.png" alt="image-20220911074900105"></p><p>在config配置文件里面我们可以更改名称和语言；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果在clone主题的时候失败，我们可以试试下下面两行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置一下这个http代理就可以了，然后下载的主题会在博客目录下面的themes里面：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122254079.png" alt="image-20220911081131562"></p><p>另外我们如果更换主题，还需要安装一个渲染页面的工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在配置文件里面更改主题：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122254703.png" alt="image-20220911081504674"></p><p>在theme后面填上在themes文件夹下面的主题文件名即可，然后执行下面三大命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>就可以在localhost:4000看到自己的博客页面了：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/202209122254728.png" alt="image-20220911081631691" style="zoom:50%;" /><p>然后我们可以部署到仓库里了，但是我们要先表明一下自己的身份，输入一下两行命令：</p><p>把引号里的改成自己的邮箱和账号就OK了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><p>然后部署：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -d</span><br></pre></td></tr></table></figure><p>他会弹出一个框需要我们登录一下GitHub的账号，我们一步一步来就可以了；</p><p>然后就可以到GitHub的仓库里面看一看我们的链接是什么：就在仓库的setting里面的page选项里面，找到里面的链接或者点解visit site就可以了看了；</p><p>这里还有一个问题，就是没有样式的问题，我们需要在_config.yml文件里面写一下下面的配置：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220911093831357.png" alt="image-20220911093831357"></p><p>表明自己结构让浏览器渲染的时候可以正确的找到对应的文件，url是自己访问到的网站的那个链接，不是仓库，root就是自己的仓库名；</p><h3 id="23、电商项目开发"><a href="#23、电商项目开发" class="headerlink" title="23、电商项目开发"></a>23、电商项目开发</h3><h4 id="1、将项目托管到github仓库"><a href="#1、将项目托管到github仓库" class="headerlink" title="1、将项目托管到github仓库"></a>1、将项目托管到github仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 仓库地址</span><br><span class="line">git push -u origin master </span><br><span class="line">将dist部署到GitHub中</span><br><span class="line">npm run build</span><br><span class="line">git checkout -b gh-pages</span><br><span class="line">git add -f dist</span><br><span class="line">git commit -m &#x27;first commit&#x27;</span><br><span class="line">git subtree push --prefix dist origin gh-pages</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用git来链接GitHub上面的仓库，然后将自己的代码推送到远程仓库；如果git没有连接过GitHub的话可能或需要登录一下GitHub的账号；</p><h4 id="2、添加配置文件"><a href="#2、添加配置文件" class="headerlink" title="2、添加配置文件"></a>2、添加配置文件</h4><p>一般我们开发项目都需要给对应的文件夹取一个别名，这里也不例外，我们可以再项目下面创建一个vue.config.js文件来取一下别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">configWebpack</span>:&#123;</span><br><span class="line">        <span class="attr">resolve</span>:&#123;</span><br><span class="line">            <span class="attr">alias</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;assets&#x27;</span>:<span class="string">&#x27;@/assets&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;common&#x27;</span>:<span class="string">&#x27;@/common&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;components&#x27;</span>:<span class="string">&#x27;@/components&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;network&#x27;</span>:<span class="string">&#x27;@/network&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、将导航组将移植到项目"><a href="#3、将导航组将移植到项目" class="headerlink" title="3、将导航组将移植到项目"></a>3、将导航组将移植到项目</h4><p>因为我们使用的是Vue3项目，需要之前的导航的代码移植到我们的新项目之中，Vue3还是有很多的不同之处，所以我们有一点要注意更改一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .tabbar-item&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    height: 49px;</span><br><span class="line">  &#125;</span><br><span class="line">  .tabbar-item img&#123;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height:24px;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>想要样式在插槽里面生效<strong>，就不能再style里面加scoped，因为再我们的Vue2里面组件的style一般都是加上了，scoped，但是Vue3中不能加，加上就没效果</strong>，而且Vue3中具名插槽的使用也要注意，我们是这样用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template v-slot:tabbar-icon&gt;</span><br><span class="line">                &lt;img  src=&quot;~assets/img/profile/profile.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>而vue2的话是使用slot属性，如果照搬的话是不会生效的；</p><p>那么开始移植代码：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/shopdesign.png" alt="image-20220911211749938"></p><p>可以看到这个结构，根据这个结构存放响应的代码，img和之前不一样，我们分了四个文件夹里面分别存放着四个导航图标的原始状态图片和活跃状态图，components里面common存放在大导航栏和导航栏的item，因为这个是可以公共使用的，不会收到业务的影响，所以我们就放在这里，而之前存App存放着使用这个tabbar组件的代码就可以移植到里面来了；</p><p><strong>后期访问的接口：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://152.136.185.210:7878/api/hy66/</span><br></pre></td></tr></table></figure><h4 id="4、首页开发"><a href="#4、首页开发" class="headerlink" title="4、首页开发"></a>4、首页开发</h4><p><img src="https://raw.githubusercontent.com/Tony-hurry/imageBad/main/study-images/shop.png" alt="image-20220912102501409">)</p><p>当我们搭建好基本的框架之后，就只需要针对相应路由的组件开发就可以了，这是上导航，我们可以再common里面放一个公共的上导航组件NavBar，因为不仅仅是一个业务我们会用到这个上导航：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;navbar&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">            &lt;slot name=&quot;left&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">            &lt;slot name=&quot;center&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">            &lt;slot name=&quot;right&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.navbar&#123;</span><br><span class="line">    height:44px;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    display: flex;</span><br><span class="line">    box-shadow: 0px 1px 1px rgba(100, 100, 100, .1);</span><br><span class="line">&#125;</span><br><span class="line">.left .right&#123;</span><br><span class="line">    width: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.center&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>我们可以看成有三个部分，左中右，在home里面中间就是一行字，但是可能在其他的业务中这个左导航就可以能是一个小箭头，所以我们这里放了三个插槽，为了之后不同的开发；</p><p>这里有的样式是公共的，比如一些宽高和布局；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavBar class=&quot;home-bar&quot; &gt;</span><br><span class="line">    &lt;template  v-slot:center&gt;</span><br><span class="line">      &lt;div &gt;购物中心&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/NavBar&gt;</span><br></pre></td></tr></table></figure><p>很明显我们这里就是在中间放了一行字就可以了；</p><h5 id="1、首页请求数据"><a href="#1、首页请求数据" class="headerlink" title="1、首页请求数据"></a>1、首页请求数据</h5><p>我们需要当我们点击到首页的时候能够看到一些东西，这些都是由数据支撑的，所以我们先从获取数据入手，还记得怎么发送请求吗？</p><p>我们导入之前我们开发过的request：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;</span><br><span class="line"></span><br><span class="line">export function request(config) &#123;</span><br><span class="line">    const instance1 = axios.create(&#123;</span><br><span class="line">        baseURL: &#x27;http://152.136.185.210:7878/api/hy66&#x27;,</span><br><span class="line">        timeout: 5000</span><br><span class="line">    &#125;)</span><br><span class="line">    return instance1(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、轮播图的制作"><a href="#2、轮播图的制作" class="headerlink" title="2、轮播图的制作"></a>2、轮播图的制作</h5><p>我们可以直接使用别人封装好的独立组将，放在componetns&#x2F;common&#x2F;swiper里面就可以人，然后需要自己在home里面创建一个mainswiper文件夹放着我们home里面使用的轮播图实现代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;swiper interval=&quot;4000&quot;&gt;</span><br><span class="line">    &lt;swiper-item v-for=&quot;(item, id) in banners&quot; :key=&quot;id&quot;&gt;</span><br><span class="line">      &lt;a :href=&quot;item.link&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;item.image&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/swiper-item&gt;</span><br><span class="line">  &lt;/swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;Swiper, SwiperItem&#125; from &#x27;components/common/swiper&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;HomeSwiper&quot;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      banners: &#123;</span><br><span class="line">        type: Array,</span><br><span class="line">        default() &#123;</span><br><span class="line">          return []</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper,</span><br><span class="line">      SwiperItem</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>没错，封装了组件一切都是这么的简单，可以看到这里从home里面拿了数据过来，叫做banners:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      banners: [],</span><br><span class="line">      recommends: [],</span><br><span class="line">      titles:[&#x27;流行&#x27;,&#x27;新款&#x27;,&#x27;精选&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">    getHomeMultidata().then(res =&gt; &#123;</span><br><span class="line">      //console.log(res)</span><br><span class="line">      this.banners = res.data.data.banner.list</span><br><span class="line">      this.recommends = res.data.data.recommend.list</span><br><span class="line">      //console.log(this.banners)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="3、推荐页面的制作"><a href="#3、推荐页面的制作" class="headerlink" title="3、推荐页面的制作"></a>3、推荐页面的制作</h5><p>这个是轮播图下面的一个组件，属于home下面的组件，所以我们在home里面创建一个childhome文件夹，里面和上面的轮播图mainswiper组件放在一起：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/recomedproject.png" alt="image-20220914160831198"></p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/homeswiperimg.png" alt="image-20220914160848587"></p><p>这个也是采用了传过来的数据recommenders：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;recommonder&quot;&gt;</span><br><span class="line">        &lt;div class=&#x27;item&#x27; v-for=&quot;item in recommonders&quot;&gt;</span><br><span class="line">            &lt;a :href=&quot;item.link&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;item.image&quot; alt=&quot;&quot;&gt;&lt;/a&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;item.title&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;recommonder&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        recommonders: &#123;</span><br><span class="line">            type: Array,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.recommonder&#123;</span><br><span class="line">    border-bottom:8px solid #eee;</span><br><span class="line">    font-size:12px;</span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding:10px 0 20px ;</span><br><span class="line">&#125;</span><br><span class="line">.recommonder .item&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">&#125;</span><br><span class="line">.recommonder img&#123;</span><br><span class="line">    width:70px;</span><br><span class="line">    height:70px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>因为每一个选项是可以点击的链接，所以我们可以在外面套一个a标签，常常我们会使用到v-for来根据数组创建一系列的元素；根据这里的数据特点和元素格式的共性我们就可以结合这个循环来实现一些列相同的元素布局；样式的话一般就是使用弹性布局，人后宽高之类、位置什么的自己慢慢调节就可以了；</p><p>这个组件封装好了之后我们将他放在childhome下面，然后再home里面引用一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/miainswiperuse.png" alt="image-20220914164043848"></p><p>就放在banner组件的下面，我们导入组件的时候最好分一下类，不同地方导入的组件最好还是隔开一下，养成一个好的代码风格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import NavBar from &#x27;components/common/navbar/NavBar&#x27;</span><br><span class="line">import TabControlVue from &#x27;@/components/common/tabControl/TabControl.vue&#x27;</span><br><span class="line">import &#123; getHomeMultidata &#125; from &#x27;network/home&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import MainSwiper from &#x27;./childhome/mainSwiper/HomeSwiper&#x27;</span><br><span class="line">import Recommonder from &#x27;./childhome/remmonder/Recommonder.vue&#x27;</span><br><span class="line">import Feature from &#x27;./childhome/feature/Feature.vue&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4、流行组件的封装："><a href="#4、流行组件的封装：" class="headerlink" title="4、流行组件的封装："></a>4、流行组件的封装：</h5><p>这个组件虽然只有一张图片，但是却也是一个组价，需要我们封装一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/styleimg.png" alt="image-20220914164238118"></p><p>同样我们可以再childhome里面创建一个组件来存放这个组件，我的就是每个组件我都多创建了一个文件夹，看你们自己，其实文件结构只要清晰有条理就行，不管你怎么放，只要可以有规则，看上去很整齐就可以了：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/featureproject.png" alt="image-20220914164413770"></p><p>而且这个图片是可以点击的，他也是一个链接，那么我们就需要使用a标签将他包裹起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;feature&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;https://act.mogujie.com/zzlx67&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;./recommend_bg.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;feature&#x27;,</span><br><span class="line">    props:&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.feature img&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这里代码比较少，当然也是结构简单的原因；</p><h5 id="5、控制导航栏制作"><a href="#5、控制导航栏制作" class="headerlink" title="5、控制导航栏制作"></a>5、控制导航栏制作</h5><p>这个导航栏和下面的列表在很多页面也是有应用的，所以我们就应该将他们放在components&#x2F;common下面，如果有特殊的样式的话就需要放在父组件里了，可以再home里面调整home在这个组件上面独有的样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;tabcontrol&quot;&gt;</span><br><span class="line">        &lt;div v-for=&quot;(item,index) in titles&quot; class=&quot;items&quot; :class=&quot;&#123;active: this.currentIndex === index&#125;&quot;</span><br><span class="line">            @click=&quot;setActice(index)&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;tabcontrol&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            currentIndex: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        titles: &#123;</span><br><span class="line">            type: Array,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        console.log(this.titles)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        setActice(index) &#123;</span><br><span class="line">            this.currentIndex = index</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.tabcontrol &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabcontrol .items &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.active &#123;</span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.active span &#123;</span><br><span class="line">    border-bottom: 2px solid var(--color-high-text);</span><br><span class="line">    padding: 3px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这里运用的逻辑语法还是比较的高级，比如我们点击一个导航的时候更改该文字颜色和下边框的颜色；</p><p>实现的逻辑就是我们创建一个active的样式，使用的是对象样式，我们需要判断传过来的index是否和当前一致才决定这个active是否生效，一般是当点击的时候我们给currentIndex赋值，让他和index相等，然后就会生效了；</p><h5 id="6、导航服装展示的数据请求"><a href="#6、导航服装展示的数据请求" class="headerlink" title="6、导航服装展示的数据请求"></a>6、导航服装展示的数据请求</h5><p>首先我们想要展示一些数据，那得先拿到这些数据吧，所以我们来到network下面的home.js模块，我们给他一个数据接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getHomeGoods</span>(<span class="params">type,page</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">            type,</span><br><span class="line">            page</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个借口是有参数的，有一个数据类型type参数，还有一个页码参数，所以我们在写接口的时候需要传入这两个参数，然后就可以进行访问了，来到我们的home访问一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getHomeGoods</span>(<span class="params">type</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> page = <span class="variable language_">this</span>.<span class="property">goods</span>[type].<span class="property">page</span>+<span class="number">1</span></span><br><span class="line">  <span class="title function_">getHomeGoods</span>(type,page).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">goods</span>[type].<span class="property">list</span>.<span class="title function_">push</span>(...res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">list</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">goods</span>[type].<span class="property">page</span> += <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们本来是将请求代码写在周期函数created里面的，但是这样就显得很乱，毕竟这是created函数，所以我们就封装了一下，将他使用getHomeGoods函数封装了一下，但是他自己本身就是这个函数名，所以我们在调用的时候就加上this就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.getHomeGoods(&#x27;pop&#x27;)</span><br><span class="line">this.getHomeGoods(&#x27;new&#x27;)</span><br><span class="line">this.getHomeGoods(&#x27;sell&#x27;)</span><br></pre></td></tr></table></figure><p>这样呢我们就可以拿到三种数据了，并且通过函数将请求到的数据存储到了变量之中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goods: &#123;</span><br><span class="line">       &#x27;pop&#x27;: &#123; page: 0, list: [] &#125;,</span><br><span class="line">       &#x27;new&#x27;: &#123; page: 0, list: [] &#125;,</span><br><span class="line">       &#x27;sell&#x27;: &#123; page: 0, list: [] &#125;,</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>一旦遇到这种数据量大的业务，一定要先设计好数据结构，这里我们就根据请求来的数据设计了一种特殊的数据结构，那就是对象包对象，我们将页码存起来，并且与数据对应了，很巧妙，接下来我们就只需要将数据传给组件展示就可以了；</p><h5 id="7、导航数据的展示"><a href="#7、导航数据的展示" class="headerlink" title="7、导航数据的展示"></a>7、导航数据的展示</h5><p>一共有三种数据，那么就意味着我们需要在鼠标点击的时候切换数据，这个需要怎么做呢？</p><p>这就要使用到之前的知识了，子组件被点击了，父组件怎样做出响应呢，当然事将存放对应的数组放进去展示啦，所以我们就要使用父子组件通讯中的$emit()知识点了 </p><p>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setActice(index) &#123;</span><br><span class="line">    this.currentIndex = index</span><br><span class="line">    //将事件传给父组件</span><br><span class="line">    this.$emit(&#x27;tabclick&#x27;,index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;TabControlVue :titles=&#x27;titles&#x27; class=&#x27;tab-control&#x27; @tabclick=&quot;tabclick&quot; /&gt;</span><br></pre></td></tr></table></figure><p>还记得我们切换当前点击的控制按钮的函数吗，就是这个setactice函数，我们点击对应的按钮的时候就会跳转到这里执行，所以我们就可以在这里提交时间给父组件，是自定义的哦，然后父组件里面使用的时候通过这个组件名来拿取就可以了，是可以传递参数的，可以很明显的看到我们这里试传了一个index参数来指明当前我们显示的是那个分类下面的数据：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/shops.png" alt="image-20220915212744034"></p><p>那怎么判断在哪一个分类下面之后又怎么展示相应的数据呢？这就要我们封装组件了，首先这是一个业务组件，所以就在components&#x2F;content下面创建一个叫做goods的文件夹，文件夹里面放了两个组件，第一个是外面的大盒子，一个就是里面的图片和标题价格的详情盒子：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/goodsprojectpng" alt="image-20220915213230129"></p><p>创建好之后呢，就在GoodsList里面开始写代码，使用GoodsListItem组件，放到我们的外面盒子里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;goodslist&quot;&gt;</span><br><span class="line">        &lt;div v-for=&quot;item in goodslist&quot; class=&quot;goodsitem&quot;&gt;</span><br><span class="line">            &lt;GoodsListItemVue :goodsdata=&#x27;item&#x27; /&gt;</span><br><span class="line">        &lt;/div&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>但是我们的数据有很多，所以要根据父组件传给我们的数据来循环生成item，也就是商品详情，先看看我们商品详情里的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img :src=&quot;goodsdata.show.img&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;goodstext&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;goodsdata.title&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;span&gt;价格：&#123;&#123;goodsdata.price&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span id=&quot;collect&quot;&gt;&#123;&#123;goodsdata.cfav&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>一张图片，然后就是一个详情的盒子，里面放了一个p和两个span，放的就是标题、价格和收藏人数，结构还是比较简单的，就是布局有一点技巧，比如这里的详情文字要放在图片的下面我们需要怎么设计呢？</p><p>答案就是通过定位和下边距：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.goodsitem .goodstext &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    position: absolute; </span><br><span class="line">    padding:2px;</span><br><span class="line">    left: 0px;</span><br><span class="line">    bottom: 0px;</span><br><span class="line">    height: 44px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将标题定位在下内边距里面，然后图片就可以设置铺满盒子，文字之间的布局大家就慢慢调吧，比较简单，对了，有一个省略号的设置很容易忘记：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.goodsitem</span> <span class="selector-class">.goodstext</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要交代宽度，不然没有办法省略，然后就是下面三条语句；</p><p><strong>注意：如果你是在弹性布局里面想要使用省略号，就需要将有文本的那个子元素的width设置为0px，这样就是告诉浏览器我们不能让内容撑大盒子；</strong></p><p>再来看看外面的大盒子的布局，他控制着我们的item排列方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.goodslist</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgba</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,.<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goodsitem</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外面的话是一个弹性布局，设置了可以换行，也就是包裹方式，默认是没有的，既然是包裹了，那么就需要交代被包裹盒子的具体宽度了，所以后面就用了一个百分比来设置，这也是为了元素的响应式设计，然后使用的分布是space-around也就是均分，<strong>只是中间的空隙均分而已，两边的话就是中间的一半距离</strong>，所以这里我就使用padding进行了微调，当然你们也可以计算出来自己设计；</p><p>封装好了组件之后直接拿到home里面使用就可以了：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/goodlistvue.png" alt="image-20220915214515147" style="zoom:150%;" /><p>这里有一个动态绑定，其实就是我们根据点击来切换数据的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  getType()&#123;</span><br><span class="line">    return this.goods[this.currenttype].list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这其实是一个计算属性，里面根据了子组件传递过来的参数改变了当前传过去的数组，我们叫做数据的响应式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tabclick(index)&#123;</span><br><span class="line">  console.log(index)</span><br><span class="line">  switch(index)&#123;</span><br><span class="line">    case 0: this.currenttype=&#x27;pop&#x27;</span><br><span class="line">    break;</span><br><span class="line">    case 1: this.currenttype=&#x27;new&#x27;</span><br><span class="line">    break;</span><br><span class="line">    case 2: this.currenttype=&#x27;sell&#x27;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(this.currenttype)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里就是子组件传过来的数据然后我们写了一个开关函数来设置一下当前显示的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currenttype:&#x27;pop&#x27;</span><br></pre></td></tr></table></figure><p>当然我们就使用对应过来的这个变量就可以了，点击之后就会更改这个变量的值，而这个变量会更改的值就是我们请求过来的数据的数列的类型；</p><h5 id="8、vue组件在创建过程的生命周期几个生命周期函数"><a href="#8、vue组件在创建过程的生命周期几个生命周期函数" class="headerlink" title="8、vue组件在创建过程的生命周期几个生命周期函数"></a>8、vue组件在创建过程的生命周期几个生命周期函数</h5><img src="https://img-blog.csdnimg.cn/20210720215850322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NDM4NDQy,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 50%;" /><p>在vue创建之前调用的第一个函数就是beforecreated，啥也不是，就是调用一下，destroyed也是这样，毕竟开始创建和销毁说起来没啥意义，一般不会用到，第一个重要的就<strong>是created，这个函数有一个特点，创建了组件但是却没有挂载模板</strong>，所以在这个函数里面就不要想去操作我们的dom元素的，他都没有挂在他们，所以多数是拿到undifine和null，但是已经有了函数和data，这个是可以访问的；</p><p>下一个就是beforemount，这个是用来创建虚拟dom，之前我们也讲到过关于vue底层的一个实现逻辑，就是它自己有一个虚拟的dom，可以将数据全部渲染到这个虚拟的dom上面，等数据加载完成之后在一起放到真实的dom上面去，所以我们就可以使用一个功能叫做懒加载，不会出现那种空白现象；</p><p>再<strong>后来就是mounted函数，这个函数就将dom元素挂载完成了，这个时候我们就可以操作dom元素了；</strong></p><p>还有就是beforeupdate，这个有点特殊，它呢在数据改变的时候可以调用，但是在dom上面却看不到数据的变化；</p><p>update，当然他也是数据变化是调用，不同的就是dom元素会有变化了，页面现实的数据可以改变了；</p><p><strong>beforedestroyed主</strong>要就是干一些销毁前要做得工作了；</p><h4 id="5、分类页面开发"><a href="#5、分类页面开发" class="headerlink" title="5、分类页面开发"></a>5、分类页面开发</h4><p>我们要来解决一下滚动的问题了，就是在移动端我们使用自带的滚动效果的话会特别卡，所以我们可以引入一个第三方框架来重构这样一个滚动效果，首先我们先安装这个框架：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i better-scroll -s</span><br></pre></td></tr></table></figure><p>这个框架的使用比较简单，我们主要就是了解一下他的创建和一个监听函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import BScroll from &#x27;better-scroll&#x27;</span><br></pre></td></tr></table></figure><p>安装完成之后我们就可以通过这个导入方式来使用这个框架：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    this.scroll = new BScroll(this.$refs.scroll,&#123;</span><br><span class="line">        probeType:3,</span><br><span class="line">        pullUpLoad: true,</span><br><span class="line">        click:false</span><br><span class="line">    &#125;)</span><br><span class="line">    this.scroll.on(&#x27;scroll&#x27;,(position)=&gt;&#123;</span><br><span class="line">        //console.log(position)</span><br><span class="line">    &#125;)</span><br><span class="line">    this.scroll.on(&#x27;pullingUp&#x27;,()=&gt;&#123;</span><br><span class="line">        //console.log(&#x27;已经滑到了底部&#x27;)</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            this.scroll.finishPullUp()</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>主要就是了解这个函数的使用，我们一般将他们放在这个mounted函数里，他是vue的周期函数第一种，当我们的模块挂在好了之后就会自动调用这个函数，在里面我们创建了这个框架对象BScroll，里面有两个参数，第一个是我们定义的dom元素，第二个是config对象，就是这个滚动对象的一些权限的设置，首先probeType，有三种模式，可以填0、1、2、3，默认的话就是0，其实0和1是同一种模式，知识默认是0，也可以自己写1，这个模式的不同要和滚动监听结合起来，我们使用on函数来监听，他也有两个参数，第一个是监听的事件类型，第二个就是监听触发的函数，pullUpload的作用就是启动我们的上拉加载，也是要配合监听函数使用的，pullingUp，这个函数里面做的事就是对上拉数据的加载了，要注意既然是加载数据，我们就肯定是需要<strong>让他加载一段时间的</strong>，而且还要调用一个finishPullUp函数来告诉vue，我们已经完成了上拉加载，可以准备下一次了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot; ref=&quot;scroll&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>另外，对于这个框架，我们需要按照一定的结构才能实现滚动，就是这样一个结构，一个大盒子里面放一个盒子，外<strong>面的大盒子是需要指定高度的</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.wrapper&#123;</span><br><span class="line">    height:100%;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:44px;</span><br><span class="line">    bottom:49px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且里面的只能是一个小盒子，所以我们要放数据的话就只能放在里面的盒子里面；</p><h5 id="1、封装滚动组件"><a href="#1、封装滚动组件" class="headerlink" title="1、封装滚动组件"></a>1、封装滚动组件</h5><p>因为我们在开发页面的时候使用的是原生的滚动事件，放在电脑上浏览没有什么太大的问题，但是在移动端上展示的话是会变的卡顿不好用的，所我们可以封装一个组件，通过better-scroll这个框架可以让我们移动端开发的滚动更加流畅好用，那么开始我们的封装；</p><p>首先在components&#x2F;common里面创建一个文件夹，叫做scroll，里面创建一个Scroll.vue的组件，组件里面就有这样的一个结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;wrapper&quot; ref=&quot;scroll&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BScroll from &#x27;better-scroll&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;scroll&quot;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        probeType:&#123;</span><br><span class="line">            type:Number,</span><br><span class="line">            default()&#123;</span><br><span class="line">                return 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            scroll:null</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.scroll = new BScroll(this.$refs.scroll,&#123;</span><br><span class="line">            probeType:this.probeType,</span><br><span class="line">            pullUpLoad: true,</span><br><span class="line">            click:true,</span><br><span class="line">            disableTouch:false,</span><br><span class="line">            observeDOM:true,</span><br><span class="line">            observeImage:true</span><br><span class="line">        &#125;)</span><br><span class="line">        this.scroll.on(&#x27;scroll&#x27;,(position)=&gt;&#123;</span><br><span class="line">            //console.log(position)</span><br><span class="line">            this.$emit(&#x27;scroll&#x27;,position)</span><br><span class="line">        &#125;)</span><br><span class="line">        this.scroll.on(&#x27;pullingUp&#x27;,()=&gt;&#123;</span><br><span class="line">            //console.log(&#x27;已经滑到了底部&#x27;)</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                this.scroll.finishPullUp()</span><br><span class="line">            &#125;, 2000);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        scrollTo(x,y,time=300)&#123;</span><br><span class="line">            console.log(&#x27;调用了函数&#x27;)</span><br><span class="line">            this.scroll.scrollTo(x,y,time)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">.wrapper&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:44px;</span><br><span class="line">    bottom:49px; </span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    padding-bottom: 49px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这里面的一些方法要注意，我们对于probeType的复制不能写死，因为这是封装，可能有一些页面不需要监听滚动事件，如果我们写复制为3的话，势必会影响页面的性能，所以我们给他动态的复制，因为是通过父组件确定的，所以我们就通过props来确定这个属性的值；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">observeDOM:true,</span><br><span class="line">observeImage:true</span><br></pre></td></tr></table></figure><p>在使用这个组件的时候我遇到了一个问题，就是我们打开页面的时候鼠标拖拽不懂，其实这是一个图片到加载问题，我们加上这两个属性就可以了，另外，如果实在组件下面的div需要监听的话，我们需要将click属性设置为true才行;</p><p>然后就只需要在需要用到滚动的地方重构一下滚动效果就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Scroll ref=&quot;scroll&quot;&gt;</span><br><span class="line">      &lt;MainSwiper :banners=&#x27;banners&#x27; /&gt;</span><br><span class="line">      &lt;Recommonder :recommonders=&quot;recommends&quot;&gt;&lt;/Recommonder&gt;</span><br><span class="line">      &lt;Feature /&gt;</span><br><span class="line">      &lt;TabControlVue :titles=&#x27;titles&#x27; class=&#x27;tab-control&#x27; @tabclick=&quot;tabclick&quot; /&gt;</span><br><span class="line">      &lt;GoodsListVue :goodslist=&quot;getType&quot; /&gt;</span><br><span class="line">    &lt;/Scroll&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>组件的导入和使用我就不多赘述了，这里就是将需要滚动的时间通过这个组件包裹起来就可以了；</p><h5 id="2、返回顶部的按钮封装"><a href="#2、返回顶部的按钮封装" class="headerlink" title="2、返回顶部的按钮封装"></a>2、返回顶部的按钮封装</h5><p>在很多的页面之中，电商也好，博客也罢，返回顶部的按钮非常的常见，我们这里也不能错过这个组件封装：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/topbutton.png" alt="image-20220917202418419" style="zoom:50%;" /><p>这个组件的作用就只在页面滑到中上部分的时候，我们需要显示这个按钮，然后在我们点击这个按钮之后页面会自动滑到最顶部然后隐藏这个按钮，首先我们需要在compontents&#x2F;content文件夹下面创建一个backup文件夹，将这个跟业务相关又在很多页面中使用的组件放在content下面，在backup文件夹中创建一个BackUp.vue文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;backtop&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;~assets/img/common/top.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;backtop&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .backtop&#123;</span><br><span class="line">        position: fixed;</span><br><span class="line">        bottom:55px;</span><br><span class="line">        right:8px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .backtop img&#123;</span><br><span class="line">        width:43px;</span><br><span class="line">        height:43px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>里面的代码就是一个盒子里面又一张图片，就是那个小箭头的图片，样式的话当然就是固定定位了，这个的盒子位子和图片大小是可以自家调整的；</p><p>当我们使用这个组件的时候，还需要监听滚动的距离才能确认什么时候隐藏，什么时候显示，还需要监听他的点击事件才能对他做一些事，这些代码我们可以写在父组件下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;Scroll ref=&quot;scroll&quot; :probeType=&quot;3&quot; @scroll=&quot;scroll&quot;&gt;</span><br><span class="line">   &lt;MainSwiper :banners=&#x27;banners&#x27; /&gt;</span><br><span class="line">   &lt;Recommonder :recommonders=&quot;recommends&quot;&gt;&lt;/Recommonder&gt;</span><br><span class="line">   &lt;Feature /&gt;</span><br><span class="line">   &lt;TabControlVue :titles=&#x27;titles&#x27; class=&#x27;tab-control&#x27; @tabclick=&quot;tabclick&quot; /&gt;</span><br><span class="line">   &lt;GoodsListVue :goodslist=&quot;getType&quot; /&gt;</span><br><span class="line"> &lt;/Scroll&gt;</span><br><span class="line"></span><br><span class="line">&lt;BackTop @click=&quot;backclick&quot; v-show=&quot;isshowbacktop&quot;&gt;&lt;/BackTop&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backclick()&#123;</span><br><span class="line">   this.$refs.scroll.scrollTo(0,0,400)</span><br><span class="line">   </span><br><span class="line"> &#125;,</span><br><span class="line"> scroll(position)&#123;</span><br><span class="line">   return this.isshowbacktop = -position.y &gt; 1000</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们显示在home里面使用的，需要实现在滑动到一定的距离显示这个小箭头组件，点击的时候回到顶部，那么我们可以再使用这个组件的时候监听这个组件，我记得vue2里面的话这里的组件监听事件的话需要这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@clic.native=&#x27;backclick&#x27;</span><br></pre></td></tr></table></figure><p>才可以，但是这里是vue3，好像不写native也是可以的，然后再这点击响应函数里面需要实现滑到最顶部的效果，这个效果需要调用Bscroll实例里面的scrollTo函数，这个函数有三个参数，第一个是x，第二个是y，第三个就是滚到这个位置花的事件，是以ms为单位的，我们没哟直接获取到这个组件的对象直接调用这个函数，而是对他做了一层封装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scrollTo(x,y,time=300)&#123;</span><br><span class="line">    console.log(&#x27;调用了函数&#x27;)</span><br><span class="line">    this.scroll.scrollTo(x,y,time)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是scroll.vue组件下面的函数，因为Bscroll对象在这个组件下面，所以我们这里就直接使用函数对这个组件的调用做了一个封装，可以看到这个函数设了一个默认的time为300ms，实质上还是调用了Bscroll实例的scrollTo函数；</p><p>再就是小箭头的隐藏功能了，我们需要监听滚动事件，在这个滚动位置大于1000的时候我们就将v-show设置为true，默认就是false，小于1000的时候也设置为false，但是仅仅依靠父组件依然是不能够实现的，首先我们要讲probeType传值为3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:probeType=&quot;3&quot;</span><br></pre></td></tr></table></figure><p>然后通过提交事件的方式将组件内部获取到的position传给父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.scroll.on(&#x27;scroll&#x27;,(position)=&gt;&#123;</span><br><span class="line">    //console.log(position)</span><br><span class="line">    this.$emit(&#x27;scroll&#x27;,position)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看到，我们在scroll组件里面的监听滚动事件函数里面使用了#emit函数来提交事务，然后传入了一个参数，就是这个函数拿到的position对象；拿到之后就回到home下面scroll函数里面，<strong>定义一个属性来给v-show复制，通过这个属性的变化来控制小箭头的显示和隐藏；</strong></p><h5 id="3、上拉加载数据的制作"><a href="#3、上拉加载数据的制作" class="headerlink" title="3、上拉加载数据的制作"></a>3、上拉加载数据的制作</h5><p>之前我们没有设计在商品拉到最底部的时候加载数据的功能，但是我们封装了获取这个数据的函数，所以是时候完成这个功能了，先打开scroll组件，在里面需要监听滚动到底部的事件，然后通过提交事件的方式和父组件取得联系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">this.scroll.on(&#x27;pullingUp&#x27;,()=&gt;&#123;</span><br><span class="line">           //console.log(&#x27;已经滑到了底部&#x27;)</span><br><span class="line">           this.$emit(&#x27;loadmore&#x27;)</span><br><span class="line">           /* setTimeout(() =&gt; &#123;</span><br><span class="line">               this.scroll.finishPullUp()</span><br><span class="line">           &#125;, 2000); */</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>如果需要监听滑到底部的操作的话，better-scroll框架要求设置一个属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this.scroll = new BScroll(this.$refs.scroll,&#123;</span><br><span class="line">            probeType:this.probeType,</span><br><span class="line">            pullUpLoad: true,</span><br><span class="line">            click:true,</span><br><span class="line">            disableTouch:false,</span><br><span class="line">            observeDOM:true,</span><br><span class="line">            observeImage:true</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>就是这里的pullUpLoad设置为true,然后就是提交了一个loadmore事件给home组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Scroll ref=&quot;scroll&quot; :probeType=&quot;3&quot; @scroll=&quot;scroll&quot; </span><br><span class="line">:pullUpLoad=&quot;true&quot; @loadmore=&quot;loadmore&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loadmore()&#123;</span><br><span class="line">  console.log(&#x27;滚动到了底部&#x27;)</span><br><span class="line">  this.getHomeGoods(this.currenttype)</span><br><span class="line">  this.$refs.scroll.finished()</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>home组件拿到了这个事件的话就可以重写这个方法，在里面调用我们之前封装好的那个getHomeGoos函数，传一个当前的商品类型过去，也就是我们设置好的currentType变量，另外，默认的话上拉加载在没有表明完成之前，这个框架是不会准备下一次加载的，所以我们需要调用他的一个finishPullUp函数，同样这里我们也可以对这个函数做一个封装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">finished()&#123;</span><br><span class="line">           setTimeout(() =&gt; &#123;</span><br><span class="line">               this.scroll.finishPullUp()</span><br><span class="line">           &#125;, 2000);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>也是在scroll组件里面我们给这个函数包装一层，然后home里面就只需要调用这个函数就可以了；</p><h5 id="4、防抖动的操作"><a href="#4、防抖动的操作" class="headerlink" title="4、防抖动的操作"></a>4、防抖动的操作</h5><p>我们在一些搜索引擎中输入一些关键字的时候可以经常看到，他会自动弹出一些数据，其实就是在我们输入关键字的时候程序根据字符发送了相应的请求，在这个过程中就会产生一个问题，如果一个人打字的速度过快，那么就可能在短时间内向服务器发送了很多条数据，于是就有一个操作就是防抖，也就是在我们输入字符的时候程序会等待一段时间，等你全部输入完毕之后它在进行数据的请求，这样就可以起到减少性能消耗的作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">debounce(func,delay)&#123;</span><br><span class="line">  //这个对象是局部的，但是因为异步的调用不会被回收机制回收掉</span><br><span class="line">  let timer = null</span><br><span class="line">  return function(...args)&#123;</span><br><span class="line">    </span><br><span class="line">    if(timer)clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(() =&gt; &#123;</span><br><span class="line">      func.apply(this,args)</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>主要就是这样的一个函数来实现，我们先创建一个定时器的对象，然后判断一下这个对象是否存在，存在就会清除，没有存在就会创建一个，那他是怎么做到延时的呢？这个debounce函数具有两个参数，第一个是我们要执行的函数，第二个是延时的事件，在里面会创建一个定时器对象，然后返回一个函数对象，这个函数对象有一个参数，前面由三个点，意味着我们可以传入多个参数，然后在里面给创建的timer赋值，在定时器里面执行我们传过去的函数；</p><p>他是怎样做到消除抖动的呢？也就是在我们输入字符的时候会创建一个定时器，然后在我们有输入字符的时候会判断是否存在这个timer对象，如果存在就会清除，那么我们上一次的字符请求就没有执行，如果我们在一段时间内没有输入字符的话，这个请求就会成功了；</p><h5 id="5、控制栏的吸顶效果和home的状态保存"><a href="#5、控制栏的吸顶效果和home的状态保存" class="headerlink" title="5、控制栏的吸顶效果和home的状态保存"></a>5、控制栏的吸顶效果和home的状态保存</h5><p>当我们使用了better-scroll实现了滚动事件的时候，我们之前制作的控制导航栏就会随着content的滚动而滚动了，因为better-scroll是通过改变transform来实现的滚动效果，所以我们写的定位就没有效果了，因为transform是可以拖动定位元素的，那么我们该如何实现这个吸顶效果呢？</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/tophome.png" alt="image-20220919154653982"></p><p>这里我们使用了一个障眼法，就是在拷贝一个控制栏，放在这个scroll容器的外面，默认是不显示的，当我们滑动页面到了一定的值，也就是我们content里面的那个控制导航栏的offsettop，上面的偏移量，那么就可以显示这个拷贝过来的导航栏了，对了，之前我们的大导航栏是使用的定位，现在不需要了，以为商品内容是全部放在了scroll的这个content里面了，所以我们可以让删除之前的定位了；</p><p>咱们的做法有了，那具体怎么实现呢，先别急，先拷贝出一份控制导航栏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;home&quot;&gt;</span><br><span class="line">  &lt;NavBar class=&quot;home-bar&quot;&gt;</span><br><span class="line">    &lt;template v-slot:center&gt;</span><br><span class="line">      &lt;div&gt;购物中心&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/NavBar&gt;</span><br><span class="line">  &lt;TabControlVue :titles=&#x27;titles&#x27; class=&#x27;tab-control&#x27; @tabclick=&quot;tabclick&quot; v-show=&#x27;tabcontrolshow&#x27;</span><br><span class="line">    ref=&#x27;tabcontrol1&#x27; /&gt;</span><br><span class="line">  &lt;Scroll ref=&quot;scroll&quot; :probeType=&quot;3&quot; @scroll=&quot;scroll&quot; :pullUpLoad=&quot;true&quot; @loadmore=&quot;loadmore&quot;&gt;</span><br><span class="line">    &lt;MainSwiper :banners=&#x27;banners&#x27; @imgload=&quot;imgload&quot; /&gt;</span><br><span class="line">    &lt;Recommonder :recommonders=&quot;recommends&quot;&gt;&lt;/Recommonder&gt;</span><br><span class="line">    &lt;Feature /&gt;</span><br><span class="line">    &lt;TabControlVue :titles=&#x27;titles&#x27; @tabclick=&quot;tabclick&quot; ref=&#x27;tabcontrol&#x27; /&gt;</span><br><span class="line">    &lt;GoodsListVue :goodslist=&quot;getType&quot; /&gt;</span><br><span class="line">  &lt;/Scroll&gt;</span><br><span class="line"></span><br><span class="line">  &lt;BackTop @click=&quot;backclick&quot; v-show=&quot;isshowbacktop&quot;&gt;&lt;/BackTop&gt;</span><br></pre></td></tr></table></figure><p>可以看到这里有两个TabControlVue，在scroll组件外面的那个就是我们拷贝过来的，他的一些属性是和原来的不一样的，要注意，接下来就是障眼法的编写了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tabcontrolshow: false,</span><br><span class="line">taboffsetop: 0</span><br></pre></td></tr></table></figure><p>现在home下面的data添加这个属性，他们的作用我一一来解释，第一个就是展示我们拷贝的那个控制导航栏的变量，从它的v-show属性就可以看出来了，而第二个就是里面的那个导航栏的top偏移量了；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imgload() &#123;</span><br><span class="line">  this.taboffsetop = this.$refs.tabcontrol.$el.offsetTop</span><br><span class="line">  console.log(this.taboffsetop)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>它的监听函数就在这里了，首先我们为什么要使用监听函数呢，这里的imgload其实是子组件mainswiper传递过来的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imgload()&#123;</span><br><span class="line">       if(!this.isload)&#123;</span><br><span class="line">         this.$emit(&#x27;imgload&#x27;)</span><br><span class="line">         this.isload=true</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>为什么要重这里面传过来呢，其实如果直接在home里面的mounted函数里面拿到这个控制导航栏的偏移量的话肯定是不准确的，因为那个时候数据还没有加载完成，于是他的偏移量是非常小的，而主要影响他的图片就是轮播图，也就是这里的mainswiper组件，所以我们需要等待这个组件，监听这个组件里的图片的加载函数，加载完成之后我们就可以提交一个事务来计算控制导航栏的偏移量了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src=&quot;item.image&quot; alt=&quot;&quot; @load=&quot;imgload&quot;&gt;</span><br></pre></td></tr></table></figure><p>注意这里图片会加载多次，所以我们就添加了一个属性isload来标记，因为我们并不需要他多次发送事件，我们只需要他发送一次就可以计算偏移量了，所以我们就通过给isload赋值的方式来标记已经发送请求了，不需要在发送了；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scroll(position) &#123;</span><br><span class="line">  this.isshowbacktop = -position.y &gt; 1000</span><br><span class="line">  this.tabcontrolshow = -position.y &gt; this.taboffsetop</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>有了正确的偏移量，我们就只需要在scroll里面的监听函数里面做判断就可以了，如果我们滑动的距离大于这个偏移量的话，就可以将标记显示隐藏的变量赋值为true，然后就会显示我们拷贝过来的控制导航栏了，注意这个导航栏的样式，因为层级的关系，<strong>我们需要给他更高的显示级别，但是只有定位元素才能设置级别，所以我们给他一个相对定位：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tab-control</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话就基本实现的吸顶效果，但是有一个小bug，就是我们两个控制导航栏的点击状态不一样，原因是他们的currentindex没有统一，所以我们可以统一设置一下，就在tab的监听函数下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* 事件监听方法 */</span><br><span class="line">tabclick(index) &#123;</span><br><span class="line">  //console.log(index)</span><br><span class="line">  switch (index) &#123;</span><br><span class="line">    case 0: this.currenttype = &#x27;pop&#x27;</span><br><span class="line">      break;</span><br><span class="line">    case 1: this.currenttype = &#x27;new&#x27;</span><br><span class="line">      break;</span><br><span class="line">    case 2: this.currenttype = &#x27;sell&#x27;</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  this.$refs.tabcontrol.currentIndex = index</span><br><span class="line">  this.$refs.tabcontrol1.currentIndex = index</span><br><span class="line">  //console.log(this.currenttype)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>还有，如果我们想要通过组件对象获取到对应的dom元素的话需要使用到一个属性，就是$el属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$refs.tabcontrol.$el.offsetTop</span><br></pre></td></tr></table></figure><p>只有这样我们才能够获取到对应的dom元素下面的属性；</p><p>下面就是如何保存home的状态问题，因为我们在进行页面跳转，路由更改的时候，在点回来不想有重新滑到之前的那个位置，我们需要手动的，这对用户不友好，我们可以自动的设置一下scroll滚动的距离来实现，但是也需要记录下来之前我们滑到的距离，然后再点击回来的时候我们自动设置一下就可以了，再次之前我们需要使用keep-alive保存我们的组件，因为在页面发生了路由跳转的时候会有一个问题，就是会自动销毁这个组价对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">  &lt;keep-alive&gt;</span><br><span class="line">    &lt;component :is=&quot;Component&quot; /&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们就在vue里面用这个代码替代之前的代码就可以了，他会自动保存这里面的组件，而不会在跳转路由之后就销毁组件了；</p><p>但是这还不够，我们要存下我们跳转之前的滚动距离，然后在回来的时候在设置一些滚动的距离，刚好可以使用下面两个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">activated()&#123;</span><br><span class="line">    this.scroll.scrollTo(0,this.saveY)</span><br><span class="line">    this.scroll.refresh()</span><br><span class="line">    console.log(this.saveY)</span><br><span class="line">&#125;,</span><br><span class="line">deactivated()&#123;</span><br><span class="line">    this.saveY = this.getsaveY()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为以后不仅仅是一个地方会使用，我就直接在scroll里面写这两个函数了，也比较方方便，可以看到这两个函数里面的逻辑，就是使用scroll的scrollTo函数来设置滚动的距离，然后刷新一下防止出一些莫名其妙的bug，然后在deactivated函数里面存放下当前滚动的距离就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> saveY: 0</span><br><span class="line">getsaveY()&#123;</span><br><span class="line">            return this.scroll ? this.scroll.y:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义一个变量来存储当前的距离，然后封装一个函数来获取scroll滚动就可以了；所以大概实现的逻辑就是在actived函数里面我们设置之前滑动的距离，那么就可以通过这个属性来确定之前滑动的距离，当我们点击回来的时候重新进行设置就可以了；</p><h4 id="6、详情页面的开发"><a href="#6、详情页面的开发" class="headerlink" title="6、详情页面的开发"></a>6、详情页面的开发</h4><h5 id="1、封装详情组件和导航栏的制作"><a href="#1、封装详情组件和导航栏的制作" class="headerlink" title="1、封装详情组件和导航栏的制作"></a>1、封装详情组件和导航栏的制作</h5><p>在我们制作了首页的商品之后发现点击一下并没有像用户想象的那样跳进一个商品的详情页面，这样对用户不太友好，所以我们现在就来封装一下这个东西：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailbag.png" alt="image-20220920150740054"></p><p>就在views文件夹下面我们创建一个这样的结构，然后在DetailNavbar里面写代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;detailnavbar&quot;&gt;</span><br><span class="line">        &lt;NavBarVue&gt;</span><br><span class="line">            &lt;template v-slot:left&gt;</span><br><span class="line">                &lt;div class=&quot;img&quot; @click=&quot;backclick&quot;&gt;</span><br><span class="line">                    &lt;img src=&quot;~assets/img/common/back.svg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-slot:center&gt;</span><br><span class="line">                &lt;div class=&quot;title&quot; @click=&quot;titleclick(index)&quot; v-for=&quot;(item ,index) in this.titles&quot;&gt;</span><br><span class="line">                    &lt;span :class=&quot;&#123;active: this.currentindex === index&#125;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/NavBarVue&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import NavBarVue from &#x27;components/common/navbar/NavBar.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detailnavbar&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            titles: [&#x27;商品&#x27;, &#x27;参数&#x27;, &#x27;评论&#x27;, &#x27;推荐&#x27;],</span><br><span class="line">            currentindex: 0</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        NavBarVue</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        titleclick(index) &#123;</span><br><span class="line">            this.currentindex = index</span><br><span class="line">        &#125;,</span><br><span class="line">        backclick() &#123;</span><br><span class="line">            this.$router.back()</span><br><span class="line">            console.log(&#x27;back&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style &gt;</span><br><span class="line">.left &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.img &#123;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.center &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin-right:50px;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.center .title &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.active &#123;</span><br><span class="line">    color: var(--color-high-text)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实这就是对navbar组件的一个使用而已，就是我们之前封装的那个组件的使用：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/navbaruse.png" alt="image-20220920150926569"></p><p>当然，想要用户点击之后跳转页面还需要我们路由的支持，所以我们来index.js文件里面配置一下路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Detail</span> = (<span class="params"></span>)=&gt;<span class="title function_">import</span>(<span class="params"><span class="string">&#x27;views/detail/Detail&#x27;</span></span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/detail:iid&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样计算式配好了，但是我们使用的是动态路由，这个跟传递的数据有关，因为我们点入一个商品详情页面的时候他们的请求是一样的，只是各自有各自的ID罢了，所以我们需要拿到他们的ID</p><p>然后在detail组件里面使用这个组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;detail&quot;&gt;</span><br><span class="line">        &lt;DetailNavbar/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import DetailNavbar from &#x27;./detailcomps/DetailNavbar.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detail&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            iid:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        DetailNavbar</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.iid = this.$route.params.iid</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>可以看到这里我们一旦创建这个组件之后，我们就拿到了他对应的一个iid，然后保存了起来；</p><p>最后一步就是编写点击这个商品然后跳转路由的代码，需要在GoodsLIstItem组件下面写，因为我们每一个都可以点击：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@click=&quot;clickitem&quot;</span><br><span class="line"></span><br><span class="line">clickitem() &#123;</span><br><span class="line">           // console.log(this.goodsdata)</span><br><span class="line">            this.$router.push(&#x27;/detail&#x27; + this.goodsdata.iid)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>我们就在这里跳转路由就可以，还记得我们动态路由的写法不？直接在链接后面添加上对应的参数就可以，当然还有一种方式就是query，在push里面传一个对象，这个对象有一个属性就是query；</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailbar.png" alt="image-20220920151957321" style="zoom:50%;" /><p>样式的话我们自己调一下就可以了，这里就只讲解逻辑，怎么去写就可以了；</p><h5 id="2、轮播图数据获取和展示"><a href="#2、轮播图数据获取和展示" class="headerlink" title="2、轮播图数据获取和展示"></a>2、轮播图数据获取和展示</h5><p>那么接下来就是我们详情页面上的轮播图制作了：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailscroll.png" alt="image-20220920191817899" style="zoom:50%;" /><p>那么第一部也适合home一样的，先获取到数据，还记得我们是怎么获取数据的吗？</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailproject.png" alt="image-20220920191914553"></p><p>当然是发送请求了，我们在network下面和创建一个专属于详情页面的获取请求的模块，里面就是发送请求的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 在这里对我们的request进行统一的封装，有助于我们统一管理请求</span></span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;./request.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getDetail</span>(<span class="params">iid</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/detail&#x27;</span>,</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                <span class="attr">iid</span>: iid</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们导入了request模块，然后使用了它里面的方法发送请求，其实就是对我们请求做了一个小小的封装，这样后面我们获取数据的话就只需要调用这个导出的对象，传递相应的参数就可以了，这里的话就是传递一个iid就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123;getDetail&#125; from &#x27;network/detail.js&#x27;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        iid:&#x27;&#x27;,</span><br><span class="line">        detailimg:[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">created()&#123;</span><br><span class="line">        this.iid = this.$route.params.iid</span><br><span class="line">        getDetail(this.iid).then((res)=&gt;&#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">            this.detailimg = res.data.result.itemInfo.topImages</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, </span><br></pre></td></tr></table></figure><p>在我们的Detail组建创建时，我们就可以发送请求，这里就开始调用这个函数，因为返回值是一个request，而request的返回又是一个promise，所以这里请求成功的时候就会跳转到then里面执行函数，这里就会跳转到then里面，res就是我们请求拿到的结果，需要将他存起来才不会被回收；</p><p>拿到了数据之后就是展示数据了，在此之前我们需要将之前封装过得swiper组件用到Detail组件里面来，但是我们不能直接拿来用，那样的话Detail里面的代码可读性会很差，同样我们需要封装一个DetailSwiper组件，和之前一样，创建这个组件放在childcomps文件夹下面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Swiper class=&quot;detailswiper&quot;&gt;</span><br><span class="line">        &lt;SwiperItem v-for=&quot;item in detailimg&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;item&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/SwiperItem&gt;</span><br><span class="line">    &lt;/Swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123; Swiper, SwiperItem &#125; from &#x27;components/common/swiper&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detailswiper&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        detailimg: &#123;</span><br><span class="line">            type: Array,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Swiper,</span><br><span class="line">        SwiperItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.detailswiper&#123;</span><br><span class="line">    height:300px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他的基本使用和样式我就不过多赘述，不懂就看代码，这里是通过props将我们detail组件里面拿到的数据传递到了detailswiper组件里面，然后这个组件使用了，我们之前封装好的轮播图组件，只需要传递这个图片的列表过去就可以用了；这样就就基本实现了轮播图的展示，但是还有一个小小的bug，就是之前的状态保存的问题，当时我们在app组件里面使用了keep-alive而且是所有组件，但是这里我们不需要，因为每一个点击的商品请求到的数据是不一样的，所以我们需要回到详情页的时候重新创建，需要使用到之前讲过的exculde属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">  &lt;keep-alive exclude=&quot;detail&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;Component&quot; /&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/router-view&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个属性是keep-alive的，而且后面的组件名是我们组件下面的name属性；</p><h5 id="3、商品文字信息的整合和展示"><a href="#3、商品文字信息的整合和展示" class="headerlink" title="3、商品文字信息的整合和展示"></a>3、商品文字信息的整合和展示</h5><p>我们之前就拿到了goods的数据，所以我们现在就只需要再整合一下就好了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getDetail(this.iid).then((res)=&gt;&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    const data = res.data.result</span><br><span class="line">    this.detailimg = res.data.result.itemInfo.topImages </span><br><span class="line">    if(this.goods !== null)&#123;</span><br><span class="line">        this.goods = new Goods(data.itemInfo,data.columns,data.shopInfo.services)</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据服务器传过来的数据特点，它既复杂又很难使用，所以我们在detail.js中导出一个goods类专门来存放我们需要的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//1.2 对商品文字信息的整合</span><br><span class="line">export class Goods&#123;</span><br><span class="line">    constructor(itemInfo,columns,services)&#123;</span><br><span class="line"></span><br><span class="line">        this.shopdiscountBgColor = &#x27;&#x27;===itemInfo.discountBgColor? &#x27;red&#x27;:itemInfo.discountBgColor,</span><br><span class="line">        this.discountDesc = &#x27;&#x27;===itemInfo.discountDesc? &#x27;暂无&#x27;:itemInfo.discountDesc,</span><br><span class="line">        this.oldprice = itemInfo.lowPrice,</span><br><span class="line">        this.price = itemInfo.price,</span><br><span class="line">        this.title = itemInfo.title,</span><br><span class="line">        this.columns = columns,</span><br><span class="line">        this.services = services</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就可以在detail组建中创建一个goods对象，传递给详情页，然后详情页根据我们传过去的数据展示就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;detail&quot; &gt;</span><br><span class="line">        &lt;DetailNavbar/&gt;</span><br><span class="line">        &lt;DetailSwiper :detailimg=&#x27;detailimg&#x27;/&gt;</span><br><span class="line">        &lt;DetailBaseInfo :goods=&#x27;goods&#x27;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    import &#123;getDetail,Goods&#125; from &#x27;network/detail.js&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    import DetailNavbar from &#x27;./detailcomps/DetailNavbar.vue&#x27;</span><br><span class="line">    import DetailSwiper from &#x27;./detailcomps/DetailSwiper.vue&#x27;</span><br><span class="line">    import DetailBaseInfo from &#x27;./detailcomps/DetailBaseInfo.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detail&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            iid:&#x27;&#x27;,</span><br><span class="line">            detailimg:[],</span><br><span class="line">            goods:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        DetailNavbar,</span><br><span class="line">        DetailSwiper,</span><br><span class="line">        DetailBaseInfo</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.iid = this.$route.params.iid</span><br><span class="line">        </span><br><span class="line">        getDetail(this.iid).then((res)=&gt;&#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">            const data = res.data.result</span><br><span class="line">            this.detailimg = res.data.result.itemInfo.topImages </span><br><span class="line">            if(this.goods !== null)&#123;</span><br><span class="line">                this.goods = new Goods(data.itemInfo,data.columns,data.shopInfo.services)</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,  </span><br><span class="line">    methods:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>当然也不是将代码塞到详情页面去，而是封装组件一个叫做DetailBaseInfo的小组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;detailbaseinfo&quot; v-if=&quot;!Object.keys(goods).length == 0&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;goodsinfo&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                &lt;h3&gt;&#123;&#123;goods.title&#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;price&quot;&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    &lt;h3&gt;&#123;&#123;goods.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    &lt;h4 class=&quot;middleprice&quot;&gt;&#123;&#123;goods.oldprice&#125;&#125;&lt;/h4&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;span class=&quot;shopdiscount&quot; :style=&quot;&#123;&#x27;background&#x27;:goods.shopdiscountBgColor&#125;&quot;&gt;</span><br><span class="line">                    &#123;&#123;goods.discountDesc&#125;&#125;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;others&quot;&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    &lt;h5&gt;&#123;&#123;this.goods.columns[0]&#125;&#125;&lt;/h5&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    &lt;h5&gt;&#123;&#123;this.goods.columns[1]&#125;&#125;&lt;/h5&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    &lt;h5&gt;&#123;&#123;this.goods.services[goods.services.length - 1].name&#125;&#125;&lt;/h5&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;sellafter&quot;&gt;</span><br><span class="line">            &lt;div v-for=&quot;n in goods.services.length - 1&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;goods.services[n].icon&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                &#123;&#123;goods.services[n].name&#125;&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detailbaseinfo&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        goods: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            shoplength: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">.goodsinfo &#123;</span><br><span class="line">   border-bottom: 1px solid rgba(100, 100, 100, .2);</span><br><span class="line">&#125;</span><br><span class="line">.goodsinfo div&#123;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">    padding:5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">&#125;</span><br><span class="line">.price&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.middleprice&#123;</span><br><span class="line">    padding:5px 3px  0px  5px ;</span><br><span class="line">    text-decoration: line-through;</span><br><span class="line">&#125;</span><br><span class="line">.shopdiscount&#123;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    width:50px;</span><br><span class="line">    color:wheat;</span><br><span class="line">&#125;</span><br><span class="line">.others&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.sellafter&#123;</span><br><span class="line">    display: flex;</span><br><span class="line"></span><br><span class="line">    font-size: 12px;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    padding:5px;</span><br><span class="line">    border-bottom: 2px solid rgba(100, 100, 100, .2);</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.sellafter div&#123;</span><br><span class="line">    height: 30px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">&#125;</span><br><span class="line">.sellafter img&#123;</span><br><span class="line">    width: 15px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们只需要导入goods使用就可以了，使用解构的方式，在detail组件里面导入我们封装好的类，直接在获取数据的promise里面new一个对象就可以了，我们面向对象开发，然后在信息的展示组建中，也就是DetailBaseInfo组建中，我们按照自己的喜好来调样式，这里要注意一个地方，就是传过来的goods很可能是空的所以我们在创建组件的时候要判断一下是不是空的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;detailbaseinfo&quot; v-if=&quot;!Object.keys(goods).length == 0&quot;&gt;</span><br></pre></td></tr></table></figure><p>这里使用的函数是通过判断对象的key值是否为空；</p><h5 id="4、添加better-scroll滚动效果"><a href="#4、添加better-scroll滚动效果" class="headerlink" title="4、添加better-scroll滚动效果"></a>4、添加better-scroll滚动效果</h5><p>因为我们详情也还是用的原生滚动，我们说过这个滚动在移动端是会卡的所以我们找到之前的组件来进行重构一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;detail&quot;&gt;</span><br><span class="line">    &lt;DetailNavbar class=&quot;detailnav&quot; /&gt;</span><br><span class="line">    &lt;Scroll class=&quot;detailscroll&quot;&gt;</span><br><span class="line">        &lt;DetailSwiper :detailimg=&#x27;detailimg&#x27; /&gt;</span><br><span class="line">        &lt;DetailBaseInfo :goods=&#x27;goods&#x27; /&gt;</span><br><span class="line">    &lt;/Scroll&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>很简单，到父组件里面我们就可以使用这个组件，将我们需要展示的部分套住就可以了，另外，我们的z-index需要设置一下，这里不像home，这里的mainbar是不需要显示的：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detail.png" alt="image-20220921203719836" style="zoom:50%;" /><p>我们只需要覆盖掉就可以了，想要覆盖掉mainbar，我们需要设置的值比他的z-index多两个等级：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.detailscroll &#123;</span><br><span class="line">    z-index: 9;</span><br><span class="line">    bottom:0px;</span><br><span class="line">    background-color: var(--color-background);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到我们设置的是9，因为mainbar改为了7：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.mainbar &#123;</span><br><span class="line">  z-index: 7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个要注意的，我们之前封装的scroll的bottom默认的是49px，那是因为再home页面需要显示mainbar，所以这里我们不需要显示就可以将他设置为0来覆盖掉；</p><h5 id="5、店铺信息的展示"><a href="#5、店铺信息的展示" class="headerlink" title="5、店铺信息的展示"></a>5、店铺信息的展示</h5><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailshopimg.png" alt="image-20220922110617806" style="zoom:50%;" /><p>我们需要拿到商家的信息然后按照图片中的样子展示，当然可以自己自由设计，但是服务器给我们的数据就这些，好在是都放在了一个对象里面，所以我们可以封装一个店铺组件，然后将这个对象传递过期就可以了：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailshowpro.png" alt="image-20220922110745713"></p><p>首先在detailcomps文件夹下面创建一个组件DetailShopInfo，在我们的detail组件下面引用使用一下，然后就可以将数据打个包传给他了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import DetailShopInfo from &#x27;./detailcomps/DetailShopInfo.vue&#x27;</span><br><span class="line">&lt;DetailShopInfo :shop=&#x27;shop&#x27;/&gt;</span><br><span class="line"></span><br><span class="line">    components: &#123;</span><br><span class="line">        DetailNavbar,</span><br><span class="line">        DetailSwiper,</span><br><span class="line">        DetailBaseInfo,</span><br><span class="line">        DetailShopInfo,</span><br><span class="line">        Scroll</span><br><span class="line">    &#125;,</span><br><span class="line">    getDetail(this.iid).then((res) =&gt; &#123;</span><br><span class="line">            //console.log(res)</span><br><span class="line">            const data = res.data.result</span><br><span class="line">            this.detailimg = data.itemInfo.topImages</span><br><span class="line">            //传递店铺信息</span><br><span class="line">            this.shop = data.shopInfo</span><br><span class="line">            //console.log(this.shop)</span><br><span class="line">            </span><br><span class="line">            if (this.goods !== null) &#123;</span><br><span class="line">                this.goods = new Goods(data.itemInfo, data.columns, data.shopInfo.services)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>我们就定义一个属性为shop，在promise里面存储一下值就可以放在子组件里面传过去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;detailshop&quot; v-if=&quot;Object.keys(shop).length !== 0&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;shop-top&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;img&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;shop.shopLogo&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">                &#123;&#123;shop.name&#125;&#125;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;shop-middle&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;middle-comments&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;comments-left&quot;&gt;</span><br><span class="line">                    &lt;span&gt;</span><br><span class="line">                        &#123;&#123;fixedshop(shop.cSells)&#125;&#125;</span><br><span class="line">                    &lt;/span&gt;</span><br><span class="line">                    &lt;p&gt; 总销量&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;comments-right&quot;&gt;</span><br><span class="line">                    &lt;span&gt;&#123;&#123;shop.cGoods&#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;p&gt;全部宝贝&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;middle-comments-table&quot;&gt;</span><br><span class="line">                &lt;table&gt;</span><br><span class="line">                    &lt;tr v-for=&quot;item in shop.score&quot; :class=&quot;&#123;better:item.isBetter&#125;&quot;&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&#123;&#123;item.score&#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/table&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;shop-bottom&quot;&gt;</span><br><span class="line">            &lt;button&gt;进入店铺&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detailshopinfo&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        shop: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            shopresult: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        fixedshop(value) &#123;</span><br><span class="line">            if (value &gt;= 10000) &#123;</span><br><span class="line">                return (value / 10000).toFixed(1) + &#x27;万&#x27;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">        shopFilter(value) &#123;</span><br><span class="line">            let result = 0</span><br><span class="line">            return result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.detailshop&#123;</span><br><span class="line">    margin-top:5px;</span><br><span class="line">    border-bottom: var(--common-border);</span><br><span class="line">    padding: 5px ;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.shop-top&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.shop-top .img&#123;</span><br><span class="line">    width:60px;</span><br><span class="line">    height: 60px;</span><br><span class="line">/*     border-radius: 50%;</span><br><span class="line">    border: var(--common-border); */</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    margin-right: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.shop-top .img img&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">&#125;</span><br><span class="line">.better &#123;</span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">&#125;</span><br><span class="line">.shop-middle&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin-top:20px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.shop-middle div&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">&#125;</span><br><span class="line">.shop-middle .middle-comments&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    border-right: var(--common-border);</span><br><span class="line">&#125;</span><br><span class="line">.shop-middle .middle-comments-table&#123;</span><br><span class="line">    margin-left:30px;</span><br><span class="line">&#125;</span><br><span class="line">.detailshop .shop-bottom&#123;</span><br><span class="line">    margin-top:10px;</span><br><span class="line">    /* margin: 0 auto; */</span><br><span class="line">    transform: translateX(50%);</span><br><span class="line">&#125;</span><br><span class="line">.detailshop .shop-bottom button&#123;</span><br><span class="line">    transform: translateX(-50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这里我们也需要判断一下传过来的shop是否为空值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;detailshop&quot; v-if=&quot;Object.keys(shop).length !== 0&quot;&gt;</span><br></pre></td></tr></table></figure><p>这里的比较简单，数据拿到之后就可以放在标签里面展示了，注意一个地方就是我们在展示商品的销量的时候可以使用过滤器，目的就是在数量超过一万的时候就显示万字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fixedshop(value) &#123;</span><br><span class="line">            if (value &gt;= 10000) &#123;</span><br><span class="line">                return (value / 10000).toFixed(1) + &#x27;万&#x27;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="6、商品图片信息的展示"><a href="#6、商品图片信息的展示" class="headerlink" title="6、商品图片信息的展示"></a>6、商品图片信息的展示</h5><p>做法还是一样的，就是到detail里面拿到数据，然后封装组件，将数据传递进去，然后自己写一点样式展示就可以了，这里的比较简单：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailimg.png" alt="image-20220922162544744" style="zoom:50%;" /><p>首先我们需要分析数据，具体使用的数据是在这里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const data = res.data.result</span><br><span class="line">this.detailimg = data.itemInfo.topImages</span><br><span class="line">//传递店铺信息</span><br><span class="line">this.shop = data.shopInfo</span><br></pre></td></tr></table></figure><p>在data的detailInfo里面：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailinfordata.png" alt="image-20220922162829574"></p><p>我们需要展示的内容就在这个shopInfo中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getDetail(this.iid).then((res) =&gt; &#123;</span><br><span class="line">            //console.log(res)</span><br><span class="line">            const data = res.data.result</span><br><span class="line">            this.detailimg = data.itemInfo.topImages</span><br><span class="line">            //传递店铺信息</span><br><span class="line">            this.shop = data.shopInfo</span><br><span class="line">            //console.log(this.shop)</span><br><span class="line">            this.detailInfo = data.detailInfo</span><br><span class="line">            if (this.goods !== null) &#123;</span><br><span class="line">                this.goods = new Goods(data.itemInfo, data.columns, data.shopInfo.services)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>是这里的detailInfo里面，里面的key就是我们需要展示的文字，list里面的就是展示的图片，数据也挺简单，我们直接将detailInfo传给我们封装好的子组件就可以了；</p><p>现在我们再到detailcomps文件架下面创建一个子组件DetailImageInfo：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailinforimg.png" alt="image-20220922163049606"></p><p>里面存放着如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;detailimgeinfo&quot; v-if=&quot;!Object.keys(detailInfo).length == 0&quot;&gt;</span><br><span class="line">        &lt;div v-for=&quot;infoitem in detailInfo.detailImage&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;imagetype&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;start&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;message&quot;&gt;</span><br><span class="line">                    &#123;&#123;infoitem.key&#125;&#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;end&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div v-for=&quot;item in infoitem.list&quot; class=&quot;imageshow&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;item&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detailimageinfo&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        detailInfo: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.detailimgeinfo &#123;</span><br><span class="line">    border-bottom: var(--common-border);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imagetype &#123;</span><br><span class="line">    height: 80px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imagetype .message &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    line-height: 80px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imagetype .start,</span><br><span class="line">.imagetype .end &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 100px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 10px;</span><br><span class="line">    height: 2px;</span><br><span class="line">    background-color: black;</span><br><span class="line">    border: var(--common-border);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imagetype .start &#123;</span><br><span class="line">    left: 3px;</span><br><span class="line">    top: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imagetype .end &#123;</span><br><span class="line">    right: 3px;</span><br><span class="line">    bottom: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imagetype .start::before,</span><br><span class="line">.imagetype .end::before &#123;</span><br><span class="line">    content: &quot; 秒&quot;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background-color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imagetype .start::before &#123;</span><br><span class="line">    left: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imagetype .end::before &#123;</span><br><span class="line">    right: 0px;</span><br><span class="line">    bottom: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.imageshow img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>我们设置好根元素之后就可以遍历父组件传过来的detailInfo中的detailImage，里面就存放着我们图片的信息和key值，然后展示到元素上即可，这里的样式自己随意设置，只要看得下去就行，反正数据就这么简单，用起来也简单，还有要注意一点，首行里面的数据对象判断一定要写，我已经多次强调了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;detailimgeinfo&quot; v-if=&quot;!Object.keys(detailInfo).length == 0&quot;&gt;</span><br></pre></td></tr></table></figure><p>以后也是，在我们遇到异步数据的传递时，为了避免传递空值，一定要这样写；</p><h5 id="7、商品属性的展示"><a href="#7、商品属性的展示" class="headerlink" title="7、商品属性的展示"></a>7、商品属性的展示</h5><p>接下来就是展示商品的一些尺寸、材质之类的，我们用老套路就可以了；首先分析数据，然后封装数据，展示数据就可以了，样式按自己想要的调样式就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.paramsInfo = data.itemParams</span><br></pre></td></tr></table></figure><p>我们需要的就在这里面，然后封装组件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailprarams.png" alt="image-20220922200025072"></p><p>下面是代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;paramsinfo&quot; v-if=&quot;!Object.keys(paramsInfo).length == 0&quot;&gt;</span><br><span class="line">        &lt;table v-for=&quot;item in paramsInfo.rule.tables&quot;&gt;</span><br><span class="line">            &lt;tr&gt;&#123;&#123;paramsInfo.rule.key&#125;&#125;&lt;/tr&gt;</span><br><span class="line">            &lt;tr v-for=&quot;trnum in item&quot;&gt;</span><br><span class="line">                &lt;td v-for=&quot;tbnum in trnum&quot;&gt;</span><br><span class="line">                    &#123;&#123;tbnum&#125;&#125;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;table &gt;</span><br><span class="line">            &lt;tr&gt;&#123;&#123;paramsInfo.info.key&#125;&#125;&lt;/tr&gt;</span><br><span class="line">            &lt;tr v-for=&quot;item in paramsInfo.info.set&quot;&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &#123;&#123;item.key&#125;&#125;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">                &lt;td class=&quot;viewout&quot;&gt;</span><br><span class="line">                    &#123;&#123;item.value&#125;&#125;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detailparamsinfo&#x27;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        paramsInfo:&#123;</span><br><span class="line">            type:Object,</span><br><span class="line">            default()&#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.paramsinfo&#123;</span><br><span class="line">    border-bottom: var(--common-border);</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.paramsinfo table&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    border-bottom: var(--common-border);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.paramsinfo table tr&#123;</span><br><span class="line">    border-bottom:1px solid  black;</span><br><span class="line">&#125;</span><br><span class="line">.paramsinfo table td&#123;</span><br><span class="line">    height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.viewout&#123;</span><br><span class="line">    color:var(--color-high-text);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后就是使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import DetailParamsInfo from &#x27;./detailcomps/DetailParamsInfo.vue&#x27;</span><br><span class="line">DetailParamsInfo,</span><br><span class="line">&lt;DetailParamsInfo :paramsInfo=&#x27;paramsInfo&#x27;/&gt;</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>既然是老套路了，我就不多赘述，反正重点就在于找到我们需要的数据进行分析，然后就按照格式展示就可以了；</p><h5 id="7、用户评价展示"><a href="#7、用户评价展示" class="headerlink" title="7、用户评价展示"></a>7、用户评价展示</h5><p>同样的，我们一件商品下面怎么可以少得了用户的评价呢？</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/commentimg.png" alt="image-20220923145250946" style="zoom:50%;" /><p>我们大概就做成这个样子，只能看到一条数据，因为后期做单机事件的时候才会展示后面的，就点击那个更多按钮就可以；</p><p>老样子，我们继续来分析数据：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/commentdata.png" alt="image-20220923145411157"></p><p>同样是那个data，那个result，不同的是拿的是rate对象，传给我们封装的评论组件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/commetpro.png" alt="image-20220923145506128"></p><p>在这个位置创建好这个组件，然后写上下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;commentinfo&quot; v-if=&quot;!Object.keys(commentinfo).length == 0&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;commentbar&quot;&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">                商家评价</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">                更多</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;userinfo&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;user&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;commentinfo.user.avatar&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                &#123;&#123;commentinfo.user.uname&#125;&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;usercomment&quot;&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123;commentinfo.content&#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;日期：&#123;&#123;this.dateformat(commentinfo.created)&#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;款式：&#123;&#123;commentinfo.style&#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;p class=&quot;store&quot; v-if=&quot;&#x27;explain&#x27; in commentinfo&quot;&gt;&#123;&#123;commentinfo.explain&#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;div class=&quot;userimage&quot;</span><br><span class="line">                v-if=&quot;&#x27;images&#x27; in commentinfo&quot;&gt;</span><br><span class="line">                    &lt;img :src=&quot;item&quot; alt=&quot;&quot;  v-for=&quot;item in commentinfo.images&quot; &gt;</span><br><span class="line">                &lt;/div&gt;    </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detailcommentinfo&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        commentinfo: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    filters:&#123;</span><br><span class="line">        dateformat(value)&#123;</span><br><span class="line">            let date = new Date(value)</span><br><span class="line">            let resulet = &#x27;20&#x27;+date.getFullYear()+&#x27;/&#x27;+</span><br><span class="line">            (date.getMonth()+1)+&#x27;/&#x27;+</span><br><span class="line">            date.getDay()</span><br><span class="line">            return resulet</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        dateformat(value)&#123;</span><br><span class="line">            let date = new Date(value)</span><br><span class="line">            let result = date.getFullYear()+&#x27;/&#x27;</span><br><span class="line">            let month = (&#x27;00&#x27;+(date.getMonth() + 1))</span><br><span class="line">            month = month.substring(month.length - 2)</span><br><span class="line">            let day = (&#x27;00&#x27;+(date.getDay() + 1))</span><br><span class="line">            day = day.substring(day.length - 2)</span><br><span class="line">            result = result + month+&#x27;/&#x27; + day</span><br><span class="line">            return result</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.commentinfo &#123;</span><br><span class="line">    border-bottom: var(--common-border);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.commentbar &#123;</span><br><span class="line">    height: 80px;</span><br><span class="line">    display: flex;</span><br><span class="line">    line-height: 80px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    border-bottom: var(--common-border);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.commentbar span:first-child &#123;</span><br><span class="line">    flex: 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.commentbar span:last-child &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.userinfo &#123;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.userinfo .user img &#123;</span><br><span class="line">    width: 60px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-bottom: 8px;</span><br><span class="line">&#125;</span><br><span class="line">.userinfo  .usercomment p&#123;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line">.store&#123;</span><br><span class="line">    color:var(--color-high-text);</span><br><span class="line">&#125;</span><br><span class="line">.usercomment .userimage&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height:80px;</span><br><span class="line">&#125; </span><br><span class="line">.usercomment .userimage img&#123;</span><br><span class="line">    width:60px;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是做了一个数据的传递操作和一个格式化时间的操作，这里的新东西就是格式化时间了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dateformat</span>(<span class="params">value</span>)&#123;</span><br><span class="line">           <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(value)</span><br><span class="line">           <span class="keyword">let</span> result = date.<span class="title function_">getFullYear</span>()+<span class="string">&#x27;/&#x27;</span></span><br><span class="line">           <span class="keyword">let</span> month = (<span class="string">&#x27;00&#x27;</span>+(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>))</span><br><span class="line">           month = month.<span class="title function_">substring</span>(month.<span class="property">length</span> - <span class="number">2</span>)</span><br><span class="line">           <span class="keyword">let</span> day = (<span class="string">&#x27;00&#x27;</span>+(date.<span class="title function_">getDay</span>() + <span class="number">1</span>))</span><br><span class="line">           day = day.<span class="title function_">substring</span>(day.<span class="property">length</span> - <span class="number">2</span>)</span><br><span class="line">           result = result + month+<span class="string">&#x27;/&#x27;</span> + day</span><br><span class="line">           <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>首先我们拿到父组件传给我们的数据，里面都有一个created，他是一个时间戳，所以我们需要写一个函数来格式化一下，创建一个date对象，传给这个构造函数这个时间戳，然后就可以获取相应的年份、月份等，<strong>因为要格式化，但是拿到的月份可能是个位数，所以这里是用了一个小技巧，就是字符串的截取，先加上两个零，然后往后截取两位；</strong></p><p>然后来看看我们detail里面传数据的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">DetailCommentsInfo</span> <span class="keyword">from</span> <span class="string">&#x27;./detailcomps/DetailCommentInfo.vue&#x27;</span></span><br><span class="line"> <span class="attr">commentinfo</span>:&#123;&#125;</span><br><span class="line"> <span class="title class_">DetailCommentsInfo</span>,</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">commentinfo</span> = data.<span class="property">rate</span>.<span class="property">list</span>[<span class="number">0</span>] ? data.<span class="property">rate</span>.<span class="property">list</span>[<span class="number">0</span>] : &#123;&#125;</span><br></pre></td></tr></table></figure><p>因为有时候一些商品没有评论，就体现在服务器穿过来到数据有没有对应的属性，比如评论下面的一些图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;userimage&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-if</span>=<span class="string">&quot;&#x27;images&#x27; in commentinfo&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>  <span class="attr">v-for</span>=<span class="string">&quot;item in commentinfo.images&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>这里因为有一些评论没有附带图片，所以我们在展示他们的时候需要做一个判断，这里就是判断父组件传过来的数据有没有images这个属性就可以了；</p><p>8、其他商品的推荐</p><p>加下来就是商品推荐，他使用的接口是不一样的，使用的是recommend下面的，所以需要我们封装一个接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getRecommend</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/recommend&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是放在network里面的detail.js下面，用于网络获取数据的；</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/recommendimg.png" alt="image-20220923165156680" style="zoom:50%;" /><p>其实商品推荐的信息也就是我们home里面的商品展示效果，所以我们直接在detail组件里面引用他就可以了，但是在此之前我们需要分析我们拿到的数据是怎么样的，然后再来决定如何展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; getDetail, Goods ,getRecommend&#125; from &#x27;network/detail.js&#x27;</span><br><span class="line"> recommend:[]</span><br><span class="line">getRecommend().then((res)=&gt;&#123;</span><br><span class="line">//console.log(res)</span><br><span class="line">this.recommend = res.data.data.list</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用接口，创建好一个用来存放数据的属性，recommend，在created下面创建使用这个借口的方法，获取到数据传给组件就可了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;h3&gt;商品推荐：&lt;/h3&gt;</span><br><span class="line">&lt;GoodsList :goodslist=&#x27;recommend&#x27;/&gt;</span><br></pre></td></tr></table></figure><p>这里有一个小bug，之前我们在封装GoodsListItem组件的时候只考虑到home里面的使用，所以就只按照home里面的数据结构来获取的数据，这样显然在这里行不通：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;goodslistsitem&quot; @click=&quot;clickitem&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;showImage&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;goodstext&quot;&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;goodsdata.title&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;span style=&quot;color:red&quot;&gt;价格：&#123;&#123;goodsdata.price&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span id=&quot;collect&quot;&gt;&#123;&#123;goodsdata.cfav&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>所以我们进入goodslistitem组件，在里面的img的src动态绑定一个计算属性，需要判断当前的页面是哪一个，然后分情况来考虑如何使用数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">showImage()&#123;</span><br><span class="line">            //console.log(this.goodsdata)</span><br><span class="line">            if(this.$route.path.indexOf(&#x27;/home&#x27;) !== -1)&#123;</span><br><span class="line">                //console.log(&#x27;detail&#x27;)</span><br><span class="line">                return this.goodsdata.show.img</span><br><span class="line">            &#125;else if(this.$route.path.indexOf(&#x27;/detail&#x27;) !== -1)&#123;</span><br><span class="line">                //console.log(this.goodsdata)</span><br><span class="line">                return this.goodsdata.image</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return null</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="8、点击导航栏自动滚动页面功能"><a href="#8、点击导航栏自动滚动页面功能" class="headerlink" title="8、点击导航栏自动滚动页面功能"></a>8、点击导航栏自动滚动页面功能</h5><p>我们想要实现点击自动滚动页面的功能：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/scrloo-detailimg.png" alt="image-20220924120538787" style="zoom:50%;" /><p>点击参数就会跳转到参数部分，这个我们需要怎么做呢？</p><p>首先思路很重要，因为是滚动，所以我们需要用到better-scroll框架中的scrollTo方法，传入x、y方向，然后滚动距离和滚动时间参数就可以实现自动的滚动效果，最重要的就是计算出我们需要滚动的距离，对应的就是详情页面上展示的各个组件的scrollTop，所以我们需要创建一个数组来存储这些组件的scrollTop，但是我们存下了他们的数据之后又如何跳转到对应的位置呢？我们可以使用这几个选项的index：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/scrloo-detail.png" alt="image-20220924122640006"></p><p>这是该导航组件下面的元素，然后在他的点击响应函数里面提交一下事件给父组件，带上index参数，在我们点击的时候跳转到对应的位置，这个index就是数组的index就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">titleclick</span>(<span class="params">index</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currentindex</span> = index</span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;navclick&#x27;</span>,index)</span><br><span class="line">        &#125;,</span><br><span class="line">            </span><br><span class="line">            <span class="title function_">navclick</span>(<span class="params">index</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">scroll</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, -<span class="variable language_">this</span>.<span class="property">cmpofftops</span>[index], <span class="number">200</span>)</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><p>这里就是做了一个监听点击事件然后在处理一些逻辑，就是对应的滚动内容的操作，重点还是在我们如何获取到对应的数据上面：</p><p>到底什么时候开始获取这些数据，如何获取这些数据呢？我们可以使用ref获取到dom元素，还记得吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">imgload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* console.log(&#x27;图片加载完毕&#x27;) */</span></span><br><span class="line">    <span class="keyword">let</span> remmber = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(remmber)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cmpofftops</span> = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="title function_">push</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">params</span>.<span class="property">$el</span>.<span class="property">offsetTop</span> )</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">comments</span>.<span class="property">$el</span>.<span class="property">offsetTop</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">recommend</span>.<span class="property">offsetTop</span>)</span><br><span class="line">        remmber = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>因为是异步请求到的数据，我们在所有的子组件里面都使用了v-if来判断，如果直接在mounted里面获取数据的话，显然是不能实现的，因为那个时候数据还没有来，那么就没有那个dom元素对象，所以我们选择在详情页的图片加载完成之后，发送一个事件给父元素，然后父元素在接受事件处理的时候再来获取这个offsetTop；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">imgload</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;imgload&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在做一下滚动页面时导航栏活跃状态也会跟着改变的效果；也叫作联动效果</p><p>其实就是通过监听滚动的事件然后判断一下this.cmpofftops里面的数据，到达一定的范围之后就可以改变导航栏里面活跃状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">scroll</span>(<span class="params">position</span>)&#123;</span><br><span class="line">           <span class="comment">//console.log(position)</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">currentindex</span> !== i &amp;&amp; ((i &lt; <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="property">length</span>-<span class="number">1</span> &amp;&amp; (-position.<span class="property">y</span> &lt;= <span class="variable language_">this</span>.<span class="property">cmpofftops</span>[i+<span class="number">1</span>] &amp;&amp; -position.<span class="property">y</span> &gt;= <span class="variable language_">this</span>.<span class="property">cmpofftops</span>[i])) </span><br><span class="line">               || (i === <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="property">length</span>-<span class="number">1</span> &amp;&amp; -position.<span class="property">y</span> &gt;= <span class="variable language_">this</span>.<span class="property">cmpofftops</span>[i])))&#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="property">currentindex</span> = i</span><br><span class="line">                   <span class="comment">//console.log(this.currentindex)</span></span><br><span class="line">                   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">nav</span>.<span class="property">currentindex</span> = <span class="variable language_">this</span>.<span class="property">currentindex</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>在我们封装scroll组件的时候，已经在滚动的滚动事件里面提交了事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">scroll</span>.<span class="title function_">on</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(position)</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;scroll&#x27;</span>, position)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但还记得我们是需要传递一个属性为三才会开启滚动监听：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Scroll</span> <span class="attr">class</span>=<span class="string">&quot;detailscroll&quot;</span> <span class="attr">:probeType</span>=<span class="string">&quot;3&quot;</span></span></span><br></pre></td></tr></table></figure><p>开启滚动之后，我们就可以在父组件里面进行判断和传递，首先在data下面创建一个表示当前的index状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">currentindex</span>:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后使用一系列的判断语句将我们滚动位置和数组下标对应起来，在传递给导航子组件就可以了，我来说一下一些判断的逻辑：</p><p>因为滚动事件会一直处于监听状态，会一直执行赋值操作，所以我们通过判断当前的index是否一致来决定是否赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">currentindex</span> !== i</span><br></pre></td></tr></table></figure><p>然后在小于数组长度-1的地方判断是否处于区间范围：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(i &lt; <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="property">length</span>-<span class="number">1</span> &amp;&amp; (-position.<span class="property">y</span> &lt;= <span class="variable language_">this</span>.<span class="property">cmpofftops</span>[i+<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>等于数组减一的时候就判断大于最后一个范围就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; -position.<span class="property">y</span> &gt;= <span class="variable language_">this</span>.<span class="property">cmpofftops</span>[i]))</span><br></pre></td></tr></table></figure><p>很多时候代码比较复杂的时候，我们会采用空间换取事件的策略：</p><p>比如这里因为要判断最后一个最大值而需要我们多加一条判断语句，其实我们可以多放一个值在数组的后面，这样就不需要在拿出一个判断了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="title function_">push</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>)</span><br></pre></td></tr></table></figure><p>使用Number.MAX_VALUE可以将数组里面的最大值放进去，然后就可以将之前的后面一条判断语句删除，于是语句就变简单了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">scroll</span>(<span class="params">position</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(position)</span></span><br><span class="line">            <span class="keyword">let</span> length = <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="property">length</span>;</span><br><span class="line">            <span class="keyword">let</span> topvalue = -position.<span class="property">y</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">currentindex</span> !== i &amp;&amp; ((i &lt; <span class="variable language_">this</span>.<span class="property">cmpofftops</span>.<span class="property">length</span>-<span class="number">1</span> &amp;&amp; ( topvalue &lt;= <span class="variable language_">this</span>.<span class="property">cmpofftops</span>[i+<span class="number">1</span>] &amp;&amp; topvalue &gt;= <span class="variable language_">this</span>.<span class="property">cmpofftops</span>[i])) </span><br><span class="line">                ))&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">currentindex</span> = i</span><br><span class="line">                    <span class="comment">//console.log(this.currentindex)</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">nav</span>.<span class="property">currentindex</span> = <span class="variable language_">this</span>.<span class="property">currentindex</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="9、底部bar的制作"><a href="#9、底部bar的制作" class="headerlink" title="9、底部bar的制作"></a>9、底部bar的制作</h5><p>详情页面还有一个购买的操作，我们需要将底部的加入购物车选项卡制作一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/btmselectimg.png" alt="image-20220925105757678"></p><p>大概就是这个样子了，相信大家做了这么久，也应该有自己的思路去做这个组件了，首先还是我们的组件封装，需要按这个图片创建组件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/detailinfo.png" alt="image-20220925105928391"></p><p>叫做DetailBottomBar组件，里面存放着这些数据，图标样式标签什么的就需要大家自己去调，这里我们讲一下思路，先进行数据的准备，两个数组，一些图标，存放在该组件的data下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">       return &#123;</span><br><span class="line">           icons: [</span><br><span class="line">           require(&#x27;assets/img/detail/客服.png&#x27;),</span><br><span class="line">           require(&#x27;assets/img/detail/店铺.png&#x27;),</span><br><span class="line">           require(&#x27;assets/img/detail/收藏.png&#x27;)</span><br><span class="line">           ],</span><br><span class="line">           icontext: [&#x27;客服&#x27;, &#x27;店铺&#x27;, &#x27;收藏&#x27;]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>因为我们想要动态显示图片在img的src方式下面的话就需要使用require来封装路径，将文字和图片对应起来就可以了，至于这个选项卡的位置，我们直接使用固定定位就可以了，将图片和文字的位置对应起来就可以了；</p><p>至于使用这个组件的时候，我们不要放在scroll里面就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;bottombar&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;bar-left&quot;&gt;</span><br><span class="line">            &lt;div v-for=&quot;(item,index) in icontext&quot; class=&quot;leftitem&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;this.icons[index]&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;bar-right&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span&gt;加入购物车&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;span&gt;购买&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;detailbottombar&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            icons: [</span><br><span class="line">            require(&#x27;assets/img/detail/客服.png&#x27;),</span><br><span class="line">            require(&#x27;assets/img/detail/店铺.png&#x27;),</span><br><span class="line">            require(&#x27;assets/img/detail/收藏.png&#x27;)</span><br><span class="line">            ],</span><br><span class="line">            icontext: [&#x27;客服&#x27;, &#x27;店铺&#x27;, &#x27;收藏&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.bottombar &#123;</span><br><span class="line">    height: 49px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding:1px;</span><br><span class="line">    display: flex;</span><br><span class="line">    border-top: var(--common-border);</span><br><span class="line">    background-color: var(--color-background);</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 0px;</span><br><span class="line">    z-index: 9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bar-left &#123;</span><br><span class="line">    flex: 3;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.leftitem &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.leftitem img &#123;</span><br><span class="line">    width: 25px;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.leftitem span&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.bar-right &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 49px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bar-right div:first-child &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bar-right div:last-child &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    background-color: deeppink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="10、返回顶部的小箭头的制作"><a href="#10、返回顶部的小箭头的制作" class="headerlink" title="10、返回顶部的小箭头的制作"></a>10、返回顶部的小箭头的制作</h5><p>这个和home里面是一样的，这里有很多公共的代码，我们其实可以抽离出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mix1 = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">isshowbacktop</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">tabcontrolshow</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">taboffsetop</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">scroll</span>(<span class="params">position</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isshowbacktop</span> = -position.<span class="property">y</span> &gt; <span class="number">1000</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tabcontrolshow</span> = -position.<span class="property">y</span> &gt; <span class="variable language_">this</span>.<span class="property">taboffsetop</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">backclick</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">scroll</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue2里面，这些代码是可以抽离出来一个模块，然后混入进组件之中，后面我们需要使用的时候就只要使用组件然后混入这个内容就可以实现返回顶部的效果了。</p><h4 id="7、购物车开发"><a href="#7、购物车开发" class="headerlink" title="7、购物车开发"></a>7、购物车开发</h4><h5 id="1、使用vuex来获取货物数目"><a href="#1、使用vuex来获取货物数目" class="headerlink" title="1、使用vuex来获取货物数目"></a>1、使用vuex来获取货物数目</h5><p>首先安装号vuex之后，就在src下面创建一个store文件夹，里面需要创建这些文件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/stroepro.png" alt="image-20220928181126267"></p><p>其实一眼看上去就可以大概知道怎么做得，出来index文件以外，其他其实都是属于index中属性分离出来的文件，为了不让index文件太杂乱，所以就分出几个模块，主要就是看看这里面具体有哪些数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&#x27;./mutations&#x27;</span></span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">cartlist</span>: [],</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先是index文件中，里面导入其他的mutations、actions等模块，注意这里模块的名称一定要和属性名称一致才不会出现一些莫名其妙的问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ADD_GOODS</span>, <span class="variable constant_">GET_COUNT</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./mutation-type&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    [<span class="variable constant_">ADD_GOODS</span>](state, payload) &#123;</span><br><span class="line">        state.<span class="property">cartlist</span>.<span class="title function_">push</span>(payload)</span><br><span class="line">        state.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getgoods</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">cartlist</span>)</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">cartlist</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="variable constant_">GET_COUNT</span>](state) &#123;</span><br><span class="line">        state.<span class="property">count</span> = state.<span class="property">cartlist</span>.<span class="property">length</span></span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是mutations模块里面的数据了，主要有三个事务，添加货物、获取货物、获取货物的数量，还导入了一个mutation-type模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADD_GOODS</span>=<span class="string">&#x27;addgoods&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_COUNT</span>=<span class="string">&#x27;getcount&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_GOODS</span>=<span class="string">&#x27;getgoods&#x27;</span></span><br></pre></td></tr></table></figure><p>很明显，这个模块里面就三句话，目的就是防止我们输错事务名而设置的一些变量名，之前也讲过；</p><p>然后就是getters，这个文件是比较重要的，因为后面我们使用了一个getters的映射，用于加到组建的computed属性里面使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">getcount</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">count</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getlist</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">cartlist</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getter里面也很简单，就导出了两个计算属性，这些值获取到对应的数据之后就可以放到对应的组建的计算属性中使用了，很方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters(&#123;</span><br><span class="line">        list:&#x27;getlist&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>想要使用这个方法，需要我们导入mapGetters对象，然后在组件的computed属性下面使用解构的方式来获取对应的getters文件里面的计算属性，这里在mapGetters对象括号里面穿入对象还可以重命名计算属性，但是传数组就不行了，</p><p>所以建议大家传对象；</p><p>回归正题，如何获取到货物数目呢？这里相信已经出现答案了，就是getters文件的getcount，但是货物是需要我们自己来添加的：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/getcountimg.png" alt="image-20220928182240306"></p><p>就通过这个添加购物车的按钮添加数据，我们在对应的单击事件函数里面发送事务就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;DetailBottomBar @addcart=&quot;addcart&quot; /&gt;</span><br><span class="line"></span><br><span class="line">addcart()&#123;</span><br><span class="line">            let currentgoods = &#123;&#125;</span><br><span class="line">            currentgoods.iid = this.iid</span><br><span class="line">            currentgoods.image = this.detailimg[0]</span><br><span class="line">            currentgoods.desc = this.goods.desc</span><br><span class="line">            currentgoods.title = this.goods.title</span><br><span class="line">            currentgoods.price = this.goods.price</span><br><span class="line">            this.$store.commit(ADD_GOODS,currentgoods)</span><br><span class="line">            this.goodslist = this.$store._state.data.cartlist</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这个事务是底部的菜单栏传过来的，然后在detail组件下面写addcart添加我们想要的数据，所以在store属性的cartlist其实就是对象数组，这里是创建了一个商品对象，然后传给mutations来添加到cartlist里面就可以了；</p><h5 id="2、封装购物车列表组件"><a href="#2、封装购物车列表组件" class="headerlink" title="2、封装购物车列表组件"></a>2、封装购物车列表组件</h5><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/cartlistimg.png" alt="image-20220928182732351" style="zoom:50%;" /><p>因为再购物车里面的商品大概长这样，一眼看上去我们就需要知道是通过组件封装来实现的，没错，我们在cart下面创建一个文件夹childcart，在里面创建两个子组件，和之前做首页的商品列表一样，我们需要创建一个cartlist和一个cartlistitem来实现这些组件的展示结构：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/childcart.png" alt="image-20220928182955066"></p><p>当然还有导航栏这个组件，也简单，就是使用了一下getters里面的getcount这个计算属性而已：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;cart&quot;&gt;</span><br><span class="line">    &lt;NavBar class=&quot;navbar&quot;&gt;</span><br><span class="line">      &lt;template v-slot:center&gt;</span><br><span class="line">        购物车( &#123;&#123;length&#125;&#125; )</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/NavBar&gt;</span><br><span class="line">    &lt;CartList /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">import NavBar from &#x27;components/common/navbar/NavBar&#x27;</span><br><span class="line"></span><br><span class="line">import CartList from &#x27;./childcart/CartList.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;cart&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    NavBar,</span><br><span class="line">    CartList</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(this.$store._state.data.count)</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters(&#123;</span><br><span class="line">      length: &#x27;getcount&#x27;,</span><br><span class="line">      cartlist: &#x27;getlist&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.navbar &#123;</span><br><span class="line">  background: var(--color-high-text);</span><br><span class="line">  height: 44px;</span><br><span class="line">  color: var(--color-background);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#cart &#123;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  width:100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>直接看detail组件下的代码就很容易理解，这个顶部的导航栏是使用了之前我们封装过的NavBar组件，然后通过mapGetters的方式获取到store中cartlist的长度显示到导航栏上面就可以了，这里样式我就不赘述了；</p><p>来看看CartList组件的封装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;cartlist&quot; v-if=&quot;list.length !== 0&quot;&gt;</span><br><span class="line">        &lt;Scroll class=&quot;listscroll&quot; ref=&quot;listscroll&quot;&gt;</span><br><span class="line">            &lt;CartItem v-for=&quot;item in list&quot; :cart=&#x27;item&#x27; /&gt;</span><br><span class="line">        &lt;/Scroll&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CartItem from &#x27;./CartListItem.vue&#x27;</span><br><span class="line"></span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">import Scroll from &#x27;components/common/scroll/Scroll&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;cartlist&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        CartItem,</span><br><span class="line">        Scroll</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapGetters(&#123;</span><br><span class="line">            list:&#x27;getlist&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    activated()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.cartlist &#123;</span><br><span class="line">    height:100vh;</span><br><span class="line">    width:100%;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.listscroll&#123;</span><br><span class="line">    top:0;</span><br><span class="line">    bottom: 93px;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实也就是通过mapGetters拿到store中的cartlist的数据然后显示到列表中而已，注意这里的数值传递，我们通过循环这个列表来快速创建出商品列表，将cartlist中的元素传递到子组件CartItem中，还有就是这里重构了scroll，要灵活使用这个组件；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;cartitem&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;tick&quot;&gt;</span><br><span class="line">           &lt;Tick/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;cartimg&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;cart.image&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;msg&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;carttitle&quot;&gt;</span><br><span class="line">                &lt;p class=&quot;info&quot;&gt;&#123;&#123;cart.title&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;price&quot;&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    &#123;&#123;cart.price&#125;&#125;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                    x1</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Tick from &#x27;components/content/tick/Tick&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;cartitem&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        cart: &#123;</span><br><span class="line">            type: Object,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            ischeck:false</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        //console.log(this.cart)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Tick</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.cartitem &#123;</span><br><span class="line">    border-bottom: var(--common-border);</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 150px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    text-align: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tick &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    padding-top:30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cartimg &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.msg &#123;</span><br><span class="line">    flex: 4;</span><br><span class="line">    width:0px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.carttitle &#123;</span><br><span class="line">    font: 18px;</span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">    padding-top:10px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border-bottom: var(--common-border);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carttitle .info&#123;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line">.price&#123;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这里是真正写样式的组件，因为要实现这里的结构，我在这里搞了就久，现在还不是很完美，所以有牢固的css基础很重要；在vue里面，大部分布局都是使用的弹性布局；</p><h5 id="3、底部工具栏的制作"><a href="#3、底部工具栏的制作" class="headerlink" title="3、底部工具栏的制作"></a>3、底部工具栏的制作</h5><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/cartmake.png" alt="image-20220929204427940"></p><p>在购物车的下面有这样一个工具栏，当所有的商品被选中时这里的小圆圈就会变成红色，这样；</p><p>不急同样先封装组件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/cartbottom.png" alt="image-20220929204511513"></p><p>childcart文件夹下面创建一个组件CartBottomBar，按照这个结构，大概可以做成这个样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;bottombar&quot;&gt;</span><br><span class="line">        &lt;span&gt;全选&lt;/span&gt;</span><br><span class="line">        &lt;div class=&quot;sign&quot;&gt;</span><br><span class="line">            &lt;Tick  @click.native=&#x27;totalclick&#x27; :ischecked=&#x27;ischecked||selectAll&#x27;/&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&#x27;total&#x27;&gt;总计&#123;&#123;total&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&#x27;calculate&#x27;&gt;去结算(&#123;&#123;length&#125;&#125;)&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">import Tick from &#x27;components/content/tick/Tick&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;cartbottombar&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            ischecked:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Tick</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapGetters([&#x27;getlist&#x27;]),</span><br><span class="line">        total()&#123;</span><br><span class="line">            let list = this.getlist</span><br><span class="line">            //console.log(list)</span><br><span class="line">            return &#x27;￥&#x27;+ list.filter(item=&gt;&#123;</span><br><span class="line">                return item.ischecked</span><br><span class="line">            &#125;).reduce((prevalue,item)=&gt;&#123;</span><br><span class="line">                return prevalue + item.price  * item.count </span><br><span class="line">            &#125;,0).toFixed(2)</span><br><span class="line">        &#125;,</span><br><span class="line">        length()&#123;</span><br><span class="line">            return this.getlist.filter(item=&gt;&#123;</span><br><span class="line">                return item.ischecked</span><br><span class="line">            &#125;).length</span><br><span class="line">        &#125;,</span><br><span class="line">        selectAll()&#123;</span><br><span class="line">            if(this.getlist.length === 0) return false</span><br><span class="line">            return !this.getlist.find(item=&gt;!item.ischecked)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        totalclick()&#123;</span><br><span class="line">            this.ischecked = !this.ischecked</span><br><span class="line">            for(let item of this.getlist)&#123;</span><br><span class="line">                item.ischecked = this.ischecked</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.bottombar&#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    border-top: var(--common-border);</span><br><span class="line">    width:100%;</span><br><span class="line">    height:44px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color:black;</span><br><span class="line">    background-color: var(--color-background);</span><br><span class="line">    bottom:49px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.sign&#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.total&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">    color:black;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.calculate&#123;</span><br><span class="line">    width:150px;</span><br><span class="line">    height:100%;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color:#eee;</span><br><span class="line">    background-color:orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>布局还是弹性布局，只是需要设置好数据计算和一些样式，<strong>这里有一个注意的地方就是在使用flex布局的时候如果想要子元素居中显示，大可使用：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align-items: center;</span><br></pre></td></tr></table></figure><p>有些地方就配合line-height就可以了；</p><p>然后就是数据的处理，先了解以下功能，可以通过getters的映射对象拿到整个商品的列表，就我们点击了加入购物车的商品</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/statedata.png" alt="image-20220929204920917"></p><p>这里是store下面的元素，然后判断一下cartlist中的对象的ischecked是否有为false的，有的话就返回false，直接加上！就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selectAll()&#123;</span><br><span class="line">           if(this.getlist.length === 0) return false</span><br><span class="line">           return !this.getlist.find(item=&gt;!item.ischecked)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>虽然这里使用的是find，但他的性能更高，找到一个ischecked为false就说明没有全选，那么我们就不需要设置选中样式了；</p><p>对了，这个小图标组件的封装：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/goodspro.png" alt="image-20220929205248117"></p><p>放在components&#x2F;content&#x2F;tick下面的Tick组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;tick&quot; :class=&quot;&#123;ischeck:ischecked&#125;&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;~assets/img/cart/tick.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;tick&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        ischecked: &#123;</span><br><span class="line">            type: Boolean,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            checked: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#tick &#123;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    margin: auto;</span><br><span class="line">    /* overflow: hidden; */</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    border: var(--common-border);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ischeck &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>它使用的背景钩号图标可以自己去网上找一个，然后按照这样的结构和样式制作就可以了，他的选中状态就是看这个ischecked属性，可以通过父组件传过来；</p><p>然后就是数据的设置，因为这个工具栏里面的总计价格和去计算的商品数量全都是通过用户操作来进行动态设定的，所以需要根据用户选中的数据来设定，我们在detail组建中点击购物车的时候会发送一个添加购物车的事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="variable constant_">ADD_GOODS</span>](state, payload) &#123;</span><br><span class="line"></span><br><span class="line">       payload.<span class="property">ischecked</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span>(state.<span class="property">cartlist</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">           state.<span class="property">cartlist</span>.<span class="title function_">push</span>(payload)</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state.<span class="property">cartlist</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">iid</span> === payload.<span class="property">iid</span>))&#123;</span><br><span class="line">           state.<span class="property">cartlist</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(item.<span class="property">iid</span> === payload.<span class="property">iid</span>)&#123;</span><br><span class="line">                   item.<span class="property">count</span>++</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           state.<span class="property">cartlist</span>.<span class="title function_">push</span>(payload)</span><br><span class="line">       &#125;</span><br><span class="line">       state.<span class="property">count</span>++</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>这部分代码就是计算的关键，<strong>我们判断商品列表中是否含有商品，没有则添加，有就需要判断当前添加商品是否在商品列表中已经存在，存在我们直接让该商品的count加加就可以了，没有则又添加这个商品，最后记录一下总共添加的商品；</strong>实现这个功能我们大多数使用的是find，直接查找就可以，高效好用；</p><p>这个工具栏还有一些计算、记录功能和全选的按钮：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> list = <span class="variable language_">this</span>.<span class="property">getlist</span></span><br><span class="line">          <span class="comment">//console.log(list)</span></span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;￥&#x27;</span> + list.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> item.<span class="property">ischecked</span></span><br><span class="line">          &#125;).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prevalue, item</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> prevalue + item.<span class="property">price</span> * item.<span class="property">count</span></span><br><span class="line">          &#125;, <span class="number">0</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">length</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">getlist</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> item.<span class="property">ischecked</span></span><br><span class="line">          &#125;).<span class="property">length</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">selectAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">getlist</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">          <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">getlist</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> !item.<span class="property">ischecked</span>)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>一个一个来看，这里也使用了getters的映射，所以不能推断第一个total函数就是记录商品总价的函数，使用过滤器过滤掉没有选中的商品，然后用价格乘以商品对象的数量，保留两位小数；</p><p>第二个就是我们选中商品的个数，也是使用过滤器过滤掉为选中的商品就可以了；</p><p>第三个就是全选的操作了，我么只要使用find函数，找到一个没有选中的我们就将它反转，之后有取反，实现的作用就是在我们点击全选框的时候所有商品的状态会跟着改变；</p><h5 id="4、toast插件的封装"><a href="#4、toast插件的封装" class="headerlink" title="4、toast插件的封装"></a>4、toast插件的封装</h5><p>toast就是弹窗，自动消失的那种：</p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/toastimg.png" alt="image-20221001132428845"></p><p>它实现的就是提示一下用户，我们可以封装这样一个全局的组件，但不同的是，组件需要导入和引用，不是他不能实现，而是非常麻烦，如果每一个页面都需要这个toast来提示，我们岂不是所有页面都给他导入一下，所有我们应该有更好的办法来实现，就是<strong>封装为一个插件：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/toastpro.png" alt="image-20221001132719216"></p><p>首先在组价文件夹的common下面创建toast文件夹结构，里面存放着index和Toast组件，这是插件封装的不同之处，我们还需要在main里面use一下，因为我们会在index中配置install：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Toast</span> <span class="keyword">from</span> <span class="string">&#x27;components/common/toast&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(store).<span class="title function_">use</span>(<span class="title class_">Toast</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意是导入的index文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import Toast from &#x27;./Toast&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    install: app =&gt;&#123;</span><br><span class="line">        const toast = createApp(Toast)</span><br><span class="line">        const toastcmp = document.createElement(&#x27;div&#x27;)</span><br><span class="line">        document.body.appendChild(toastcmp)</span><br><span class="line">        toast.mount(toastcmp)</span><br><span class="line">        app.config.globalProperties.$toast = toast </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置插件需要了解几个点，就是我们是将组件显示在页面上，所以我们一定需要将组件添加到body的后面，也就是页面的后面，而如果需要添加为dom元素，组件必须通过mount渲染成dom元素才行，所以这里就有了创建toast组件，添加dom元素，渲染为dom几部，最后就是全局挂在vue组件上面；然后我们只需要这样就可以将toast显示在我们想要显示的页面上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$toast</span>.<span class="property">_instance</span>.<span class="property">proxy</span>.<span class="title function_">show</span>(res,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>再来看看toast组件是怎么封装的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;toast&quot; v-if=&quot;ishow&quot;&gt;</span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;toast&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            ishow:false,</span><br><span class="line">            message:&#x27;你好，这里是toast&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        show(message=&#x27;提示文本&#x27;,time=2000)&#123;</span><br><span class="line">            this.ishow = true</span><br><span class="line">            this.message = message</span><br><span class="line">            setTimeout(()=&gt;&#123;</span><br><span class="line">                this.ishow = false</span><br><span class="line">            &#125;,time)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.toast&#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    padding:5px;</span><br><span class="line">    background-color: rgba(100, 100, 100, .75);</span><br><span class="line">    color:#fff;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top:50%;</span><br><span class="line">    left:50%;</span><br><span class="line">    z-index: 9;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    transform: translate(-50%,-50%);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>主要的就是有一个方法，里面存在着setimeout，用来执行显示一段时间后消失的效果，我们给组件设置一个v-show,它的值默认为false，如果点击了按钮之后启动定时器，然后在将变量设置为true，在定时器结束之后就设置为false；</p><p>样式就自己调就可以了；</p><p>vue2插件封装代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue</span>) &#123;</span><br><span class="line">    <span class="comment">//1.1 创建组件构造器</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Vue</span>)</span><br><span class="line">    <span class="keyword">const</span> toastinstruct = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">Toast</span>)</span><br><span class="line">    <span class="keyword">const</span> toast = <span class="keyword">new</span> <span class="title function_">toastinstruct</span>()</span><br><span class="line">    <span class="comment">//1.2 将创建的组件加到当前的body后面</span></span><br><span class="line">    <span class="comment">//将组件挂在为div</span></span><br><span class="line">    toast = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(toast.<span class="property">$el</span>)</span><br><span class="line">    <span class="comment">//1.3 讲对象挂在到原型</span></span><br><span class="line">    <span class="comment">//Vue.prototype.$toast = Toast</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 动态创建元素</span></span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 子节点添加到body上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* toast = document.createElement(&#x27;div&#x27;)</span></span><br><span class="line"><span class="comment">    document.body.appendChild(toast)</span></span><br><span class="line"><span class="comment">    Vue.mount(toast) */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$toast</span> = toast </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8、代码优化"><a href="#8、代码优化" class="headerlink" title="8、代码优化"></a>8、代码优化</h4><p>1、在我们制作移动端开发的时候都会有一个问题，就是点击总是会慢300毫秒，如果想要解决这个延迟，我们可以使fastclick这个第三方库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install fastclick --save</span><br></pre></td></tr></table></figure><p>现将这个第三方库安装一下，然后就可以在main中使用一下就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">FastClick</span> <span class="keyword">from</span> <span class="string">&#x27;fastclick&#x27;</span></span><br><span class="line"><span class="title class_">FastClick</span>.<span class="title function_">attach</span>(<span class="variable language_">document</span>.<span class="property">body</span>)</span><br></pre></td></tr></table></figure><p>2、图片懒加载</p><p>有时候在浏览网页的时候我们并不需要浏览所有图片，我们的程序是一次性加载30张图片，这样对用户不友好，而且也浪费流量，所以我们要安装一个插件给图片进行一个懒加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-lazyload --save</span><br></pre></td></tr></table></figure><p>然后在main中use一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueLazyload</span> <span class="keyword">from</span> <span class="string">&#x27;vue-lazyload&#x27;</span></span><br><span class="line">.<span class="title function_">use</span>(<span class="title class_">VueLazyload</span>,&#123;<span class="attr">loading</span>:<span class="built_in">require</span>(<span class="string">&#x27;./assets/img/common/loadingimg.jpg&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure><p>这里有两个参数，一个是插件名，第二个是配置对象，我们这里设置了一个loading，表示在还没有加载的时候显示的图片：</p><p>3、对px的统一，有时候我们的视窗不一样的话就会出现样式走样的问题，其实都是因为没有统一px的原因，也就是响应式的一部分；</p><p>怎么解决呢，可以使用哦一个插件postcss-px-to-viewport</p><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-px-to-viewport --save-dev</span><br></pre></td></tr></table></figure><p>安装之后在项目下面创建一个配置文件，就和之前我们配置vue.config.js一样：</p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/postcssjs.png" alt="image-20221002202323424" style="zoom:50%;" /><p>文件名为postcss.config.js，里面放上模板代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">      autoprefixer: &#123;&#125;,</span><br><span class="line">      &quot;postcss-px-to-viewport&quot;: &#123;</span><br><span class="line">        viewportWidth: 375, //视口的宽度，对应的时设计稿的宽度/2，一般为750</span><br><span class="line">        viewportHeight: 667, //视口的高度，对应的是设计稿的高度（也可以不配置）</span><br><span class="line">        unitPrecision: 5, //指定‘px’转换为视口单位值的小数位数（很多时候无法整除）</span><br><span class="line">        viewportUnit: &#x27;vw&#x27;, //指定需要转换成的视口单位，建议使用vw</span><br><span class="line">        selectorBlankList: [&#x27;ignore&#x27;, &#x27;tab-bar&#x27;], //指定不需要转换的类</span><br><span class="line">        minPixelValue: 1, //小于或等于‘1px’不转换为视口单位</span><br><span class="line">        mediaQuery: false,//允许在媒体查询中转换为‘px’</span><br><span class="line">        exclude:[/Tabbar/]  //不需要转化的组件文件名正则，必须是正则表达式</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Tony-hurry/imageBad@main//study-images/postcss.png" alt="image-20221002202600522"></p><p>可以看到样式已经改动了，我们就来讲解一下主要的配置，就是这里的postcss-px-to-viewport配置，（viewportWidth）宽高就是对应的比例了，当视口宽度发生变化是就按照这样的比例进行缩放；要注意的就是这的mediaQuery，如果你的样式使用了媒体查询，这里可以设置是否允许在媒体查询中统一单位，一般就是false，也就是都统一；再就是有一些标签我们如果不想要统一单位，我们就需要设置一下exclude，这对用户还是很友好的，但是里面传的是一个正则表达式，大家都知道正则表达式很难用；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue基础学习&quot;&gt;&lt;a href=&quot;#Vue基础学习&quot; class=&quot;headerlink&quot; title=&quot;Vue基础学习&quot;&gt;&lt;/a&gt;Vue基础学习&lt;/h1&gt;&lt;h3 id=&quot;1、简单介绍：&quot;&gt;&lt;a href=&quot;#1、简单介绍：&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="学习vue去乘风破浪" scheme="https://tony-hurry.github.io/tony.github.io/tags/%E5%AD%A6%E4%B9%A0vue%E5%8E%BB%E4%B9%98%E9%A3%8E%E7%A0%B4%E6%B5%AA/"/>
    
  </entry>
  
</feed>
